<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TriLibCore</name>
    </assembly>
    <members>
        <member name="T:TriLibCore.AssetLoaderOptions">
            <summary>Represents a series of Model loading settings, like Unity Model Importer settings.</summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UseFileScale">
            <summary>
            Turn on this flag to use the file's original scale.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ScaleFactor">
            <summary>
            Model scale multiplier.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.SortHierarchyByName">
            <summary>
            Turn on this field to sort the Model hierarchy by name.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportVisibility">
            <summary>
            Turn on this field to apply the visibility property to Mesh Renderers/Skinned Mesh Renderers.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.Static">
            <summary>
            Turn on this field to import the Model as a static Game Object.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AddAssetUnloader">
            <summary>
            Turn on this field to add the Asset Unloader Component to the loaded Game Object, which deallocates resources automatically.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportMeshes">
            <summary>
            Turn on this field to import Model Meshes.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LimitBoneWeights">
            <summary>
            Turn on this field to limit bone weights to 4 per bone.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ReadEnabled">
            <summary>
            Turn on this field to leave imported Meshes readable.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MarkMeshesAsDynamic">
            <summary>
            Turn on this field to mark created meshes as dynamic.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.OptimizeMeshes">
            <summary>
            Turn on this field to optimize imported Meshes for GPU access.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.GenerateColliders">
            <summary>
            Turn on this field to generate Colliders for imported Meshes.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ConvexColliders">
            <summary>
            Turn on this field to generate convex Colliders when the GenerateColliders field is enabled.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportBlendShapes">
            <summary>
            Turn on this field to import Mesh Blend Shapes.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportColors">
            <summary>
            Turn on this field to import Mesh colors.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.IndexFormat">
            <summary>
            Mesh index format (16 or 32 bits).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LODScreenRelativeTransitionHeightBase">
            <summary>
            Defines the initial screen relative transition height when creating LOD Groups.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.KeepQuads">
            <summary>
            Turn on this field to maintain Mesh quads. (Useful for DX11 tessellation)
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportNormals">
            <summary>
            Turn on this field to import Mesh normals. If disabled, normals will be calculated instead.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.GenerateNormals">
            <summary>
            Turn off this field to disable Mesh normals generation.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.GenerateTangents">
            <summary>
            Turn off this field to disable Mesh tangents generation.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.SmoothingAngle">
            <summary>
            Normals calculation smoothing angle.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportBlendShapeNormals">
            <summary>
            Turn on this field to import Mesh Blend Shape normals.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.CalculateBlendShapeNormals">
            <summary>
            Turn on this field to calculate Mesh Blend Shape normals when none can be imported.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportTangents">
            <summary>
            Turn on this field to import Mesh tangents. If disabled, tangents will be calculated instead.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.SwapUVs">
            <summary>
            Turn on this field to swap Mesh UVs. (uv1 into uv2)
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportMaterials">
            <summary>
            Turn on this field to import Materials.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MaterialMappers">
            <summary>
            Mappers used to create suitable Unity Materials from original Materials.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportTextures">
            <summary>
            Turn on this field to import Textures.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ScanForAlphaPixels">
            <summary>
            Turn on this field to scan Textures for alpha-blended pixels in order to generate transparent Materials.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AlphaMaterialMode">
            <summary>
            Chooses the way TriLib creates alpha materials. The options are:
            None: Does not create any alpha material and uses opaque materials instead.
            Cutout: Creates cutout alpha materials where applicable.
            Transparent: Creates transparent (alpha) materials where applicable.
            Cutout + Transparent: Creates both materials and uses the second one as a copy from the semi-transparent mesh.
            This field is ignored when the Material Mapper uses a Shader Variant Collection.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.DoubleSidedMaterials">
            <summary>
            Turn on this field to create double-sided Materials (TriLib does that by duplicating the original Meshes).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.TextureMappers">
            <summary>
            Mappers used to find native Texture Streams from custom sources.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.TextureCompressionQuality">
            <summary>
            Texture compression to apply on loaded Textures.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.GenerateMipmaps">
            <summary>
            Turn on this field to enable Textures mip-map generation.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.FixNormalMaps">
            <summary>
            Turn on this field to change the normal map channel order to ABBR instead of RGBA.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AnimationType">
            <summary>
            Model rigging type.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.SimplifyAnimations">
            <summary>
            Turn on this field to simplify animation curves.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.PositionThreshold">
            <summary>
            Position simplification threshold. The smaller the values, the more precision.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.RotationThreshold">
            <summary>
            Rotation simplification threshold (in degrees). The smaller the values, the more precision.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ScaleThreshold">
            <summary>
            Scale simplification threshold. The smaller the values, the more precision.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AvatarDefinition">
            <summary>
            Type of Avatar creation for the Model.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.Avatar">
            <summary>
            Source Avatar to use when copying from another Avatar.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.HumanDescription">
            <summary>
            Human Description used to create the humanoid Avatar, when the humanoid rigging type is selected.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.RootBoneMapper">
            <summary>
            Mapper used to find the Model root bone.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.HumanoidAvatarMapper">
            <summary>
            Mapper used to map the humanoid Avatar bones when the humanoid rigging type is selected.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LipSyncMappers">
            <summary>
            Mappers used to configure Lip-Sync Blend Shapes.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.SampleBindPose">
            <summary>
            Turn on this field to sample the loaded Model to the bind-pose when rigging.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.EnforceTPose">
            <summary>
            Turn on this field to enforce the loaded Model to the T-pose when rigging.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.EnforceAnimatorWithLegacyAnimations">
            <summary>
            Turn on this field to add an Animator when the AnimationType is set to Legacy.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AutomaticallyPlayLegacyAnimations">
            <summary>
            Turn on this field to play Legacy Animation Clips automatically (The first available Clip will be played).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ResampleFrequency">
            <summary>
            Defines the FBX Rotation Animation Curve resampling frequency. (1 = every frame, 2 = every 2 frames, 3 = every 3 frames, and so on)
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AnimationWrapMode">
            <summary>
            Default wrap-mode to apply to Animations.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AnimationClipMappers">
            <summary>
            Mappers used to process Animation Clips.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ExternalDataMapper">
            <summary>
            Mapper used to find data Streams on external sources.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ShowLoadingWarnings">
            <summary>
            Turn on this field to display Model loading warnings on the Console.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.CloseStreamAutomatically">
            <summary>
            Turn on this field to close the Model loading Stream automatically.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.Timeout">
            <summary>
            Model loading timeout in seconds (0=disabled).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.DestroyOnError">
            <summary>
            Turn on this field to destroy the loaded Game Object automatically when there is any loading error.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.EnsureQuaternionContinuity">
            <summary>
            Turn on this field to realign quaternion keys to ensure the shortest interpolation paths.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UseMaterialKeywords">
            <summary>
            Turn on this field to use shader keywords on generated Materials.
            This field is useful when using Shader Variants to get more control over generated Materials.
            This field is ignored when enabling the UsesShaderVariantCollection field.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MergeVertices">
            <summary>
            Turn on this field to merge model duplicated vertices where possible.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MarkTexturesNoLongerReadable">
            <summary>
            Turn on this field to set textures as no longer readable and release memory resources.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UseUnityNativeNormalCalculator">
            <summary>
            Turn on this field to use the built-in Unity normal calculator.
            Disabling this field allows TriLib to accept more texture file formats but uses more memory to load textures.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ApplyGammaCurveToMaterialColors">
            <summary>
            When this field is on, TriLib will also apply the gamma curve to the material colors.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LoadTexturesAsSRGB">
            <summary>
            Turn off this field to load textures as linear, instead of sRGB.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UserPropertiesMapper">
            <summary>
            Mapper used to process User Properties from Models.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ApplyTexturesOffsetAndScaling">
            <summary>
            Turn on this field to apply Textures offset and scaling.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.DiscardUnusedTextures">
            <summary>
            Turn off this field to keep unused Textures.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.PivotPosition">
            <summary>
            Use this field to realign the Model pivot based on the given value.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ForcePowerOfTwoTextures">
            <summary>
            Turn on this field to enforce power-of-two resolution when loading textures (needed for texture compression and on some platforms).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MaxTexturesResolution">
            <summary>
            Use this field to limit texture resolution. Textures with resolutions higher than this value (when the value is not zero) will not be loaded.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UseUnityNativeTextureLoader">
            <summary>
            Turn on this field to use the Unity built-in Texture loader instead of stb_image.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportCameras">
            <summary>
            Turn on this field to enable Cameras importing.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ImportLights">
            <summary>
            Turn on this field to enable Lights importing.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.DisableObjectsRenaming">
            <summary>
            Turn on this field to disable objects renaming.
            Remarks: this feature may break animation compatibility as they won't work with duplicate object names.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MergeSingleChild">
            <summary>
            Turn on this field to merge single child models into a single GameObject.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.SetUnusedTexturePropertiesToNull">
            <summary>
            Turn on this field to set the unused Material Texture Properties to <c>null</c>.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LoadPointClouds">
            <summary>
            Turn on this field to keep isolated vertices when loading the model (PLY and OBJ only).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ExtractEmbeddedData">
            <summary>
            Turn off this field to disable embedded resource extraction. When this field is on, embedded textures and resources are extracted to disk and can work as a cache system.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.EmbeddedDataExtractionPath">
            <summary>
            Path to extract embedded resources.
            Keep in mind this is an absolute path.
            If this value is "null", Unity will use the "Persistent Data Path" to store the embedded data.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.BufferizeFiles">
            <summary>
            Change this field to define how TriLib will load files into memory before processing the file (When enabled, it decreases loading times but increases memory usage).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ConvertMaterialTextures">
            <summary>
            Turn off this field to disable "Metallic/Smoothness/Specular/Roughness" automatic texture creation.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ConvertMaterialTexturesUsingHalfRes">
            <summary>
            Turn off this field to set the "Metallic/Smoothness/Specular/Roughness" texture sizes to the full original resolution.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.DisableTesselation">
            <summary>
            Turn on this field to disable polygon tessellation.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.SearchTexturesRecursively">
            <summary>
            Turn off this field if you don't want TriLib to search for textures inside all folders where the model is located.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.AddAllBonesToSkinnedMeshRenderers">
            <summary>
            Turn on this field to add all available bones to every created SkinnedMeshRenderer.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.EnforceAlphaChannelTextures">
            <summary>
            Turn on this field to enforce an alpha channel on texture creation.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.NameMapper">
            <summary>
            Use a custom NameMapper to define how the final GameObjects will be named based on the input model data.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.CreateMaterialsForAllModels">
            <summary>
            Turn on this field to make TriLib create materials for every loaded model, even those without an original material.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UseCoroutines">
            <summary>
            Turn off this field to disable TriLib coroutines. Coroutines ensure that model data loads with the fewest possible main thread stalls.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MaxCoroutineDelayInMS">
            <summary>
            Use this field to set a maximum number of milliseconds a Coroutine can take without waiting for a main thread frame to execute.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MaxVertexDataInitialCapacity">
            <summary>
            Use this field to set the maximum initial capacity of mesh vertex buffers. Vertex counts higher than that will use the default .NET exponential capacity-increasing method.
            <remarks>
            Higher values can make models load faster but may require significantly more memory. It is recommended that this field be left at the default value.
            Leave as 0 to let TriLib use the calculated maximum vertex capacity for the loaded models.
            </remarks>
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.CollectCG">
            <summary>
            Turn off this field to disable GC collection after model loading.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.CompactHeap">
            <summary>
            Turn on this field to enable .NET Large Object Heap compaction (UWP only).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LoadTexturesAtOnce">
            <summary>
            When this field is disabled, TriLib will read the texture resolution before creating it, which could increase memory usage.
            The new texture loading method doesn't do that. This option is left here for compatibility reasons.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.GetCompatibleTextureFormat">
            <summary>
            Turn on this field to ensure Unity will create textures that can be sampled on the current platform.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LoadDisplacementTextures">
            <summary>
            Turn on this field to load displacement textures.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ApplyAvatarHipsCompensation">
            <summary>
            Turn off this field if your avatars seem to hover over the ground. That will disable avatar hips height compensation.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MeshWorldTransform">
            <summary>
            Use this field to define a transformation applied in world space to all mesh vertices.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.LoadTexturesViaWebRequest">
            <summary>
            Turn on this field to load textures using the UnityWebRequest class (experimental). UnityWebRequest is the fastest way to load PNG/JPG textures but uses more memory than other methods and does not work with embedded textures.
            <remarks>
            This feature is experimental. Textures are always loaded in sRGB colorspace when this option is turned on, which could cause normal map issues.
            </remarks>
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.MaxObjectsToRename">
            <summary>
            Use this field to set the maximum number of objects TriLib can rename. Renaming is an expensive process, so it's advised to keep this value low.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.ConvertTexturesAs2D">
            <summary>
            Turn off this field to keep processed/composed textures as RenderTextures.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UseSharedMaterials">
            <summary>
            Turn off this field to use the renderers' "materials" property instead of "sharedMaterials".
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UseSharedMeshes">
            <summary>
            Turn on this field to use mesh filters' "mesh" property instead of "sharedMesh".
            It is recommended to turn on this field if you don't need to modify your meshes at runtime.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.BlendShapeMapper">
            <summary>
            Use this field to set a BlendShapeMapper to use with the loaded model. BlendShapeMappers can replace the Unity built-in blend shape playback system.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.UpdateSkinnedMeshRendererWhenOffscreen">
            <summary>
            Turn on this field to update SkinnedMeshRenderers when they're offscreen.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderOptions.DoPBRConversion">
            <summary>
            Turn off this field to disable Phong to PBR conversion based on:
            https://learn.microsoft.com/en-us/azure/remote-rendering/reference/material-mapping
            </summary>
        </member>
        <member name="M:TriLibCore.AssetLoaderOptions.Deserialize(System.String)">
            <summary>
            Deserialize the specified JSON representation into this class.
            </summary>
            <param name="json">Json.</param>
        </member>
        <member name="M:TriLibCore.AssetLoaderOptions.Serialize">
            <summary>
            Serializes this instance to a JSON representation.
            </summary>
        </member>
        <member name="T:TriLibCore.General.ConcurrentDictionary`2">
            <summary>Represents a concurrent (thread-safe) Dictionary.</summary>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
        </member>
        <member name="F:TriLibCore.General.ConcurrentDictionary`2._padlock">
            <summary>
            The padlock
            </summary>
        </member>
        <member name="F:TriLibCore.General.ConcurrentDictionary`2._dictionary">
            <summary>
            The dictionary
            </summary>
        </member>
        <member name="P:TriLibCore.General.ConcurrentDictionary`2.Item(`0)">
            <summary>
            Gets or sets the TValue with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>TValue.</returns>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
            <summary>Tries to get the value from the given Key on the Dictionary.</summary>
            <param name="key">The Key to look for.</param>
            <param name="value">The value, if found.</param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.TryAdd(`0,`1)">
            <summary>Tries to add a Value to the Dictionary using the given Key</summary>
            <param name="key">The Key to try to add.</param>
            <param name="value">The value to try to add.</param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.TryRemove(`0)">
            <summary>Tries to remove the given Item from the Dictionary.</summary>
            <param name="key">The Key to try to remove.</param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.Add(`0,`1)">
            <summary>Adds the specified key to the Dictionary.</summary>
            <param name="key">The Key to add.</param>
            <param name="val">The value to add.</param>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.ContainsKey(`0)">
            <summary>Determines whether this Dictionary contains the given Key.</summary>
            <param name="id">The Key value.</param>
            <returns>
            <c>true</c> if the specified identifier contains key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.OrderBy(System.Func{System.Collections.Generic.KeyValuePair{`0,`1},`0})">
            <summary>Orders the Dictionary using the given callback.</summary>
            <param name="func">The OrderBy callback Method.</param>
            <returns>List&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.</returns>
        </member>
        <member name="P:TriLibCore.General.ConcurrentDictionary`2.Values">
            <summary>Gets the Dictionary Values.</summary>
        </member>
        <member name="P:TriLibCore.General.ConcurrentDictionary`2.Keys">
            <summary>Gets the Dictionary Keys.</summary>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TriLibCore.General.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:TriLibCore.General.ConcurrentDictionary`2.Count">
            <summary>Gets the Dicitionary item count.</summary>
        </member>
        <member name="T:TriLibCore.General.ConcurrentList`1">
            <summary>Represents a concurrent (thread-safe) List.</summary>
            <typeparam name="T">List values type.</typeparam>
        </member>
        <member name="F:TriLibCore.General.ConcurrentList`1._list">
            <summary>
            The list
            </summary>
        </member>
        <member name="F:TriLibCore.General.ConcurrentList`1._sync">
            <summary>
            The synchronize
            </summary>
        </member>
        <member name="M:TriLibCore.General.ConcurrentList`1.Add(`0)">
            <summary>Adds the specified value to the Dictionary.</summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:TriLibCore.General.ConcurrentList`1.Remove(`0)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TriLibCore.General.ConcurrentList`1.Count">
            <summary>Gets the List item count.</summary>
        </member>
        <member name="P:TriLibCore.General.ConcurrentList`1.Item(System.Int32)">
            <summary>
            Gets or sets the T at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TriLibCore.General.ConcurrentList`1.Contains(`0)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The Item to look for.</param>
            <returns>
            <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TriLibCore.General.ContextualizedAction">
            <summary>Represents an Action with a context used by Threads.</summary>
        </member>
        <member name="F:TriLibCore.General.ContextualizedAction.Action">
            <summary>Action to call on the new Thread.</summary>
        </member>
        <member name="M:TriLibCore.General.ContextualizedAction.#ctor(System.Action)">
            <summary>Initializes the Contextualized Action using the given Action.</summary>
            <param name="action">The Action to be executed.</param>
        </member>
        <member name="M:TriLibCore.General.ContextualizedAction.Invoke">
            <summary>Invokes the Action on the new Thread with the Context as the argument.</summary>
        </member>
        <member name="T:TriLibCore.General.ContextualizedAction`1">
            <summary>Represents an Action with a context used by Threads.</summary>
            <typeparam name="T">Context type.</typeparam>
        </member>
        <member name="F:TriLibCore.General.ContextualizedAction`1.Action">
            <summary>Action to call on the new Thread.</summary>
        </member>
        <member name="F:TriLibCore.General.ContextualizedAction`1.Context">
            <summary>
                Context Object passed to the Action.
            </summary>
        </member>
        <member name="M:TriLibCore.General.ContextualizedAction`1.#ctor(System.Action{`0},`0)">
            <summary>Initializes the Contextualized Action using the given Action and Context.</summary>
            <param name="action">The Action to be executed.</param>
            <param name="context">The Context which has been passed to the Action.</param>
        </member>
        <member name="M:TriLibCore.General.ContextualizedAction`1.Invoke">
            <summary>Invokes the Action on the new Thread with the Context as the argument.</summary>
        </member>
        <member name="T:TriLibCore.General.ContextualizedError`1">
            <summary>
            Represents a Thread Exception with a Context.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TriLibCore.General.ContextualizedError`1.ErrorContext">
            <summary>Context passed to the Thread which generated the Exception.</summary>
        </member>
        <member name="M:TriLibCore.General.ContextualizedError`1.#ctor(System.Exception,`0)">
            <summary>Initializes the Contextualized Error with the given inner Exception and Context.</summary>
            <param name="innerException">The inner Exception.</param>
            <param name="errorContext">The Context which has been passed to the Error.</param>
        </member>
        <member name="M:TriLibCore.General.ContextualizedError`1.GetContext">
            <summary>Gets the Context Object.</summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TriLibCore.General.ContextualizedError`1.GetInnerException">
            <summary>Gets the Contextualized Error inner Exception.</summary>
            <returns>The inner Exception.</returns>
        </member>
        <member name="P:TriLibCore.General.ContextualizedError`1.Context">
            <summary>
            The Asset Loader Context used when the error was generated.
            </summary>
        </member>
        <member name="T:TriLibCore.General.AlphaMaterialMode">
            <summary>
            Represents methods to handle alpha (transparent) materials.
            </summary>
        </member>
        <member name="F:TriLibCore.General.AlphaMaterialMode.None">
            <summary>
            Does not create any alpha material and uses opaque materials instead.
            </summary>
        </member>
        <member name="F:TriLibCore.General.AlphaMaterialMode.Cutout">
            <summary>
            Creates cutout alpha materials where applicable.
            </summary>
        </member>
        <member name="F:TriLibCore.General.AlphaMaterialMode.Transparent">
            <summary>
            Creates transparent (alpha) materials where applicable.
            </summary>
        </member>
        <member name="F:TriLibCore.General.AlphaMaterialMode.CutoutAndTransparent">
            <summary>
            Creates both materials and uses the second one as a copy from the semi-transparent mesh.
            </summary>
        </member>
        <member name="T:TriLibCore.General.AnimationType">
            <summary>Represents rigging setup types.</summary>
        </member>
        <member name="F:TriLibCore.General.AnimationType.Legacy">
            <summary>
            Legacy rigging type. Adds an Animation Component to the created Game Object.
            </summary>
        </member>
        <member name="F:TriLibCore.General.AnimationType.Generic">
            <summary>
            Generic rigging type. Adds an Animator Component to the created Game Object.
            </summary>
        </member>
        <member name="F:TriLibCore.General.AnimationType.Humanoid">
            <summary>
            Humanoid rigging type. Adds an Animator Component to the created Game Object and uses any Humanoid Avatar Mapper configured on the Asset Loader Options.
            </summary>
        </member>
        <member name="F:TriLibCore.General.AnimationType.None">
            <summary>
            No rigging type.
            </summary>
        </member>
        <member name="T:TriLibCore.General.AvatarDefinitionType">
            <summary>Represents Avatar creation setup types.</summary>
        </member>
        <member name="F:TriLibCore.General.AvatarDefinitionType.CreateFromThisModel">
            <summary>The Avatar should be created for the given Model.</summary>
        </member>
        <member name="F:TriLibCore.General.AvatarDefinitionType.CopyFromOtherAvatar">
            <summary>The Avatar should be copied from another Avatar.</summary>
        </member>
        <member name="T:TriLibCore.General.BoneMapping">
            <summary>
            Represents a human bone to Unity bone relationship.
            </summary>
        </member>
        <member name="F:TriLibCore.General.BoneMapping.HumanBone">
            <summary>
            Human bone name.
            </summary>
        </member>
        <member name="F:TriLibCore.General.BoneMapping.HumanLimit">
            <summary>
            Human limit data.
            </summary>
        </member>
        <member name="F:TriLibCore.General.BoneMapping.BoneNames">
            <summary>
            Bone Transform names.
            </summary>
        </member>
        <member name="M:TriLibCore.General.BoneMapping.#ctor(UnityEngine.HumanBodyBones,TriLibCore.General.HumanLimit,System.String[])">
            <summary>Represents a human bone to Unity bone relationship.</summary>
            <param name="humanBone">The Human bone to map.</param>
            <param name="humanLimit">The bone Human Limit.</param>
            <param name="boneNames">The bone Transform names.</param>
        </member>
        <member name="T:TriLibCore.General.Constants">
            <summary>Contains a series of constants used by TriLib.</summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalPositionXProperty">
            <summary>
            Local position x property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalPositionYProperty">
            <summary>
            Local position y property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalPositionZProperty">
            <summary>
            Local position z property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalRotationXProperty">
            <summary>
            Local rotation x property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalRotationYProperty">
            <summary>
            Local rotation y property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalRotationZProperty">
            <summary>
            Local rotation z property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalRotationWProperty">
            <summary>
            Local rotation w property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.EnabledProperty">
            <summary>
            Component Enabled property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalEulerAnglesXProperty">
            <summary>
            Local euler angles x property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalEulerAnglesYProperty">
            <summary>
            Local euler angles y property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalEulerAnglesZProperty">
            <summary>
            Local euler angles z property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalEulerAnglesBakedXProperty">
            <summary>
            Local euler angles baked x property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalEulerAnglesBakedYProperty">
            <summary>
            Local euler angles baked y property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalEulerAnglesBakedZProperty">
            <summary>
            Local euler angles baked z property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalScaleXProperty">
            <summary>
            Local scale x property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalScaleYProperty">
            <summary>
            Local scale y property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.LocalScaleZProperty">
            <summary>
            Local scale z property name. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.BlendShapePathFormat">
            <summary>
            Blend shape path format template. Used on Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.RootPositionXProperty">
            <summary>
            Root position x property name. Used on Mecanim Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.RootPositionYProperty">
            <summary>
            Root position y property name. Used on Mecanim Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.RootPositionZProperty">
            <summary>
            Root position z property name. Used on Mecanim Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.RootRotationXProperty">
            <summary>
            Root rotation x property name. Used on Mecanim Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.RootRotationYProperty">
            <summary>
            Root rotation y property name. Used on Mecanim Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.RootRotationZProperty">
            <summary>
            Root rotation z property name. Used on Mecanim Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.RootRotationWProperty">
            <summary>
            Root rotation w property name. Used on Mecanim Animation processing.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Constants.QuadGeometryIndicesBegin">
            <summary>
            When building mesh indices and the AssetLoaderOptions.UseQuads value is set to true, this value can be used to get a new geometry for the quad-element since quads and triangle meshes should be separated in Unity.
            </summary>
        </member>
        <member name="T:TriLibCore.General.GenericMaterialProperty">
            <summary>Represents Generic (common) Material Properties.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.DiffuseColor">
            <summary>The diffuse Color Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.DiffuseMap">
            <summary>The diffuse Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.SpecularColor">
            <summary>The Specular Color Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.SpecularMap">
            <summary>The Specular Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.NormalMap">
            <summary>The normal texture property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.AlphaValue">
            <summary>The alpha (opacity) value property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.OcclusionMap">
            <summary>The Occlusion Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.TransparencyMap">
            <summary>The Transparency Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.EmissionColor">
            <summary>The Emission Color Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.EmissionMap">
            <summary>The Emission Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.Metallic">
            <summary>The Metallic Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.GlossinessOrRoughness">
            <summary>The Glossiness/Roughness Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.MetallicMap">
            <summary>The Metallic Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.GlossinessOrRoughnessMap">
            <summary>The Glossiness/Roughness Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.OcclusionStrength">
            <summary>The Occlusion Strength Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.NormalStrength">
            <summary>The Normal Strength Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.UOffset">
            <summary>
            The UV U channel offset Property.
            </summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.VOffset">
            <summary>
            The UV V channel offset Property.
            </summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.DisplacementMap">
            <summary>The Displacement Texture Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.DisplacementStrength">
            <summary>The Displacement Strength Property.</summary>
        </member>
        <member name="F:TriLibCore.General.GenericMaterialProperty.Unknown">
            <summary>
            Unknown Property type.
            </summary>
        </member>
        <member name="T:TriLibCore.General.HumanDescription">
            <summary>Represents humanoid Avatar parameters to pass to the AvatarBuilder.BuildHumanAvatar method.</summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.armStretch">
            <summary>
            Amount by which the arm's length is allowed to stretch when using IK.
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.feetSpacing">
            <summary>
            Modification to the minimum distance between the feet of a humanoid model.
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.hasTranslationDof">
            <summary>
            True for any human that has a translation Degree of Freedom (DoF). It is set to false by default.
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.legStretch">
            <summary>
            Amount by which the leg's length is allowed to stretch when using IK.
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.lowerArmTwist">
            <summary>
            Defines how the lower arm's roll/twisting is distributed between the elbow and wrist joints.
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.lowerLegTwist">
            <summary>
            Defines how the lower leg's roll/twisting is distributed between the knee and ankle.
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.upperArmTwist">
            <summary>
            Defines how the lower arm's roll/twisting is distributed between the shoulder and elbow joints.
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanDescription.upperLegTwist">
            <summary>
            Defines how the upper leg's roll/twisting is distributed between the thigh and knee joints.
            </summary>
        </member>
        <member name="T:TriLibCore.General.HumanLimit">
            <summary>Represents the rotation limits that define the muscle for a single human bone.</summary>
        </member>
        <member name="F:TriLibCore.General.HumanLimit.useDefaultValues">
            <summary>
            Should this limit use the default values?
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanLimit.min">
            <summary>
            The maximum negative rotation away from the initial value that this muscle can apply
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanLimit.max">
            <summary>
            The maximum rotation away from the initial value that this muscle can apply
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanLimit.center">
            <summary>
            The default orientation of a bone when no muscle action is applied
            </summary>
        </member>
        <member name="F:TriLibCore.General.HumanLimit.axisLength">
            <summary>
            Length of the bone to which the limit is applied
            </summary>
        </member>
        <member name="T:TriLibCore.General.LipSyncViseme">
            <summary>Represents a Lip-sync Viseme.
            A Viseme is a visual representation of one or many phonemes.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.sil">
            <summary>The sil Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.PP">
            <summary>The pp Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.FF">
            <summary>The ff Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.TH">
            <summary>The th Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.DD">
            <summary>The dd Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.kk">
            <summary>The kk Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.CH">
            <summary>The ch Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.SS">
            <summary>The ss Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.nn">
            <summary>The nn Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.RR">
            <summary>The rr Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.aa">
            <summary>The aa Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.E">
            <summary>The e Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.ih">
            <summary>The ih Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.oh">
            <summary>The oh Viseme.</summary>
        </member>
        <member name="F:TriLibCore.General.LipSyncViseme.ou">
            <summary>The ou Viseme.</summary>
        </member>
        <member name="T:TriLibCore.General.MaterialShadingSetup">
            <summary>
            Represents a Material Shading Setup. Used by Material Mappers to select the most suitable Unity Material template.
            </summary>
        </member>
        <member name="F:TriLibCore.General.MaterialShadingSetup.Default">
            <summary>The Standard (Default) Material shading.</summary>
        </member>
        <member name="T:TriLibCore.General.PivotPosition">
            <summary>
            Represents a Model Pivot Position.
            </summary>
        </member>
        <member name="F:TriLibCore.General.PivotPosition.Default">
            <summary>
            Default Pivot Position.
            </summary>
        </member>
        <member name="F:TriLibCore.General.PivotPosition.Center">
            <summary>
            Centered Pivot Position.
            </summary>
        </member>
        <member name="F:TriLibCore.General.PivotPosition.Bottom">
            <summary>
            Bottom Pivot Position.
            </summary>
        </member>
        <member name="T:TriLibCore.General.StringComparisonMode">
            <summary>Represents String matching methods.</summary>
        </member>
        <member name="F:TriLibCore.General.StringComparisonMode.LeftEndsWithRight">
            <summary>Match is valid when Left String ends with Right String</summary>
        </member>
        <member name="F:TriLibCore.General.StringComparisonMode.LeftStartsWithRight">
            <summary>Match is valid when Left String starts with Right String</summary>
        </member>
        <member name="F:TriLibCore.General.StringComparisonMode.RightEndsWithLeft">
            <summary>Match is valid when Right String ends with Left String.</summary>
        </member>
        <member name="F:TriLibCore.General.StringComparisonMode.RightStartsWithLeft">
            <summary>Match is valid when Right String starts with Left String.</summary>
        </member>
        <member name="F:TriLibCore.General.StringComparisonMode.RightEqualsLeft">
            <summary>Match is valid when both Strings are equal.</summary>
        </member>
        <member name="F:TriLibCore.General.StringComparisonMode.LeftContainsRight">
            <summary>Match is valid Left String contains the Right String.</summary>
        </member>
        <member name="F:TriLibCore.General.StringComparisonMode.RightContainsLeft">
            <summary>Match is valid Right String contains the Left String.</summary>
        </member>
        <member name="T:TriLibCore.General.TangentMode">
            <summary>
            Represents tangent interpolation modes.
            </summary>
        </member>
        <member name="F:TriLibCore.General.TangentMode.Editable">
            <summary>
            Editable tangent mode.
            </summary>
        </member>
        <member name="F:TriLibCore.General.TangentMode.Smooth">
            <summary>
            Smooth tangent mode.
            </summary>
        </member>
        <member name="F:TriLibCore.General.TangentMode.Linear">
            <summary>
            Linear tangent mode.
            </summary>
        </member>
        <member name="F:TriLibCore.General.TangentMode.Stepped">
            <summary>
            Stepped tangent mode.
            </summary>
        </member>
        <member name="T:TriLibCore.General.TransformBackup">
            <summary>Represents a structure to store a Transform position, rotation, and scale temporarily.</summary>
        </member>
        <member name="F:TriLibCore.General.TransformBackup._localPosition">
            <summary>
            Stored Local Position
            </summary>
        </member>
        <member name="F:TriLibCore.General.TransformBackup._localRotation">
            <summary>
            Stored Local Rotation
            </summary>
        </member>
        <member name="F:TriLibCore.General.TransformBackup._localScale">
            <summary>
            Stored Local Scale
            </summary>
        </member>
        <member name="M:TriLibCore.General.TransformBackup.#ctor(UnityEngine.Transform)">
            <summary>Represents a structure to store a Transform position, rotation, and scale temporarily.</summary>
            <param name="transform">The Transform to backup the data from.</param>
        </member>
        <member name="M:TriLibCore.General.TransformBackup.Restore(UnityEngine.Transform)">
            <summary>Restores the Transform position, rotation and scale to the original value.</summary>
            <param name="transform">The Transform to restore the data.</param>
        </member>
        <member name="T:TriLibCore.General.Vector4Int">
            <summary>
            Represents a four-dimensional vector of integer components, and provides
            implicit and explicit conversions to and from Unity's <see cref="T:UnityEngine.Vector2"/>, 
            <see cref="T:UnityEngine.Vector3"/>, <see cref="T:UnityEngine.Vector4"/>, and <see cref="T:UnityEngine.Color"/>.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Vector4Int.x">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Vector4Int.y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Vector4Int.z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:TriLibCore.General.Vector4Int.w">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.General.Vector4Int"/> struct
            with the specified <paramref name="x"/>, <paramref name="y"/>, 
            <paramref name="z"/>, and <paramref name="w"/> components.
            </summary>
            <param name="x">The X component value.</param>
            <param name="y">The Y component value.</param>
            <param name="z">The Z component value.</param>
            <param name="w">The W component value.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.Add(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.Clear">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.Contains(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.CopyTo(System.Int32[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.Remove(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:TriLibCore.General.Vector4Int.Count">
            <inheritdoc />
        </member>
        <member name="P:TriLibCore.General.Vector4Int.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.IndexOf(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.Insert(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.General.Vector4Int.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:TriLibCore.General.Vector4Int.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified <paramref name="index"/>.
            </summary>
            <param name="index">A zero-based index of the component to get or set.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when <paramref name="index"/> is not in [0..3].
            </exception>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Explicit(UnityEngine.Vector2)~TriLibCore.General.Vector4Int">
            <summary>
            Explicitly converts a <see cref="T:UnityEngine.Vector2"/> to a <see cref="T:TriLibCore.General.Vector4Int"/>,
            setting the <c>X</c> and <c>Y</c> components and defaulting <c>Z</c> and <c>W</c> to zero.
            </summary>
            <param name="b">The <see cref="T:UnityEngine.Vector2"/> to convert.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Explicit(UnityEngine.Vector3)~TriLibCore.General.Vector4Int">
            <summary>
            Explicitly converts a <see cref="T:UnityEngine.Vector3"/> to a <see cref="T:TriLibCore.General.Vector4Int"/>,
            setting the <c>X</c>, <c>Y</c>, and <c>Z</c> components and defaulting <c>W</c> to zero.
            </summary>
            <param name="b">The <see cref="T:UnityEngine.Vector3"/> to convert.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Explicit(UnityEngine.Vector4)~TriLibCore.General.Vector4Int">
            <summary>
            Explicitly converts a <see cref="T:UnityEngine.Vector4"/> to a <see cref="T:TriLibCore.General.Vector4Int"/>,
            setting all four integer components.
            </summary>
            <param name="b">The <see cref="T:UnityEngine.Vector4"/> to convert.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Explicit(UnityEngine.Color)~TriLibCore.General.Vector4Int">
            <summary>
            Explicitly converts a <see cref="T:UnityEngine.Color"/> to a <see cref="T:TriLibCore.General.Vector4Int"/>,
            interpreting each color channel as an integer component.
            </summary>
            <param name="b">The <see cref="T:UnityEngine.Color"/> to convert.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Implicit(TriLibCore.General.Vector4Int)~UnityEngine.Vector2">
            <summary>
            Implicitly converts a <see cref="T:TriLibCore.General.Vector4Int"/> to a <see cref="T:UnityEngine.Vector2"/>,
            discarding the <c>Z</c> and <c>W</c> components.
            </summary>
            <param name="b">The <see cref="T:TriLibCore.General.Vector4Int"/> to convert.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Implicit(TriLibCore.General.Vector4Int)~UnityEngine.Vector3">
            <summary>
            Implicitly converts a <see cref="T:TriLibCore.General.Vector4Int"/> to a <see cref="T:UnityEngine.Vector3"/>,
            discarding the <c>W</c> component.
            </summary>
            <param name="b">The <see cref="T:TriLibCore.General.Vector4Int"/> to convert.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Implicit(TriLibCore.General.Vector4Int)~UnityEngine.Vector4">
            <summary>
            Implicitly converts a <see cref="T:TriLibCore.General.Vector4Int"/> to a <see cref="T:UnityEngine.Vector4"/>.
            </summary>
            <param name="b">The <see cref="T:TriLibCore.General.Vector4Int"/> to convert.</param>
        </member>
        <member name="M:TriLibCore.General.Vector4Int.op_Implicit(TriLibCore.General.Vector4Int)~UnityEngine.Color">
            <summary>
            Implicitly converts a <see cref="T:TriLibCore.General.Vector4Int"/> to a <see cref="T:UnityEngine.Color"/>.
            Each integer component <c>x, y, z, w</c> is cast to a float for the respective color channel.
            </summary>
            <param name="b">The <see cref="T:TriLibCore.General.Vector4Int"/> to convert.</param>
        </member>
        <member name="T:TriLibCore.General.VirtualMaterial">
            <summary>
            Represents a container to hold Material properties temporarily.
            </summary>
        </member>
        <member name="F:TriLibCore.General.VirtualMaterial.HasAlpha">
            <summary>
            Does the material contains alpha diffuse textures or color?
            </summary>
        </member>
        <member name="F:TriLibCore.General.VirtualMaterial.GlobalIlluminationFlags">
            <summary>
            Material global illumination flags.
            </summary>
        </member>
        <member name="P:TriLibCore.General.VirtualMaterial.FloatProperties">
            <summary>Gets the Material float Properties.</summary>
        </member>
        <member name="P:TriLibCore.General.VirtualMaterial.VectorProperties">
            <summary>Gets the Material Vector Properties.</summary>
        </member>
        <member name="P:TriLibCore.General.VirtualMaterial.ColorProperties">
            <summary>Gets the Material Color Properties.</summary>
        </member>
        <member name="P:TriLibCore.General.VirtualMaterial.TextureProperties">
            <summary>Gets the Material Color Properties.</summary>
        </member>
        <member name="P:TriLibCore.General.VirtualMaterial.Keywords">
            <summary>Gets the Material Keywords.</summary>
        </member>
        <member name="P:TriLibCore.General.VirtualMaterial._genericMaterialProperties">
            <summary>
            Represents a HashSet indicating that a given GenericMaterialProperty has been set and is valid.
            </summary>
        </member>
        <member name="P:TriLibCore.General.VirtualMaterial.HasEmissionColor">
            <summary>
            Indicates whether the source material has an emission color.
            </summary>
        </member>
        <member name="F:TriLibCore.General.VirtualMaterial.Offset">
            <summary>
            The Material offset.
            </summary>
        </member>
        <member name="F:TriLibCore.General.VirtualMaterial.Tiling">
            <summary>
            The Material tiling.
            </summary>
        </member>
        <member name="M:TriLibCore.General.VirtualMaterial.SetProperty(System.String,System.Single,TriLibCore.General.GenericMaterialProperty)">
            <summary>Sets a Material Single (float) Property.</summary>
            <param name="property">The Property to set.</param>
            <param name="value">The Property value.</param>
            <param name="genericMaterialProperty">The GenericMaterialProperty that was used to load the given value.</param>
        </member>
        <member name="M:TriLibCore.General.VirtualMaterial.SetProperty(System.String,UnityEngine.Vector3,TriLibCore.General.GenericMaterialProperty)">
            <summary>Sets a Material Single (float) Property.</summary>
            <param name="property">The Property to set.</param>
            <param name="value">The Property value.</param>
            <param name="genericMaterialProperty">The GenericMaterialProperty that was used to load the given value.</param>
        </member>
        <member name="M:TriLibCore.General.VirtualMaterial.SetProperty(System.String,UnityEngine.Color,TriLibCore.General.GenericMaterialProperty)">
            <summary>Sets a Material Single (float) Property.</summary>
            <param name="property">The Property to set.</param>
            <param name="value">The Property value.</param>
            <param name="genericMaterialProperty">The GenericMaterialProperty that was used to load the given value.</param>
        </member>
        <member name="M:TriLibCore.General.VirtualMaterial.SetProperty(System.String,UnityEngine.Texture,TriLibCore.General.GenericMaterialProperty)">
            <summary>Sets a Material Single (float) Property.</summary>
            <param name="property">The Property to set.</param>
            <param name="value">The Property value.</param>
            <param name="genericMaterialProperty">The GenericMaterialProperty that was used to load the given value.</param>
        </member>
        <member name="M:TriLibCore.General.VirtualMaterial.EnableKeyword(System.String)">
            <summary>Enables the given Material Keyword.</summary>
            <param name="keyword">The Keyword to enable.</param>
        </member>
        <member name="M:TriLibCore.General.VirtualMaterial.DisableKeyword(System.String)">
            <summary>Disables a Material Keyword.</summary>
            <param name="keyword">The Keyword to disable.</param>
        </member>
        <member name="M:TriLibCore.General.VirtualMaterial.GenericPropertyIsSetAndValid(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Returns whether the given Generic Material Property is set and valid. If the Property is a Color, the matching Texture slot will be checked as well.
            </summary>
            <param name="genericMaterialProperty">The Generic Material Property to search for.</param>
            <returns><c>true</c>, if set and valid. Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:TriLibCore.General.CompoundMaterialKey">
            <summary>
            Represents a Material key containing the Material and a Texture type.
            </summary>
        </member>
        <member name="T:TriLibCore.General.CompoundTextureKey">
            <summary>
            Represents a Texture key containing the Texture and it's type.
            </summary>
        </member>
        <member name="T:TriLibCore.General.TextureCompressionQuality">
            <summary>Represents Texture compression settings.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureCompressionQuality.NoCompression">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:TriLibCore.General.TextureCompressionQuality.Normal">
            <summary>
            Fast compression.
            </summary>
        </member>
        <member name="F:TriLibCore.General.TextureCompressionQuality.Best">
            <summary>Best compression. (Lower quality)</summary>
        </member>
        <member name="T:TriLibCore.General.TextureFormat">
            <summary>
            Represents a Texture Format.
            </summary>
        </member>
        <member name="T:TriLibCore.General.TextureGroup">
            <summary>
            Represents a Texture Group, containing the TriLib and Unity Texture.
            </summary>
        </member>
        <member name="F:TriLibCore.General.TextureGroup.OriginalUnityTexture">
            <summary>
            Original Unity Texture (without any processing).
            </summary>
        </member>
        <member name="F:TriLibCore.General.TextureGroup.UnityTexture">
            <summary>
            Unity Texture (can be processed).
            </summary>
        </member>
        <member name="F:TriLibCore.General.TextureGroup.Texture">
            <summary>
            TriLib Texture.
            </summary>
        </member>
        <member name="M:TriLibCore.General.TextureGroup.#ctor(UnityEngine.Texture,UnityEngine.Texture,TriLibCore.Interfaces.ITexture)">
            <summary>
            Creates a new TextureGroup using the given parameters.
            </summary>
            <param name="originalUnityTexture">Original Unity Texture (without any processing).</param>
            <param name="unityTexture">Unity Texture (can be processed).</param>
            <param name="texture">TriLib Texture.</param>
        </member>
        <member name="T:TriLibCore.General.TextureType">
            <summary>Represents a Texture usage type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Undefined">
            <summary>The Texture usage is unknown.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Diffuse">
            <summary>The Diffuse Texture Type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.NormalMap">
            <summary>The Normal Map Texture Type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Metalness">
            <summary>The Metalness Texture Type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Transparency">
            <summary>The Transparency Material shading.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Occlusion">
            <summary>The Occlusion Texture Type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Emission">
            <summary>The Emission Texture Type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.GlossinessOrRoughness">
            <summary>The Glossiness/Roughness Texture Type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Specular">
            <summary>The Specular Texture Type.</summary>
        </member>
        <member name="F:TriLibCore.General.TextureType.Displacement">
            <summary>The Displacement Texture Type.</summary>
        </member>
        <member name="T:TriLibCore.AssetLoaderContext">
            <summary>
            Serves as the central context for managing a model loading operation in TriLib. 
            This class stores references to the loaded objects (GameObjects, textures, materials),
            user options, callbacks, and intermediate state (e.g., asynchronous tasks, in-flight texture loads).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Allocations">
            <summary>
            A list of Unity objects (e.g., <see cref="T:UnityEngine.Texture2D"/>, <see cref="T:UnityEngine.Material"/>, <see cref="T:UnityEngine.Mesh"/>)
            that have been allocated during the model loading process.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.GameObjectPaths">
            <summary>
            A mapping between created <see cref="T:UnityEngine.GameObject"/>s and their hierarchy paths
            within the loaded model (e.g., “Root/Mesh001”). This is useful for tracking 
            or debugging the final hierarchy after import.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.GameObjects">
            <summary>
            A mapping between TriLib model representations (<see cref="T:TriLibCore.Interfaces.IModel"/>) 
            and the corresponding <see cref="T:UnityEngine.GameObject"/>s created for them in Unity.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.GeneratedMaterials">
            <summary>
            A thread-safe dictionary mapping TriLib materials (<see cref="T:TriLibCore.Interfaces.IMaterial"/>)
            to Unity <see cref="T:UnityEngine.Material"/> objects generated on-the-fly. 
            This can be used to look up or reuse already created materials.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.LoadedCompoundTextures">
            <summary>
            A thread-safe dictionary storing compound textures keyed by a <see cref="T:TriLibCore.General.CompoundTextureKey"/>, 
            which represents the texture plus its usage type (e.g., diffuse, normal, metallic).
            Each entry references the <see cref="T:TriLibCore.TextureLoadingContext"/> used to load that texture.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.LoadedExternalData">
            <summary>
            A thread-safe dictionary that maps shortened external resource filenames 
            to their fully resolved paths on disk or elsewhere.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.LoadedMaterials">
            <summary>
            A thread-safe dictionary linking TriLib materials (<see cref="T:TriLibCore.Interfaces.IMaterial"/>) to the 
            generated Unity <see cref="T:UnityEngine.Material"/> objects. This complements <see cref="F:TriLibCore.AssetLoaderContext.GeneratedMaterials"/> 
            in storing final user-facing materials.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.LoadedTextures">
            <summary>
            A thread-safe dictionary mapping TriLib textures (<see cref="T:TriLibCore.Interfaces.ITexture"/>) 
            to their <see cref="T:TriLibCore.TextureLoadingContext"/> results, used to prevent redundant 
            texture loading and allow reuse where possible.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.MaterialRenderers">
            <summary>
            A thread-safe dictionary linking TriLib materials (<see cref="T:TriLibCore.Interfaces.IMaterial"/>) to their 
            <see cref="T:TriLibCore.MaterialRendererContext"/> objects, which contain references to the Unity 
            renderer and geometry data needing that material.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.MaterialTextures">
            <summary>
            A thread-safe dictionary linking a <see cref="T:TriLibCore.General.CompoundMaterialKey"/> (material + texture type) 
            to the loaded <see cref="T:TriLibCore.TextureLoadingContext"/>. This ensures that a texture used 
            in multiple material slots is loaded or referenced consistently.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Models">
            <summary>
            A mapping between <see cref="T:UnityEngine.GameObject"/>s created during loading and 
            the corresponding TriLib <see cref="T:TriLibCore.Interfaces.IModel"/> representations (e.g., for referencing 
            raw geometry data).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.TexturesWithAlphaChecked">
            <summary>
            Tracks whether particular <see cref="T:UnityEngine.Texture"/> objects have already been checked for alpha channels,
            avoiding repeated checks or overhead.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.UsedTextures">
            <summary>
            Keeps a set of textures that have been successfully applied to renderers,
            which helps differentiate between used and unused textures 
            (for optional discarding of unused ones).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.AppliedDoubleSidedMaterials">
            <summary>
            Indicates whether double-sided materials (i.e., materials requiring backside rendering) 
            were applied to the last processed mesh. This can help track special mesh rendering states.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Async">
            <summary>
            If <c>true</c>, the model loads asynchronously whenever possible. If <c>false</c>, 
            TriLib forces a synchronous approach. This affects how tasks and threads are used.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.BasePath">
            <summary>
            The directory or base path from which the model or resources are loaded. 
            Used for finding external textures or other data.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.CancellationToken">
            <summary>
            A token used to manage the timeout or cancellation of the loading process. 
            If triggered, loading tasks are halted before completion.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.CancellationTokenSource">
            <summary>
            A source object that can be invoked to cancel model loading manually (e.g., by user input). 
            Cancels tasks reliant on <see cref="F:TriLibCore.AssetLoaderContext.CancellationToken"/>.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.CustomData">
            <summary>
            Arbitrary user-defined data or metadata attached to this context. 
            This object can store additional loading parameters, usage info, or placeholders needed by custom logic.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.FileExtension">
            <summary>
            When loading from a stream rather than a local file, this stores the file extension 
            (e.g., "fbx", "gltf") so TriLib can determine an appropriate reader or parser.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Filename">
            <summary>
            When loading from the local file system, this indicates the path or filename to load. 
            This may be combined with <see cref="F:TriLibCore.AssetLoaderContext.BasePath"/> for resource lookups.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.HaltTasks">
            <summary>
            If <c>true</c>, TriLib defers the actual start of loading tasks, letting the user 
            or calling code chain multiple tasks or manually schedule the execution.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.HandleError">
            <summary>
            A delegate for internal error handling, invoked before <see cref="F:TriLibCore.AssetLoaderContext.OnError"/>. 
            This allows additional checks or logging prior to the user-facing error callback.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.IsZipFile">
            <summary>
            If <c>true</c>, indicates that the current loading operation involves a .zip file,
            requiring AssetLoaderZip or related logic to decompress and parse contents.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.LoadingProgress">
            <summary>
            Tracks the overall progress of model loading (a float between 0 and 1).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.LoadingStep">
            <summary>
            Represents the loading step (an integer) for more granular tracking of progress 
            (e.g., reading geometry, loading textures, building materials).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.ModificationDate">
            <summary>
            Potentially stores a file modification date or version retrieved by format-specific data. 
            This may be used for caching or informational displays.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.OnError">
            <summary>
            A callback invoked on the main thread if an error occurs during loading. 
            Often used to notify the user or perform cleanup tasks.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.OnLoad">
            <summary>
            A callback invoked once the model’s core structure is loaded, 
            but possibly before all textures and materials finish processing. 
            This occurs on the main thread.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.OnMaterialsLoad">
            <summary>
            A callback invoked once the model and all relevant resources (e.g., textures, 
            materials, animations) have finished loading. Called on the main thread.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.OnPreLoad">
            <summary>
            A callback invoked on a background thread, providing a chance to manipulate or inspect 
            data before Unity <see cref="T:UnityEngine.GameObject"/>s are instantiated (only when multi-threading is enabled).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.OnProgress">
            <summary>
            A callback that reports loading progress changes, providing both the current 
            <see cref="T:TriLibCore.AssetLoaderContext"/> and a float progress value (0–1).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Options">
            <summary>
            The <see cref="T:TriLibCore.AssetLoaderOptions"/> governing how the model is imported
            (e.g., whether to generate colliders, import animations, or apply custom material mappers).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.PreviousLoadingStep">
            <summary>
            Tracks the previously reported loading step, aiding in detecting changes for 
            incremental updates or logging. Defaults to <c>-1</c> to indicate uninitialized.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Reader">
            <summary>
            References the internal <see cref="T:TriLibCore.ReaderBase"/> that’s parsing or converting the file. 
            Specific implementations (e.g., <c>FBXReader</c>, <c>GltfReader</c>) fill in data 
            for geometry, bones, and materials.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.RootGameObject">
            <summary>
            The <see cref="T:UnityEngine.GameObject"/> representing the top-level node of the loaded model. 
            Contains or references all other child meshes, transforms, and data.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.RootModel">
            <summary>
            An interface representing the root model structure (<see cref="T:TriLibCore.Interfaces.IRootModel"/>) 
            of the loaded file. It can contain sub-models, materials, animations, etc.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Stream">
            <summary>
            The <see cref="F:TriLibCore.AssetLoaderContext.Stream"/> used to load the model if loading from memory or 
            network data rather than a filesystem path.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Task">
            <summary>
            A reference to the main <see cref="F:TriLibCore.AssetLoaderContext.Task"/> used for the loading operation (if asynchronous). 
            This allows for concurrency and non-blocking behavior during model import.
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.Tasks">
            <summary>
            A list of <see cref="F:TriLibCore.AssetLoaderContext.Task"/> instances related to this loading operation, 
            used to manage parallel or sequential tasks (texture loading, post-processing, etc.).
            </summary>
        </member>
        <member name="F:TriLibCore.AssetLoaderContext.WrapperGameObject">
            <summary>
            A user-specified or automatically created <see cref="T:UnityEngine.GameObject"/> that serves 
            as the parent object for the entire loaded model hierarchy.
            </summary>
        </member>
        <member name="P:TriLibCore.AssetLoaderContext.Completed">
            <summary>
            If <c>true</c>, indicates that the model loading process has finished, 
            including asynchronous tasks. If <c>false</c>, the pipeline is still in progress.
            </summary>
        </member>
        <member name="P:TriLibCore.AssetLoaderContext.TriLibCore#Interfaces#IAssetLoaderContext#Context">
            <inheritdoc />
        </member>
        <member name="P:TriLibCore.AssetLoaderContext.CustomDispatcherQueue">
            <summary>
            A queue holding context-specific actions that can be dispatched 
            on the main thread or processed in other contexts. Useful for advanced 
            customization or specialized event scheduling.
            </summary>
        </member>
        <member name="P:TriLibCore.AssetLoaderContext.PersistentDataPath">
            <summary>
            The <c>Application.persistentDataPath</c> or another user-defined path 
            for storing or retrieving extracted or cached resources (e.g., embedded textures).
            </summary>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.AddMaterialTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Records a newly loaded texture’s context in <see cref="F:TriLibCore.AssetLoaderContext.MaterialTextures"/> 
            to track the usage of that texture by a specific material/slot combination.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> holding the TriLib texture and additional metadata.
            </param>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.AddUsedTexture(UnityEngine.Texture)">
            <summary>
            Marks a <see cref="T:UnityEngine.Texture"/> as used by at least one renderer or material, 
            so TriLib knows not to discard it when cleaning up unused allocations.
            </summary>
            <param name="texture">The texture being used by a model’s material.</param>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.DiscardUnusedTextures">
            <summary>
            Removes any <see cref="T:UnityEngine.Texture"/> that isn’t referenced in <see cref="F:TriLibCore.AssetLoaderContext.UsedTextures"/> from 
            the <see cref="F:TriLibCore.AssetLoaderContext.Allocations"/> list and destroys it, freeing memory. Useful if your model 
            has optional or generated textures that are never applied.
            </summary>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.ReleaseMainThread">
            <summary>
            Yields execution back to Unity if <see cref="F:TriLibCore.AssetLoaderOptions.UseCoroutines"/> is enabled, 
            preventing long blocking operations on the main thread. Exits immediately if coroutines are disabled.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> that yields once if the elapsed time since 
            the last yield exceeded <see cref="F:TriLibCore.AssetLoaderOptions.MaxCoroutineDelayInMS"/>, 
            otherwise yields nothing.
            </returns>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.Setup">
            <summary>
            Performs initial setup for this loader context, such as preparing a 
            <see cref="T:System.Diagnostics.Stopwatch"/> for timing coroutine yields if <see cref="F:TriLibCore.AssetLoaderOptions.UseCoroutines"/> is true.
            </summary>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.TryGetCompoundTexture(TriLibCore.TextureLoadingContext,TriLibCore.TextureLoadingContext@)">
            <summary>
            Checks whether a texture with the specified <see cref="T:TriLibCore.TextureLoadingContext"/> already exists
            in <see cref="F:TriLibCore.AssetLoaderContext.LoadedCompoundTextures"/>. If found, reuses the existing data to avoid duplicating memory or I/O.
            </summary>
            <param name="textureLoadingContext">
            Contains references to the TriLib texture, texture type, and the pipeline context.
            </param>
            <param name="existingTextureLoadingContext">
            An output parameter set to the found <see cref="T:TriLibCore.TextureLoadingContext"/>, if any.
            </param>
            <returns><c>true</c> if the texture was found, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.TryGetLoadedTexture(TriLibCore.TextureLoadingContext,TriLibCore.TextureLoadingContext@)">
            <summary>
            Checks whether the specified TriLib <see cref="T:TriLibCore.Interfaces.ITexture"/> is already listed in <see cref="F:TriLibCore.AssetLoaderContext.LoadedTextures"/>.
            If found, reuses its <see cref="T:TriLibCore.TextureLoadingContext"/> so no redundant loading is performed.
            </summary>
            <param name="textureLoadingContext">Contains the TriLib texture reference.</param>
            <param name="existingTextureLoadingContext">
            Output parameter set to the found <see cref="T:TriLibCore.TextureLoadingContext"/>, if any.
            </param>
            <returns><c>true</c> if the texture was previously loaded, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.TryGetMaterialTexture(TriLibCore.Interfaces.IMaterial,TriLibCore.General.TextureType,UnityEngine.Texture@)">
            <summary>
            Searches for a processed texture (already loaded and stored) based on the given material and texture type. 
            If found, sets <paramref name="loadedTexture"/> and returns <c>true</c>.
            </summary>
            <param name="material">The source TriLib material.</param>
            <param name="textureType">A <see cref="T:TriLibCore.General.TextureType"/> indicating diffuse, normal, etc.</param>
            <param name="loadedTexture">The Unity <see cref="T:UnityEngine.Texture"/> that was found, or <c>null</c> if none exists.</param>
            <returns><c>true</c> if a texture was found, <c>false</c> if not.</returns>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.TryRegisterTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Called to register a new <see cref="T:TriLibCore.TextureLoadingContext"/> or reuse an existing one
            if the same texture reference is found. This avoids duplicate loads and ensures 
            consistent texture usage across multiple materials or submeshes.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> describing the texture, type, and pipeline context.
            </param>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.AddCompoundTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Adds the specified texture to the <see cref="F:TriLibCore.AssetLoaderContext.LoadedCompoundTextures"/> dictionary,
            associating it with a <see cref="T:TriLibCore.General.CompoundTextureKey"/> if it’s not already present.
            </summary>
            <param name="textureLoadingContext">
            The context containing the TriLib texture reference and other load info.
            </param>
        </member>
        <member name="M:TriLibCore.AssetLoaderContext.AddLoadedTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Adds the specified texture to the <see cref="F:TriLibCore.AssetLoaderContext.LoadedTextures"/> dictionary, ensuring 
            that the same <see cref="T:TriLibCore.Interfaces.ITexture"/> reference is not loaded multiple times.
            </summary>
            <param name="textureLoadingContext">
            The context containing metadata (width, height, data streams) for the newly loaded texture.
            </param>
        </member>
        <member name="T:TriLibCore.Utils.ArrayUtils">
            <summary>
            Provides utility methods for manipulating arrays and byte-based streams.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.ArrayUtils.ToMemoryStream(System.Collections.Generic.IList{System.Byte},System.IO.MemoryStream@)">
            <summary>
            Copies the contents of the specified list of bytes into the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="list">The source list of bytes to copy from.</param>
            <param name="memoryStream">
            A reference to the <see cref="T:System.IO.MemoryStream"/> where the bytes will be copied. 
            If the underlying buffer of <paramref name="memoryStream"/> is empty, a new buffer of the appropriate size is created.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.ArrayUtils.Add``1(``0[]@,``0)">
            <summary>
            Adds an item to the end of the specified array, resizing the array to accommodate the new element.
            </summary>
            <typeparam name="T">The type of elements contained within the array.</typeparam>
            <param name="arr">A reference to the array to which the item will be added.</param>
            <param name="item">The item to add to the array.</param>
        </member>
        <member name="M:TriLibCore.Utils.ArrayUtils.Remove``1(``0[]@,``0)">
            <summary>
            Removes the first occurrence of a specified item from the specified array, resizing the array if the item is found.
            </summary>
            <typeparam name="T">The type of elements contained within the array.</typeparam>
            <param name="arr">A reference to the array from which the item will be removed.</param>
            <param name="item">The item to remove from the array.</param>
        </member>
        <member name="M:TriLibCore.Utils.ArrayUtils.ContainsType``1(System.Array)">
            <summary>
            Determines whether the specified array contains at least one element of a given type.
            </summary>
            <typeparam name="T">The type to look for within the array.</typeparam>
            <param name="array">The array to search.</param>
            <returns>
            <see langword="true"/> if the array contains at least one element of the specified type; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:TriLibCore.Utils.Base64Decoder">
            <summary>
            Provides functionality to decode data from a Base64-encoded source one byte at a time.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.Base64Decoder.ReadStateInfo.Val">
            <summary>
            Holds the intermediate value between decoding steps.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.Base64Decoder.ReadStateInfo.Pos">
            <summary>
            Indicates the current position in the decoding sequence.
            Valid positions are 0, 1, 2, and 3.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.Base64Decoder.ReadState">
            <summary>
            Gets the read state for this <see cref="T:TriLibCore.Utils.Base64Decoder"/>, creating a new instance if none exists.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.Base64Decoder.DecodeByte(System.Byte,System.Byte@)">
            <summary>
            Decodes a single Base64 character (in byte form) and produces an output byte, if enough data has been gathered.
            </summary>
            <param name="data">
            The byte representing a Base64 character. Whitespace and certain control characters
            (such as <c>'='</c>, <c>'\r'</c>, <c>'\n'</c>) are ignored.
            </param>
            <param name="output">
            When this method returns <see langword="true"/>, contains the decoded byte.
            When this method returns <see langword="false"/>, the <paramref name="output"/> is not yet defined.
            </param>
            <returns>
            <see langword="true"/> if a decoded byte is produced by this method; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified <paramref name="data"/> is an invalid Base64 character.
            </exception>
        </member>
        <member name="T:TriLibCore.Utils.BigEndianBinaryReader">
            <summary>
            Provides methods for reading primitive data types as big-endian values from a stream.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.BigEndianBinaryReader"/> class based on the specified stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.BigEndianBinaryReader"/> class based on the specified stream and character encoding, and optionally leaves the stream open.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding.</param>
            <param name="leaveOpen">true to leave the stream open after the <see cref="T:TriLibCore.Utils.BigEndianBinaryReader"/> object is disposed; otherwise, false.</param>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream using big-endian encoding.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream using big-endian encoding.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream using big-endian encoding.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream using big-endian encoding.
            </summary>
            <returns>A 4-byte unsigned integer read from the current stream.</returns>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating-point value from the current stream using big-endian encoding.
            </summary>
            <returns>A 4-byte floating-point value read from the current stream.</returns>
        </member>
        <member name="M:TriLibCore.Utils.BigEndianBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating-point value from the current stream using big-endian encoding.
            </summary>
            <returns>An 8-byte floating-point value read from the current stream.</returns>
        </member>
        <member name="T:TriLibCore.Utils.ColorUtils">
            <summary>
            Provides utility methods for color calculations, including conversions from specular 
            properties to glossiness or metallic values. These methods are useful when adapting 
            material properties between different shading models or pipelines.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.ColorUtils.SpecularToGlossiness(UnityEngine.Color,System.Single)">
            <summary>
            Converts a specular color and a shinniness exponent into a glossiness value.
            </summary>
            <param name="specularBase">
            The base specular color. Its red, green, and blue components are used to compute 
            a weighted average for intensity.
            </param>
            <param name="shinninessExponent">
            The exponent representing the shininess of the material. Larger values indicate a 
            sharper specular highlight.
            </param>
            <returns>
            A glossiness value computed using the formula:
            <code>
            DiffuseGlossiness = 1 - sqrt(2 / (shinninessExponent * specularIntensity + 2))
            </code>
            where <c>specularIntensity</c> is calculated as:
            <c>0.2125 * specularBase.r + 0.7154 * specularBase.g + 0.0721 * specularBase.b</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.ColorUtils.SpecularToMetallic(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Converts a specular color and a default diffuse color into a metallic value.
            </summary>
            <param name="specularBase">
            The base specular color of the material, which affects how “metal-like” the surface appears.
            </param>
            <param name="defaultDiffuse">
            The default diffuse color of the material. This color is used to calculate the diffuse brightness.
            </param>
            <returns>
            A metallic value between 0 and 1, computed by comparing the brightness of the specular and diffuse components.
            The calculation involves a correction for dielectric specular reflectance (set to 0.04).
            </returns>
        </member>
        <member name="T:TriLibCore.Utils.CustomDataHelper">
            <summary>
            Represents a class used to handle TriLib CustomData parameter as a Type/Object Dictionary.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.CustomDataHelper.CreateCustomDataDictionary">
            <summary>
            Creates a new Type/Object Dictionary.
            </summary>
            <returns>The created Dictionary</returns>
        </member>
        <member name="M:TriLibCore.Utils.CustomDataHelper.CreateCustomDataDictionaryWithData``1(``0)">
            <summary>
            Creates a new Type/Object Dictionary and adds an existing data to it.
            </summary>
            <param name="data">The data to add to the Dictionary.</param>
            <returns>The created Dictionary</returns>
        </member>
        <member name="M:TriLibCore.Utils.CustomDataHelper.GetCustomData``1(System.Object)">
            <summary>
            Tries to get a value with the type 'T' when the 'customData' is a Type/Object Dictionary.
            </summary>
            <typeparam name="T">The type of the value to look for.</typeparam>
            <param name="customData">The customData object.</param>
            <returns>The value, if found. Otherwise <c>null</c>.</returns>
        </member>
        <member name="M:TriLibCore.Utils.CustomDataHelper.SetCustomData``1(System.Object@,``0)">
            <summary>
            Tries to set a value with the type 'T' and value 'value' by setting the 'customData' as a Type/Object Dictionary.
            </summary>
            <typeparam name="T">The type of the value to store.</typeparam>
            <param name="customData">The customData object.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="T:TriLibCore.Utils.Dispatcher">
            <summary>Represents a system for dispatching Actions to execute on the Main Thread.</summary>
        </member>
        <member name="P:TriLibCore.Utils.Dispatcher.DontDestroyOnLoad">
            <summary>
            Gets/Sets whether the Dispatcher instance will be destroyed when a new level is loaded.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.Dispatcher.CheckInstance">
            <summary>Ensures a Dispatcher instance exists.</summary>
        </member>
        <member name="M:TriLibCore.Utils.Dispatcher.ExecuteQueue(TriLibCore.Interfaces.IAssetLoaderContext)">
            <summary>
            Executes the actions in the given queue and waits for its execution, handling the async and sync calls automatically.
            </summary>
            <param name="assetLoaderContext">The Asset Loader Context reference. Asset Loader Context contains the Model loading data.</param>
        </member>
        <member name="M:TriLibCore.Utils.Dispatcher.ExecuteRecursively(System.Collections.IEnumerator)">
            <summary>
            Executes the given enumerator recursively.
            </summary>
            <param name="enumerator">The enumerator to execute.</param>
        </member>
        <member name="M:TriLibCore.Utils.Dispatcher.InvokeAsync``1(System.Action{``0},``0)">
            <summary>
            Queues an action to be invoked on the Main Thread, handling the async and sync calls automatically.
            </summary>
            <param name="action">The Action to be queued on the Main Thread.</param>
            <param name="context">The Context to be assigned to the Action.</param>
        </member>
        <member name="M:TriLibCore.Utils.Dispatcher.InvokeAsync(System.Action)">
            <summary>
            Queues an action to be invoked on the Main Thread.
            </summary>
            <param name="action">The Action to be queued on the Main Thread.</param>
        </member>
        <member name="M:TriLibCore.Utils.Dispatcher.InvokeAsyncAndWait``1(System.Action{``0},``0)">
            <summary>
            Queues an action to be invoked on the Main Thread and waits for its execution, handling the async and sync calls automatically.
            </summary>
            <param name="action">The Action to be queued on the Main Thread.</param>
            <param name="context">The Context to be assigned to the Action.</param>
        </member>
        <member name="M:TriLibCore.Utils.Dispatcher.InvokeAsyncUnchecked``1(System.Action{``0},``0)">
            <summary>
            Queues an action to be invoked on the Main Thread.
            </summary>
            <param name="action">The Action to be queued on the Main Thread.</param>
            <param name="context">The Context to be assigned to the Action.</param>
        </member>
        <member name="T:TriLibCore.Utils.FileUtils">
            <summary>
            Represents a series of file utility methods.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.FindFile(System.String,System.String,System.Boolean)">
            <summary>
            Tries to find a file with the specified <paramref name="originalPath"/> starting from the given <paramref name="basePath"/>.
            </summary>
            <param name="basePath">The base directory to begin the search.</param>
            <param name="originalPath">The relative or absolute path of the file to find.</param>
            <param name="recursively">
            <see langword="true"/> to search within all subdirectories of <paramref name="basePath"/>;
            <see langword="false"/> to search only in <paramref name="basePath"/>.
            </param>
            <returns>
            The fully qualified path to the file if it is found; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.GetShortFilename(System.String)">
            <summary>
            Gets the file name (including its extension) from the specified <paramref name="filename"/>.
            </summary>
            <param name="filename">The full path from which to extract the short file name.</param>
            <returns>The short file name (with extension), or <see langword="null"/> if <paramref name="filename"/> is null or empty.</returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.GetFileDirectory(System.String)">
            <summary>
            Gets the directory portion of the specified <paramref name="filename"/>.
            </summary>
            <param name="filename">The full path from which to extract the directory.</param>
            <returns>The directory portion of the path, or <see langword="null"/> if none is found or <paramref name="filename"/> is null or empty.</returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.GetFilenameWithoutExtension(System.String)">
            <summary>
            Gets the file name (without the extension) from the specified <paramref name="filename"/>.
            </summary>
            <param name="filename">The full path from which to extract the file name without extension.</param>
            <returns>
            The file name without extension, or <see langword="null"/> if <paramref name="filename"/> is null or empty.
            If the file has no extension, returns <paramref name="filename"/> itself.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.GetFileExtension(System.String,System.Boolean)">
            <summary>
            Gets the file extension from the specified <paramref name="path"/>.
            </summary>
            <param name="path">The file path to process.</param>
            <param name="includeDot">
            <see langword="true"/> to include the dot (.) in the returned extension; 
            <see langword="false"/> to exclude it.
            </param>
            <returns>The file extension in lowercase, or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.GetFilename(System.String)">
            <summary>
            Retrieves the file name from the given <paramref name="path"/>.
            Uses <see cref="M:System.IO.Path.GetFileName(System.String)"/> for the underlying operation,
            but falls back to string manipulation if the result matches the entire <paramref name="path"/>.
            </summary>
            <param name="path">The full file path.</param>
            <returns>The file name portion of the path, or <see langword="null"/> if <paramref name="path"/> is null or empty.</returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.LoadFileData(System.String)">
            <summary>
            Synchronously loads all file data from the specified <paramref name="filename"/>.
            </summary>
            <param name="filename">The full path to the file to read.</param>
            <returns>
            A byte array containing the file data, or an empty array if <paramref name="filename"/> is null, empty, 
            or an exception occurs while reading the file.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.LoadFileStream(System.String)">
            <summary>
            Creates and returns a <see cref="T:System.IO.FileStream"/> for the specified <paramref name="filename"/>.
            </summary>
            <param name="filename">The full path of the file to open.</param>
            <returns>
            A <see cref="T:System.IO.FileStream"/> in <see cref="F:System.IO.FileMode.Open"/> mode with read-only access,
            or <see langword="null"/> if <paramref name="filename"/> is null, empty, or an exception occurs.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.SanitizePath(System.String)">
            <summary>
            Normalizes a file path by removing invalid filename characters and replacing backslashes with forward slashes.
            </summary>
            <param name="path">The original path.</param>
            <returns>The sanitized path, or <see langword="null"/> if <paramref name="path"/> is null or empty.</returns>
        </member>
        <member name="M:TriLibCore.Utils.FileUtils.TrySaveFileAtPersistentDataPath(TriLibCore.AssetLoaderContext,System.String,System.String,System.Collections.Generic.IEnumerator{System.Byte},System.String@,System.Action{System.Collections.Generic.IEnumerator{System.Byte},System.String})">
            <summary>
            Attempts to save an embedded file to persistent storage, optionally decoding its data.
            </summary>
            <param name="assetLoaderContext">An <see cref="T:TriLibCore.AssetLoaderContext"/> containing context information for the asset loading process.</param>
            <param name="objectName">The name of the object associated with the embedded file.</param>
            <param name="filename">The name of the embedded file.</param>
            <param name="inputData">An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that yields the raw file data, byte by byte.</param>
            <param name="finalPath">
            When this method returns <see langword="true"/>, contains the path where the file was saved;
            otherwise, <see langword="null"/>.
            </param>
            <param name="decoder">
            An optional action that can decode the <paramref name="inputData"/> before writing it to disk.
            If <see langword="null"/>, the data is written directly to the file.
            </param>
            <returns>
            <see langword="true"/> if the file was successfully saved (or already exists in the target location);
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:TriLibCore.Utils.FlagUtils">
            <summary>
            Provides utility methods for working with integer-based flags.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.FlagUtils.HasFlag(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified flag is set within the given integer value.
            </summary>
            <param name="value">The integer value to check.</param>
            <param name="flag">The flag to look for.</param>
            <returns>
            <see langword="true"/> if <paramref name="flag"/> is set in <paramref name="value"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:TriLibCore.Utils.HashUtils">
            <summary>
            Represents a series of Hash generation utility methods.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.HashUtils.HashBasis">
            <summary>
            The hashing basis value.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.HashUtils.GetHash(System.String)">
            <summary>
            Calculates a Long Hash using the given String.
            </summary>
            <param name="chars">The String used to calculate the Hash.</param>
            <returns>The calculated Hash.</returns>
        </member>
        <member name="M:TriLibCore.Utils.HashUtils.GetHash(System.Collections.Generic.IList{System.Char},System.Int32)">
            <summary>
            Calculates a Long Hash using the given Char Array.
            </summary>
            <param name="chars">The Char Array used to calculate the Hash.</param>
            <param name="count">The Char Array count.</param>
            <returns>The calculated Hash.</returns>
        </member>
        <member name="M:TriLibCore.Utils.HashUtils.GetHash(System.Collections.Generic.IList{System.Byte},System.Int32)">
            <summary>
            Calculates a Long Hash using the given Byte Array.
            </summary>
            <param name="bytes">The Byte Array used to calculate the Hash.</param>
            <param name="count">The Byte Array count.</param>
            <returns>The calculated Hash.</returns>
        </member>
        <member name="M:TriLibCore.Utils.HashUtils.GetHashInitialValue">
            <summary>
            Gets the hashing base value.
            </summary>
            <returns>The Hash base value.</returns>
        </member>
        <member name="M:TriLibCore.Utils.HashUtils.GetHash(System.Int64,System.Int32)">
            <summary>
            Calculates a Long Hash from the given Value, using the given Hash as basis.
            </summary>
            <param name="hash">The Hash basis value.</param>
            <param name="value">The value to Hash.</param>
            <returns>The calculated Hash.</returns>
        </member>
        <member name="T:TriLibCore.Utils.JsonParser">
            <summary>
            Parses a JSON document from a binary stream. This implementation utilizes a <see cref="T:System.IO.BinaryReader"/>
            and offers functionality for tokenizing and constructing JSON objects, arrays, and values.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.#ctor(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.JsonParser"/> class with the specified <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="binaryReader">The <see cref="T:System.IO.BinaryReader"/> to read JSON data from.</param>
            <param name="createKeys">
            A value indicating whether parsed string keys should be stored within 
            the resulting <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> objects for later retrieval.
            </param>
        </member>
        <member name="T:TriLibCore.Utils.JsonParser.JsonValueType">
            <summary>
            Specifies the recognized JSON value types.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.Object">
            <summary>
            Represents a JSON object type ("{...}").
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.Array">
            <summary>
            Represents a JSON array type ("[...]").
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.Number">
            <summary>
            Represents a numeric JSON value.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.String">
            <summary>
            Represents a string JSON value.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.True">
            <summary>
            Represents the literal 'true'.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.False">
            <summary>
            Represents the literal 'false'.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.Null">
            <summary>
            Represents the literal 'null'.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.JsonParser.JsonValueType.Unknown">
            <summary>
            Represents an unknown or unrecognized type.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.ParseRootValue">
            <summary>
            Parses the root JSON value, which must be an object (i.e., enclosed in curly braces).
            </summary>
            <returns>A <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> representing the root object.</returns>
            <exception cref="T:System.Exception">Thrown when the root token is not a '{' character.</exception>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.ParseValues(TriLibCore.Utils.JsonParser.JsonValue@,System.Boolean)">
            <summary>
            Parses JSON values, either within an array context ("[ ]") or as part of an object's key-value pairs.
            This method reads tokens from the underlying stream and constructs <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> children for 
            the given <paramref name="parentValue"/>.
            </summary>
            <param name="parentValue">The parent <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> to which parsed child values are added.</param>
            <param name="insideArray">
            <see langword="true"/> if the values belong to an array (e.g. "[...]"); 
            <see langword="false"/> if they are part of an object's properties.
            </param>
            <exception cref="T:System.Exception">Thrown if an unexpected token is encountered.</exception>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.ReadToken(System.Int64@,System.Int64@,System.Boolean@,System.Char@)">
            <summary>
            Reads a JSON token from the underlying <see cref="T:System.IO.BinaryReader"/> and returns its position, length, hash, 
            and additional characteristics (e.g., whether it is a string).
            </summary>
            <param name="tokenLength">Outputs the length of the token in bytes.</param>
            <param name="tokenHash">Outputs the computed hash value for the token's contents.</param>
            <param name="isString">Outputs a value indicating whether this token is delimited as a string.</param>
            <param name="initialChar">Outputs the first character of the token (for single-character tokens) or the delimiter (for strings).</param>
            <returns>The position in the stream at which the token begins.</returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.ParseKeysAndValues(TriLibCore.Utils.JsonParser.JsonValue@)">
            <summary>
            Parses a series of key-value pairs inside an object, reading keys and their corresponding values.
            Key tokens are expected to be strings followed by a colon (<c>:</c>), then a value.
            </summary>
            <param name="parentValue">
            The parent <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> to which the parsed key-value pairs will be added as children.
            </param>
            <exception cref="T:System.Exception">
            Thrown if a key-value pair is missing a colon (<c>:</c>) or if the object does not properly end with <c>}</c>.
            </exception>
        </member>
        <member name="T:TriLibCore.Utils.JsonParser.JsonValue">
            <summary>
            Represents a JSON value in the parsed data, including its children (for objects/arrays) 
            and its position/length in the underlying stream.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.#ctor(TriLibCore.Utils.JsonParser,System.Int32,System.Int32,TriLibCore.Utils.JsonParser.JsonValueType)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> struct with the given parameters.
            </summary>
            <param name="jsonParser">
            The <see cref="P:TriLibCore.Utils.JsonParser.JsonValue.JsonParser"/> used to read and interpret the underlying data.
            </param>
            <param name="position">The start position of this value in the stream.</param>
            <param name="valueLength">The length (in bytes) of this value in the stream.</param>
            <param name="type">The <see cref="T:TriLibCore.Utils.JsonParser.JsonValueType"/> representing this value.</param>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.Count">
            <summary>
            Gets the total number of direct child values.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.JsonParser">
            <summary>
            Gets the <see cref="P:TriLibCore.Utils.JsonParser.JsonValue.JsonParser"/> associated with this value.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.Position">
            <summary>
            Gets or sets the position of this JSON value in the underlying stream.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.Type">
            <summary>
            Gets the <see cref="T:TriLibCore.Utils.JsonParser.JsonValueType"/> for this value.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.Valid">
            <summary>
            Indicates whether this value is valid (i.e., has a non-zero length).
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.ValueLength">
            <summary>
            Gets or sets the length (in bytes) of this value in the underlying stream.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.GetStringValue(TriLibCore.Utils.JsonParser,System.Int64,System.Int32)">
            <summary>
            Extracts a string value from the underlying stream for the specified 
            <paramref name="position"/> and <paramref name="length"/>.
            </summary>
            <param name="jsonParser">The <see cref="P:TriLibCore.Utils.JsonParser.JsonValue.JsonParser"/> that manages the stream.</param>
            <param name="position">The position in the stream at which the string value begins.</param>
            <param name="length">The length (in bytes) of the string.</param>
            <returns>The string read from the stream, or an empty string if an error occurs.</returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.AddChild(System.Int64,TriLibCore.Utils.JsonParser.JsonValue,System.String)">
            <summary>
            Adds a child <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> to the current value.
            </summary>
            <param name="hash">A computed hash of the key (if any).</param>
            <param name="value">The <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> to add as a child.</param>
            <param name="key">The optional string key associated with this child.</param>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.AddOffset(System.Int32)">
            <summary>
            Adjusts the starting position of this value by the given offset, and reduces
            its length accordingly.
            </summary>
            <param name="offset">The number of bytes to shift from the current position.</param>
            <returns>This <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> after the offset has been applied.</returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.CopyTo(System.Char[])">
            <summary>
            Copies the bytes of this value into the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The character array to receive the value's data.</param>
            <returns>The number of characters copied into <paramref name="buffer"/>.</returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.GetByteEnumerator">
            <summary>
            Returns an enumerator that can iterate through the bytes of this value in the underlying stream.
            </summary>
            <returns>A <see cref="T:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator"/> for this value.</returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.GetCharEnumerator">
            <summary>
            Returns an enumerator that can iterate through the characters of this value in the underlying stream.
            </summary>
            <returns>A <see cref="T:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator"/> for this value.</returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.GetChildAtIndex(System.Int32)">
            <summary>
            Retrieves the child <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the child to retrieve.</param>
            <returns>
            The child <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> at <paramref name="index"/>, or 
            a default <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> if the index is out of range.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.GetChildWithKey(System.Int64)">
            <summary>
            Retrieves the child <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> for the given key hash, returning its first child (value).
            This is typically used when the child is itself an object or a single value.
            </summary>
            <param name="hash">The hash of the key for which to retrieve the child.</param>
            <returns>
            The first child <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> associated with the key hash; 
            otherwise, a default <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> if not found.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/>'s children.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the child <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> objects.</returns>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.ToString">
            <summary>
            Converts this value to its string representation by reading data from the underlying stream.
            </summary>
            <returns>A string that represents the contents of this JSON value.</returns>
        </member>
        <member name="T:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator">
            <summary>
            Enumerates the bytes of a <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> from the underlying stream.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator.#ctor(TriLibCore.Utils.JsonParser.JsonValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator"/> struct for the given <paramref name="jsonValue"/>.
            </summary>
            <param name="jsonValue">The <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> to enumerate over.</param>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator.Current">
            <summary>
            Gets the byte at the current position in the enumerator.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonByteEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator">
            <summary>
            Enumerates the characters of a <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> from the underlying stream.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator.#ctor(TriLibCore.Utils.JsonParser.JsonValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator"/> struct for the given <paramref name="jsonValue"/>.
            </summary>
            <param name="jsonValue">The <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> to enumerate over.</param>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator.Current">
            <summary>
            Gets the character at the current position in the enumerator.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonCharEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:TriLibCore.Utils.JsonParser.JsonValue.JsonKeyValueEnumerator">
            <summary>
            Enumerates key-value pairs for this <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> if it was parsed with key creation enabled.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonKeyValueEnumerator.#ctor(TriLibCore.Utils.JsonParser.JsonValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.JsonParser.JsonValue.JsonKeyValueEnumerator"/> struct for the given <paramref name="jsonValue"/>.
            </summary>
            <param name="jsonValue">The <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> whose child key-value pairs will be enumerated.</param>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.JsonKeyValueEnumerator.Current">
            <summary>
            Gets the current key-value pair, represented as a <see cref="T:System.Tuple`2"/>.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonKeyValueEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonKeyValueEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonKeyValueEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:TriLibCore.Utils.JsonParser.JsonValue.JsonValueEnumerator">
            <summary>
            Enumerates the direct child <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> objects of this instance.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonValueEnumerator.#ctor(TriLibCore.Utils.JsonParser.JsonValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.JsonParser.JsonValue.JsonValueEnumerator"/> struct for the given <paramref name="jsonValue"/>.
            </summary>
            <param name="jsonValue">The <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> whose children are to be enumerated.</param>
        </member>
        <member name="P:TriLibCore.Utils.JsonParser.JsonValue.JsonValueEnumerator.Current">
            <summary>
            Gets the current <see cref="T:TriLibCore.Utils.JsonParser.JsonValue"/> in the enumeration.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonValueEnumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonValueEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:TriLibCore.Utils.JsonParser.JsonValue.JsonValueEnumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="T:TriLibCore.Utils.ListUtils">
            <summary>
            Represents a series of Lists utility methods.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.ListUtils.FixIndexNonGeneric``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Fixes the given index, so it doesn't get outside the given List boundaries.
            </summary>
            <typeparam name="T">The List element type.</typeparam>
            <param name="index">The index.</param>
            <param name="list">The List.</param>
            <returns>The fixed element at the fixed index.</returns>
        </member>
        <member name="M:TriLibCore.Utils.ListUtils.FixIndex``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Fixes the given index, so it doesn't get outside the given List boundaries and returns the element at the fixed index.
            </summary>
            <typeparam name="T">The List element type.</typeparam>
            <param name="index">The index.</param>
            <param name="list">The List.</param>
            <returns>The fixed element at the fixed index.</returns>
        </member>
        <member name="T:TriLibCore.Utils.MathUtils">
            <summary>
            Represents a series of math utility methods.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.MathUtils.Axis">
            <summary>
            Represents the 3D axis as an array.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.MathUtils.CalculateTangentSign(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Calculates the given tangent value sign. (w component)
            </summary>
            <param name="normal">The normal vector.</param>
            <param name="tangent">The tangent vector.</param>
            <returns>The tangent sign.</returns>
        </member>
        <member name="T:TriLibCore.Utils.NormalSolver">
            <summary>
            Provides utility methods for calculating normals on vertex data, including support for both <see cref="T:UnityEngine.Vector3"/> and generic <see cref="T:TriLibCore.Geometries.IVertexData"/>.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.CalculateNormalsInternal(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IDictionary{System.Int32,TriLibCore.Interfaces.IGeometry},TriLibCore.AssetLoaderContext)">
            <summary>
            Calculates per-vertex normals in-place for the specified <paramref name="normals"/> array 
            based on the provided <paramref name="verticesData"/> and <paramref name="geometriesData"/>.
            </summary>
            <param name="normals">
            An <see cref="T:System.Collections.Generic.IList`1"/> that will store the computed normals. 
            It should already be sized to match the length of <paramref name="verticesData"/>.
            </param>
            <param name="verticesData">The collection of vertex positions used to calculate normals.</param>
            <param name="geometriesData">A mapping of geometry indices to <see cref="T:TriLibCore.Interfaces.IGeometry"/> instances.</param>
            <param name="assetLoaderContext">Contains data and settings (such as smoothing angle) for the normal calculation.</param>
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.CalculateNormals(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IDictionary{System.Int32,TriLibCore.Interfaces.IGeometry},TriLibCore.AssetLoaderContext)">
            <summary>
            Calculates per-vertex normals for the given <paramref name="verticesData"/> and <paramref name="geometriesData"/>,
            and returns them as an array of <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="verticesData">The array of vertex positions.</param>
            <param name="geometriesData">A dictionary of geometry data, keyed by geometry index.</param>
            <param name="assetLoaderContext">Contains data and settings (such as smoothing angle) for the normal calculation.</param>
            <returns>An array of <see cref="T:UnityEngine.Vector3"/> representing the computed normals.</returns>
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.CalculateNormalsAsList(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IDictionary{System.Int32,TriLibCore.Interfaces.IGeometry},TriLibCore.AssetLoaderContext)">
            <summary>
            Calculates per-vertex normals for the given <paramref name="verticesData"/> and <paramref name="geometriesData"/>,
            and returns them as a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="verticesData">The list of vertex positions.</param>
            <param name="geometriesData">A dictionary of geometry data, keyed by geometry index.</param>
            <param name="assetLoaderContext">Contains data and settings (such as smoothing angle) for the normal calculation.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the computed normals.</returns>
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.CalculateNormals``1(TriLibCore.Interfaces.IGeometryGroup,System.Collections.Generic.IList{``0},System.Collections.Generic.IDictionary{System.Int32,TriLibCore.Interfaces.IGeometry},TriLibCore.AssetLoaderContext)">
            <summary>
            Calculates per-vertex normals in-place for the given collection of <see cref="T:TriLibCore.Geometries.IVertexData"/> objects,
            using the specified <paramref name="geometryGroup"/> and <paramref name="geometriesData"/>.
            </summary>
            <typeparam name="T">
            The type of vertex data, which must implement <see cref="T:TriLibCore.Geometries.IVertexData"/> to allow 
            position and normal manipulation.
            </typeparam>
            <param name="geometryGroup">
            The geometry group context used to interpret and set vertex positions and normals.
            </param>
            <param name="verticesData">The list of vertex data objects to process.</param>
            <param name="geometriesData">A dictionary of geometry data, keyed by geometry index.</param>
            <param name="assetLoaderContext">Contains data and settings (such as smoothing angle) for the normal calculation.</param>
        </member>
        <member name="T:TriLibCore.Utils.NormalSolver.VertexKey">
            <summary>
            Represents a unique key for a vertex based on its approximate position, 
            used for grouping vertices with similar or identical coordinates.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.VertexKey.#ctor(UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.NormalSolver.VertexKey"/> struct, 
            rounding the specified <see cref="T:UnityEngine.Vector3"/> position to a fixed precision.
            </summary>
            <param name="position">The vertex position.</param>
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.VertexKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.VertexKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:TriLibCore.Utils.NormalSolver.VertexEntry">
            <summary>
            Stores an index to a particular geometry (mesh), an element (face) within that geometry,
            and the vertex index within the overall vertex collection.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.NormalSolver.VertexEntry.MeshIndex">
            <summary>
            The index of the mesh in the GeometriesData.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.NormalSolver.VertexEntry.ElementIndex">
            <summary>
            The index of the face (triangle or quad) within the mesh.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.NormalSolver.VertexEntry.VertexIndex">
            <summary>
            The index of the vertex within the overall vertex collection.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.NormalSolver.VertexEntry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.Utils.NormalSolver.VertexEntry"/> struct with the specified indices.
            </summary>
            <param name="meshIndex">The index of the mesh.</param>
            <param name="elementIndex">The index of the face (triangle or quad).</param>
            <param name="vertexIndex">The index of the vertex in the main vertex list.</param>
        </member>
        <member name="T:TriLibCore.Utils.ProcessUtils">
            <summary>
            Provides utility methods for gathering process-related information and formatting memory sizes.
            </summary>
        </member>
        <member name="F:TriLibCore.Utils.ProcessUtils.SizeSuffixes">
            <summary>
            Common size units for displaying byte values in a human-readable format.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.ProcessUtils.GetProcessData(System.Double@,System.Int64@)">
            <summary>
            Obtains the total CPU time (in milliseconds) and memory usage (in bytes) for the current process.
            </summary>
            <param name="elapsedTime">
            When this method returns, contains the total CPU time, in milliseconds,
            that the process has used. This value comes from <see cref="P:System.Diagnostics.Process.TotalProcessorTime"/>.
            </param>
            <param name="usedMemory">
            When this method returns, contains the total allocated memory, in bytes,
            as reported by <see cref="M:System.GC.GetTotalMemory(System.Boolean)"/>.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.ProcessUtils.SizeSuffix(System.Int64,System.Int32)">
            <summary>
            Formats a byte value into a human-readable string using common size suffixes (e.g., KB, MB, GB).
            </summary>
            <param name="value">The size, in bytes, to be formatted.</param>
            <param name="decimalPlaces">
            The number of decimal places to include in the formatted output.
            The default value is <c>1</c>.
            </param>
            <returns>
            A string representation of <paramref name="value"/> that includes the appropriate size suffix.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="decimalPlaces"/> is less than zero.
            </exception>
        </member>
        <member name="T:TriLibCore.Utils.RenderPipelineUtils">
            <summary>
            Represents a series of Render Pipeline utility methods.
            </summary>
        </member>
        <member name="P:TriLibCore.Utils.RenderPipelineUtils.IsUsingStandardPipeline">
            <summary>Returns <c>true</c> if the project is using the Standard Rendering Pipeline.</summary>
        </member>
        <member name="P:TriLibCore.Utils.RenderPipelineUtils.IsUsingUniversalPipeline">
            <summary>Returns <c>true</c> if the project is using the Universal Rendering Pipeline.</summary>
        </member>
        <member name="P:TriLibCore.Utils.RenderPipelineUtils.IsUsingHDRPPipeline">
            <summary>Returns <c>true</c> if the project is using the HDRP Rendering Pipeline.</summary>
        </member>
        <member name="T:TriLibCore.Utils.RightHandToLeftHandConverter">
            <summary>
            Represents methods to convert from a right-hand to a left-hand coordinate system.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.RightHandToLeftHandConverter.ConvertMatrix(UnityEngine.Matrix4x4)">
            <summary>Converts a Matrix4x4 to the left-hand coordinate system.</summary>
            <param name="value">The Matrix4x4 to be converted.</param>
            <returns>The converted matrix.</returns>
        </member>
        <member name="M:TriLibCore.Utils.RightHandToLeftHandConverter.ConvertMatrix2(UnityEngine.Matrix4x4)">
            <summary>Converts a Matrix4x4 to the left-hand coordinate system.</summary>
            <param name="value">The Matrix4x4 to be converted.</param>
            <returns>The converted matrix.</returns>
        </member>
        <member name="M:TriLibCore.Utils.RightHandToLeftHandConverter.ConvertRotation(UnityEngine.Quaternion)">
            <summary>Converts a Quaternion to the left-hand coordinate system.</summary>
            <param name="value">The Quaternion to be converted.</param>
            <returns>The converted Quaternion.</returns>
        </member>
        <member name="M:TriLibCore.Utils.RightHandToLeftHandConverter.ConvertRotation(UnityEngine.Vector3)">
            <summary>Converts an Angle representation to the left-hand coordinate system.</summary>
            <param name="value">The Angle representation to be converted.</param>
            <returns>The converted vector.</returns>
        </member>
        <member name="M:TriLibCore.Utils.RightHandToLeftHandConverter.ConvertRotation(UnityEngine.Vector4)">
            <summary>Converts a Quaternion to the left-hand coordinate system.</summary>
            <param name="value">The Quaternion to be converted.</param>
            <returns>The converted vector.</returns>
        </member>
        <member name="M:TriLibCore.Utils.RightHandToLeftHandConverter.ConvertVector(UnityEngine.Vector3)">
            <summary>Converts a Vector3 to the left-hand coordinate system.</summary>
            <param name="value">The Vector3 to be converted.</param>
            <returns>The converted vector.</returns>
        </member>
        <member name="T:TriLibCore.Utils.StringComparer">
            <summary>Represents a class used to match Strings using various parameters.</summary>
        </member>
        <member name="M:TriLibCore.Utils.StringComparer.Matches(TriLibCore.General.StringComparisonMode,System.Boolean,System.String,System.String)">
            <summary>Compares two Strings using the class options.</summary>
            <param name="stringComparisonMode">The type of comparison to use.</param>
            <param name="caseInsensitive">Pass <c>true</c> to do a case-insensitive search.</param>
            <param name="left">The left String to compare.</param>
            <param name="right">The right String to compare.</param>
            <returns>
            <c>true</c> if the strings match, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TriLibCore.Utils.TangentSolver">
            <summary>
            Provides functionality to calculate tangent vectors for a set of vertices.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.TangentSolver.CalculateTangents(TriLibCore.Interfaces.IGeometryGroup,System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3},TriLibCore.AssetLoaderContext)">
            <summary>
            Calculates the tangent vectors for the given geometry data. Each returned tangent corresponds to the 
            associated vertex index from <paramref name="vertices"/>.
            </summary>
            <param name="geometryGroup">
            The <see cref="T:TriLibCore.Interfaces.IGeometryGroup"/> containing geometry and UV data necessary for computing tangents.
            </param>
            <param name="vertices">
            A list of vertex positions used in the geometry.
            </param>
            <param name="normals">
            A list of vertex normals used to orthonormalize the resulting tangents.
            </param>
            <param name="assetLoaderContext">
            Contextual information for asset loading, including a cancellation token for cooperative cancellation.
            </param>
            <returns>
            An array of <see cref="T:UnityEngine.Vector3"/> representing the computed tangent vectors for each vertex.
            </returns>
            <remarks>
            <para>
            Tangent vectors are computed using the vertices, their associated normals, and the primary UV set 
            (<c>geometryGroup.UVs1</c>).
            </para>
            <para>
            The algorithm computes S- and T-directions for each triangle (or quad) face, sums them across shared vertices, 
            and then orthonormalizes the resulting vectors against each vertex's normal.
            </para>
            </remarks>
        </member>
        <member name="T:TriLibCore.Utils.TextureComparators">
            <summary>
            Provides methods for comparing and hashing <see cref="T:TriLibCore.Interfaces.ITexture"/> instances.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.TextureComparators.TextureEquals(TriLibCore.Interfaces.ITexture,TriLibCore.Interfaces.ITexture)">
            <summary>
            Determines whether two <see cref="T:TriLibCore.Interfaces.ITexture"/> instances represent the same texture.
            This method primarily checks if both textures have the same short file name or the same name.
            </summary>
            <param name="a">The first texture to compare.</param>
            <param name="b">The second texture to compare.</param>
            <returns>
            <see langword="true"/> if both textures are considered equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureComparators.CompareFilenameSafe(System.String,System.String)">
            <summary>
            Safely compares two file names by using only the short file names (i.e., without directory paths).
            </summary>
            <param name="a">The first file name.</param>
            <param name="b">The second file name.</param>
            <returns>
            <see langword="true"/> if the short file names match; otherwise, <see langword="false"/>.
            If both file names are <see langword="null"/>, returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureComparators.Equals(TriLibCore.Interfaces.ITexture,System.Object)">
            <summary>
            Determines whether an <see cref="T:TriLibCore.Interfaces.ITexture"/> instance is equal to the specified object.
            </summary>
            <param name="a">The texture to compare.</param>
            <param name="b">The object to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="b"/> is an <see cref="T:TriLibCore.Interfaces.ITexture"/> and represents the same texture as <paramref name="a"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureComparators.GetHashCode(TriLibCore.Interfaces.ITexture)">
            <summary>
            Generates a hash code for the specified <see cref="T:TriLibCore.Interfaces.ITexture"/> using its short file name or name.
            </summary>
            <param name="a">The texture for which to generate a hash code.</param>
            <returns>
            An integer hash code suitable for use in data structures like hash tables, or zero if <paramref name="a"/> is <see langword="null"/>.
            </returns>
        </member>
        <member name="T:TriLibCore.Utils.TextureUtils">
            <summary>
            Provides a series of utility methods for handling Unity <see cref="T:UnityEngine.Texture"/> objects, 
            including creation, manipulation, channel extraction, and conversion of textures.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.ApplyTexture2D(TriLibCore.TextureLoadingContext,System.Boolean)">
            <summary>
            Uploads the data of a <see cref="T:UnityEngine.Texture2D"/> to the GPU based on the specified <paramref name="textureLoadingContext"/>.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing the Unity texture (if any) and additional options for texture processing.
            </param>
            <param name="procedural">
            A value indicating whether the texture should be treated as procedurally generated.
            If <c>true</c>, the texture will be processed only if ConvertTexturesAs2D is also <c>true</c>; otherwise, non-procedural.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.ApplyTransparency(TriLibCore.TextureLoadingContext,UnityEngine.Texture,UnityEngine.Texture)">
            <summary>
            Applies the alpha/transparency data from a <paramref name="transparencyTexture"/> onto the color data of a <paramref name="diffuseTexture"/>,
            producing a new texture in the <paramref name="textureLoadingContext"/>.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> used to create and store the resulting transparent texture.
            </param>
            <param name="diffuseTexture">The diffuse (color) texture to which transparency will be applied.</param>
            <param name="transparencyTexture">The texture containing transparency or mask data.</param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.BuildMetallicTexture(TriLibCore.TextureLoadingContext,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Color,UnityEngine.Color,System.Single,System.Nullable{System.Single},System.Nullable{System.Single},System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a metallic texture from the specified inputs (diffuse, metallic, specular, glossiness textures, etc.) 
            and stores the result within the <paramref name="textureLoadingContext"/>.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> in which the resulting texture is created and stored.
            </param>
            <param name="diffuseTexture">The diffuse (color) texture.</param>
            <param name="metallicTexture">The texture containing metallic data.</param>
            <param name="specularTexture">The texture containing specular data.</param>
            <param name="glossinessTexture">The texture containing glossiness or roughness data.</param>
            <param name="defaultDiffuse">The default diffuse color, if the diffuse texture is absent or partially defined.</param>
            <param name="defaultSpecular">The default specular color, if the specular texture is absent or partially defined.</param>
            <param name="shininessExponent">The shininess or glossiness exponent for materials.</param>
            <param name="defaultRoughness">
            An optional default roughness value used if no glossiness or roughness texture is present.
            </param>
            <param name="defaultMetallic">
            An optional default metallic value used if no metallic texture is present.
            </param>
            <param name="usingRoughness">
            <see langword="true"/> if the <paramref name="glossinessTexture"/> is actually a roughness map; <see langword="false"/> otherwise.
            </param>
            <param name="mixTextureChannelsWithColors">
            <see langword="true"/> if the color values (diffuse, specular) should be multiplied by the textures' channels;
            <see langword="false"/> to use the textures' channels directly.
            </param>
            <param name="metallicComponentIndex">The channel index in the metallic texture to sample metallic data from.</param>
            <param name="glossinessComponentIndex">The channel index in the glossiness/roughness texture to sample glossiness/roughness data from.</param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.CopyTextureCPU(UnityEngine.RenderTexture,UnityEngine.Texture2D,System.Boolean,System.Boolean)">
            <summary>
            Copies pixel data from a <see cref="T:UnityEngine.RenderTexture"/> to a <see cref="T:UnityEngine.Texture2D"/> on the CPU side.
            </summary>
            <param name="from">The source <see cref="T:UnityEngine.RenderTexture"/>.</param>
            <param name="to">The destination <see cref="T:UnityEngine.Texture2D"/>.</param>
            <param name="updateMipMaps">If <c>true</c>, mipmaps are regenerated.</param>
            <param name="makeNoLongerReadable">
            If <c>true</c>, marks the target texture as not readable, potentially freeing memory.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.CreateTexture2D(TriLibCore.TextureLoadingContext)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Texture2D"/> based on the data in <paramref name="textureLoadingContext"/>,
            if a Unity texture has not already been created or loaded.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing metadata (e.g., width, height) for the new texture.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.ExtractChannelData(System.Int32,TriLibCore.TextureLoadingContext,System.String)">
            <summary>
            Extracts a specific color channel (e.g., R, G, B, A) from the original Untiy texture. 
            and updates Unity texture in the <paramref name="textureLoadingContext"/> with the extracted channel data.
            </summary>
            <param name="channelIndex">The index of the channel to extract (0 for Red, 1 for Green, 2 for Blue, 3 for Alpha).</param>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> that contains the source texture and receives the new texture.
            </param>
            <param name="suffix">
            A string suffix added to the resulting texture's name for clarity (e.g., "_redChannel").
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.FixNormalMap(TriLibCore.TextureLoadingContext)">
            <summary>
            Reorders the channels in a normal map texture if needed, modifying the normal map in place.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing a normal map texture, if applicable.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.FixNPOTTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Rescales a non-power-of-two (NPOT) texture to the nearest power-of-two resolution if necessary,
            applying any desired mipmap generation or compression.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing the texture to be rescaled.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.GetNextPOT(System.Int32)">
            <summary>
            Calculates the next power-of-two value for a given integer, at minimum 1.
            </summary>
            <param name="value">The value to convert to the next power-of-two.</param>
            <returns>The next power-of-two value.</returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.IsValidTextureFileType(System.String)">
            <summary>
            Checks whether a given filename has a known image file extension.
            </summary>
            <param name="filename">The filename to check.</param>
            <returns>
            <see langword="true"/> if the filename extension matches a standard image type; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.LoadTexture2D(TriLibCore.TextureLoadingContext)">
            <summary>
            Loads a texture from the specified <see cref="P:TriLibCore.TextureLoadingContext.Stream"/> using Unity's built-in loader LoadImage.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing the raw data stream and other texture parameters.
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.LoadTexture2DNonAlloc(TriLibCore.TextureLoadingContext)">
            <summary>
            Loads a texture by directly setting pixel data, 
            bypassing Unity's LoadImage method.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> holding raw image data in <see cref="P:TriLibCore.TextureLoadingContext.Data"/>, 
            as well as the texture metadata (width, height, etc.).
            </param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.SpecularDiffuseToAlbedo(TriLibCore.TextureLoadingContext,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Vector4,UnityEngine.Vector4,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Converts a specular workflow texture to an albedo texture by mixing the diffuse and specular channels as needed.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> that will store the newly generated albedo texture.
            </param>
            <param name="diffuseTexture">The original diffuse texture.</param>
            <param name="specularTexture">The specular texture to mix with the diffuse.</param>
            <param name="diffuseColor">The diffuse color if the diffuse texture is missing or partially defined.</param>
            <param name="specularColor">The specular color if the specular texture is missing or partially defined.</param>
            <param name="glossiness">The glossiness level to apply in the mixing.</param>
            <param name="outputBaseColor">
            <see langword="true"/> to generate a base color texture; <see langword="false"/> to generate a metallic-smoothness texture.
            </param>
            <param name="reassign">Not used.</param>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.GetTextureFormat(TriLibCore.TextureLoadingContext)">
            <summary>
            Returns the most appropriate <see cref="T:UnityEngine.TextureFormat"/> based on the metadata in <paramref name="textureLoadingContext"/>.
            </summary>
            <param name="textureLoadingContext">The context describing texture channels and bit depth.</param>
            <returns>A <see cref="T:UnityEngine.TextureFormat"/> suited to the texture data.</returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.CreateTexture2DInternal(TriLibCore.TextureLoadingContext,System.Int32,System.Int32,UnityEngine.Experimental.Rendering.GraphicsFormat,UnityEngine.Experimental.Rendering.TextureCreationFlags,UnityEngine.TextureFormat)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Texture2D"/> using either <see cref="T:UnityEngine.Experimental.Rendering.GraphicsFormat"/> or <see cref="T:UnityEngine.TextureFormat"/>,
            depending on <see cref="F:TriLibCore.AssetLoaderOptions.GetCompatibleTextureFormat"/>.
            </summary>
            <param name="textureLoadingContext">
            The context for the texture loading process, containing flags and other parameters.
            </param>
            <param name="width">The width of the new texture.</param>
            <param name="height">The height of the new texture.</param>
            <param name="graphicsFormat">The <see cref="T:UnityEngine.Experimental.Rendering.GraphicsFormat"/> to use if <c>GetCompatibleTextureFormat</c> is enabled.</param>
            <param name="textureCreationFlags">The set of <see cref="T:UnityEngine.Experimental.Rendering.TextureCreationFlags"/> to apply to the new texture.</param>
            <param name="textureFormat">
            A <see cref="T:UnityEngine.TextureFormat"/> fallback for creating the texture if 
            <c>GetCompatibleTextureFormat</c> is not enabled.
            </param>
            <returns>A newly created <see cref="T:UnityEngine.Texture2D"/>.</returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.GetGraphicsFormat(TriLibCore.TextureLoadingContext,UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Retrieves the appropriate <see cref="T:UnityEngine.Experimental.Rendering.GraphicsFormat"/> for the given <paramref name="textureFormat"/>,
            optionally enabling sRGB if <paramref name="sRGB"/> is <c>true</c>.
            </summary>
            <param name="textureLoadingContext">
            The context used to track the number of channels. If the chosen <see cref="T:UnityEngine.Experimental.Rendering.GraphicsFormat"/> 
            includes alpha and <see cref="P:TriLibCore.TextureLoadingContext.Components"/> is less than 4, it is updated to 4.
            </param>
            <param name="textureFormat">The <see cref="T:UnityEngine.TextureFormat"/> to convert from.</param>
            <param name="sRGB">Whether to use an sRGB format, if possible.</param>
            <returns>The <see cref="T:UnityEngine.Experimental.Rendering.GraphicsFormat"/> that matches the given parameters.</returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.GetRenderTextureFormat(UnityEngine.TextureFormat,System.Boolean)">
            <summary>
            Converts a given <see cref="T:UnityEngine.TextureFormat"/> into a <see cref="T:UnityEngine.RenderTextureFormat"/>.
            </summary>
            <param name="textureFormat">The original texture format.</param>
            <param name="sRGB">Specifies whether sRGB should be used.</param>
            <returns>A corresponding <see cref="T:UnityEngine.RenderTextureFormat"/>.</returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.GetTextureCreationFlags(TriLibCore.TextureLoadingContext,System.Boolean)">
            <summary>
            Calculates the <see cref="T:UnityEngine.Experimental.Rendering.TextureCreationFlags"/> for the new texture, 
            based on mipmap generation, power-of-two constraints, and other factors.
            </summary>
            <param name="textureLoadingContext">
            The context containing the import options and texture metadata.
            </param>
            <param name="forceMipMap">
            If <c>true</c>, always enables mip chain generation, regardless of other factors.
            </param>
            <returns>The computed <see cref="T:UnityEngine.Experimental.Rendering.TextureCreationFlags"/>.</returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.CanCompress(TriLibCore.TextureLoadingContext)">
            <summary>
            Determines if the specified texture can be compressed, checking if both width and height are multiples of 4.
            </summary>
            <param name="textureLoadingContext">The context containing the texture width and height.</param>
            <returns>
            <see langword="true"/> if width and height are multiples of 4; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.IsNormalMapTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Checks if the given texture is a normal map based on its specified <see cref="T:TriLibCore.General.TextureType"/> or TextureFormat.
            </summary>
            <param name="textureLoadingContext">The context describing texture types and formats.</param>
            <returns>
            <see langword="true"/> if the texture is determined to be a normal map; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.IsPOT(TriLibCore.TextureLoadingContext)">
            <summary>
            Checks if the dimensions stored in <paramref name="textureLoadingContext"/> represent a power-of-two (POT) texture.
            </summary>
            <param name="textureLoadingContext">The context containing texture dimensions.</param>
            <returns><see langword="true"/> if both width and height are power-of-two; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.IsPOT(System.Int32)">
            <summary>
            Checks if an integer is a power-of-two.
            </summary>
            <param name="value">The integer to evaluate.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is a power-of-two; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.IsSRGBTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Determines if a texture should be treated as sRGB based on its type and the <see cref="F:TriLibCore.AssetLoaderOptions.LoadTexturesAsSRGB"/> option.
            Normal maps are never treated as sRGB.
            </summary>
            <param name="textureLoadingContext">The texture context to evaluate.</param>
            <returns>
            <see langword="true"/> if sRGB should be used; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.TextureUtils.GetValidName(TriLibCore.TextureLoadingContext)">
            <summary>
            Retrieves a valid name for the texture, falling back to the material name if none is available.
            </summary>
            <param name="textureLoadingContext">The context containing texture and material data.</param>
            <returns>A valid, non-empty string to use as a texture name.</returns>
        </member>
        <member name="T:TriLibCore.Utils.ThreadUtils">
            <summary>
            Provides utility methods for creating and managing threads (or tasks) in TriLib, 
            offering asynchronous execution, error handling, cancellation, and progress reporting.
            </summary>
        </member>
        <member name="M:TriLibCore.Utils.ThreadUtils.RequestNewThreadFor``1(``0,System.Action{``0},System.Action{``0},System.Action{TriLibCore.IContextualizedError},System.Int32,System.String,System.Boolean,System.Action{``0})">
            <summary>
            Starts a new task (thread) to execute <paramref name="onStart"/> using the provided <typeparamref name="T"/> context. 
            If the AssetLoaderContext Async property is <c>false</c>, 
            this method will execute <paramref name="onStart"/> synchronously on the main thread.
            </summary>
            <typeparam name="T">A class type that implements <see cref="T:TriLibCore.Interfaces.IAssetLoaderContext"/>, representing the thread's shared context.</typeparam>
            <param name="context">The context which will be passed to the <paramref name="onStart"/> action.</param>
            <param name="onStart">The action to execute on a background thread (if asynchronous) or on the main thread (if synchronous).</param>
            <param name="onComplete">
            An optional action to call on the main thread once <paramref name="onStart"/> completes.
            If <c>null</c>, no completion action is invoked.
            </param>
            <param name="onError">
            An optional action to call on the main thread if an exception occurs. 
            If not provided, the error is rethrown on the main thread as a <see cref="T:TriLibCore.General.ContextualizedError`1"/>.
            </param>
            <param name="timeout">The thread timeout in seconds. If nonzero, the operation is canceled after this duration.</param>
            <param name="name">An optional name for the worker thread.</param>
            <param name="startImmediately">
            <see langword="true"/> to start the task immediately; <see langword="false"/> to create it without starting.
            </param>
            <param name="onCompleteSameThread">
            An optional action to execute on the worker thread immediately after <paramref name="onStart"/> finishes, 
            and before <paramref name="onComplete"/> (which is invoked on the main thread).
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation if AssetLoaderContext Async is <c>true</c>;
            otherwise, <c>null</c> if executed synchronously on the main thread.
            </returns>
        </member>
        <member name="M:TriLibCore.Utils.ThreadUtils.RunThreadSimple(System.Action,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Starts a lightweight task on a new thread, optionally waiting before execution and without 
            specifying a context, completion callback, or error callback.
            </summary>
            <param name="onStart">The action to execute on the new thread.</param>
            <param name="timeout">
            The thread timeout in seconds, not currently applied. Provided for API consistency.
            </param>
            <param name="name">An optional name for the thread.</param>
            <param name="startImmediately">
            <see langword="true"/> to start the task immediately; <see langword="false"/> to create it without starting.
            </param>
            <param name="waitMilliseconds">The delay in milliseconds before <paramref name="onStart"/> is executed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the new thread.</returns>
        </member>
        <member name="M:TriLibCore.Utils.ThreadUtils.RunThread``1(``0,System.Threading.CancellationToken@,System.Action{``0},System.Action{``0},System.Action{TriLibCore.IContextualizedError},System.Int32,System.String,System.Boolean)">
            <summary>
            Starts a new task on a background thread using the specified context <typeparamref name="T"/> 
            and a <paramref name="cancellationToken"/>. Once execution completes (or fails), the optional <paramref name="onComplete"/> 
            or <paramref name="onError"/> will be invoked on the main thread.
            </summary>
            <typeparam name="T">
            The context type that implements <see cref="T:TriLibCore.Interfaces.IAssetLoaderContext"/>; 
            it is passed to <paramref name="onStart"/> and other callbacks.
            </typeparam>
            <param name="context">The asset loader context on which this thread operation should act.</param>
            <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken"/> that can be used to halt the operation if canceled. 
            If <c>None</c>, a new token is created with an optional timeout.
            </param>
            <param name="onStart">The action to execute on the new thread.</param>
            <param name="onComplete">
            An optional action invoked on the main thread once <paramref name="onStart"/> completes.
            </param>
            <param name="onError">
            An optional action invoked on the main thread if an exception occurs. 
            If not specified, the error is rethrown on the main thread as a <see cref="T:TriLibCore.General.ContextualizedError`1"/>.
            </param>
            <param name="timeout">The thread timeout in seconds. If nonzero, the task is canceled after this duration.</param>
            <param name="name">An optional name for the thread.</param>
            <param name="startImmediately">
            <see langword="true"/> to start the task immediately; <see langword="false"/> to create it without starting.
            </param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that was created, possibly not started if <paramref name="startImmediately"/> is <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.Utils.ThreadUtils.ReThrow(TriLibCore.IContextualizedError)">
            <summary>
            Rethrows the specified <see cref="T:TriLibCore.IContextualizedError"/> on the main thread by throwing its inner exception.
            </summary>
            <param name="contextualizedError">The error containing the context and exception.</param>
        </member>
        <member name="T:TriLibCore.MaterialMapperContext">
            <summary>
            Acts as a container for data used when converting a TriLib <see cref="T:TriLibCore.Interfaces.IMaterial"/> 
            into a Unity <see cref="F:TriLibCore.MaterialMapperContext.Material"/>. This includes both the original material information,
            an intermediate <see cref="F:TriLibCore.MaterialMapperContext.VirtualMaterial"/> representation, and the final Unity 
            material reference, all of which are coordinated by a corresponding <see cref="F:TriLibCore.MaterialMapperContext.MaterialMapper"/>.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialMapperContext.Material">
            <summary>
            The original <see cref="T:TriLibCore.Interfaces.IMaterial"/> source data, extracted from the loaded model.
            This object contains property values (e.g., texture references, color properties) 
            that the <see cref="F:TriLibCore.MaterialMapperContext.MaterialMapper"/> can process.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialMapperContext.VirtualMaterial">
            <summary>
            A “virtual” material object that stores property values (colors, textures, floats, keywords)
            used to build the final <see cref="F:TriLibCore.MaterialMapperContext.UnityMaterial"/>. This intermediate stage allows 
            for layering or composition of multiple properties before applying them to the actual material.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialMapperContext.UnityMaterial">
            <summary>
            The final Unity material instance after the mapper has assigned textures and property values.
            This is usually created by instantiating a preset (e.g., a built-in TriLib material) 
            or a custom pipeline material, then applying <see cref="F:TriLibCore.MaterialMapperContext.VirtualMaterial"/> properties.
            </summary>
        </member>
        <member name="P:TriLibCore.MaterialMapperContext.Context">
            <summary>
            Gets or sets the <see cref="T:TriLibCore.AssetLoaderContext"/> that contains the overall data 
            (e.g., root <see cref="T:UnityEngine.GameObject"/>, import options, callbacks) for the current model loading process.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialMapperContext.AlphaMaterial">
            <summary>
            Optional reference to an “alpha” material used for situations where a second pass is needed 
            to render partially transparent geometry. For example, if <see cref="F:TriLibCore.AssetLoaderOptions.AlphaMaterialMode"/> 
            is set to <c>CutoutAndTransparent</c>, this field might hold a secondary material for layered blending.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialMapperContext.MaterialMapper">
            <summary>
            The <see cref="F:TriLibCore.MaterialMapperContext.MaterialMapper"/> instance responsible for converting 
            the TriLib <see cref="T:TriLibCore.Interfaces.IMaterial"/> to the final Unity <see cref="F:TriLibCore.MaterialMapperContext.Material"/>. 
            This reference is useful if additional mapper-specific logic or settings are needed 
            during or after processing.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialMapperContext.Index">
            <summary>
            The zero-based index of this material among all parsed materials in the loaded model,
            which can be useful for tracking or referencing the original material order.
            </summary>
        </member>
        <member name="P:TriLibCore.MaterialMapperContext.Completed">
            <summary>
            Indicates whether material processing is finished. This can be <c>false</c> if 
            asynchronous texture loading or other operations are still ongoing, 
            or <c>true</c> if <see cref="F:TriLibCore.MaterialMapperContext.UnityMaterial"/> is fully assigned and ready.
            </summary>
        </member>
        <member name="T:TriLibCore.MaterialRendererContext">
            <summary>
            Holds contextual information for assigning a TriLib-supplied <see cref="T:TriLibCore.Interfaces.IMaterial"/> 
            to a specific Unity <see cref="F:TriLibCore.MaterialRendererContext.Renderer"/> at a particular sub-mesh index. 
            This class also references the corresponding <see cref="P:TriLibCore.MaterialRendererContext.MaterialMapperContext"/> 
            and the broader <see cref="T:TriLibCore.AssetLoaderContext"/> to unify data during material application.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialRendererContext.Renderer">
            <summary>
            The Unity <see cref="F:TriLibCore.MaterialRendererContext.Renderer"/> (e.g., <see cref="T:UnityEngine.MeshRenderer"/>, 
            <see cref="T:UnityEngine.SkinnedMeshRenderer"/>) that will receive the final material assignment.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialRendererContext.GeometryIndex">
            <summary>
            The sub-mesh index within the <see cref="F:TriLibCore.MaterialRendererContext.Renderer"/> 
            that should be assigned the final Unity <see cref="F:TriLibCore.MaterialRendererContext.Material"/>. 
            This corresponds to a geometry slot in the mesh.
            </summary>
        </member>
        <member name="F:TriLibCore.MaterialRendererContext.Material">
            <summary>
            The original TriLib <see cref="T:TriLibCore.Interfaces.IMaterial"/> object that contains
            surface properties (e.g., textures, colors) to be mapped or converted 
            into a Unity <see cref="F:TriLibCore.MaterialRendererContext.Material"/>.
            </summary>
        </member>
        <member name="P:TriLibCore.MaterialRendererContext.Context">
            <summary>
            Reference to the <see cref="T:TriLibCore.AssetLoaderContext"/> which holds the overarching model 
            loading details. This includes references to loaded <see cref="T:UnityEngine.GameObject"/>s, 
            import settings, tasks, and callbacks.
            </summary>
        </member>
        <member name="P:TriLibCore.MaterialRendererContext.MaterialMapperContext">
            <summary>
            Reference to the <see cref="P:TriLibCore.MaterialRendererContext.MaterialMapperContext"/> that is managing the conversion 
            of this TriLib <see cref="T:TriLibCore.Interfaces.IMaterial"/> into a Unity <see cref="F:TriLibCore.MaterialRendererContext.Material"/>. 
            This object stores intermediate data.
            </summary>
        </member>
        <member name="P:TriLibCore.MaterialRendererContext.Mesh">
            <summary>
            The specific <see cref="P:TriLibCore.MaterialRendererContext.Mesh"/> (or <see cref="P:UnityEngine.MeshFilter.mesh"/> / <see cref="P:UnityEngine.SkinnedMeshRenderer.sharedMesh"/>)
            to which this material is being applied. This reference can be null if not required 
            by the mapper logic (e.g., for blend shape or multi-pass scenarios).
            </summary>
        </member>
        <member name="P:TriLibCore.MaterialRendererContext.Completed">
            <summary>
            Indicates whether the material application has completed. 
            Can be <c>false</c> if asynchronous texture loading or other tasks are still in progress.
            </summary>
        </member>
        <member name="T:TriLibCore.TextureDataContext">
            <summary>
            Contains data and state information for loading and processing a texture 
            during a TriLib model import. This context stores both the original source texture 
            data and the resulting Unity texture, along with relevant metadata.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.Texture">
            <summary>
            The original texture as defined by the source model.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.OriginalUnityTexture">
            <summary>
            The Unity texture created from the source data.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.Width">
            <summary>
            The width of the texture (in pixels).
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.Height">
            <summary>
            The height of the texture (in pixels).
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.Stream">
            <summary>
            The original data stream for the texture.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.Components">
            <summary>
            The number of color components in the source image.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.HasAlpha">
            <summary>
            Indicates whether the source texture uses its alpha channel.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.TextureLoaded">
            <summary>
            Indicates whether the Unity texture has been successfully loaded.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureDataContext.TextureCreated">
            <summary>
            Indicates whether the Unity texture has been created.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureDataContext.Completed">
            <summary>
            Gets or sets a value indicating whether the texture loading process is complete.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureDataContext.Context">
            <summary>
            Gets or sets the <see cref="T:TriLibCore.AssetLoaderContext"/> that contains the overall model loading data.
            </summary>
        </member>
        <member name="T:TriLibCore.TextureLoadingContext">
            <summary>
            Contains data and state information for loading and processing a texture as part
            of TriLib's model import pipeline. This context holds both the source texture data
            (via <see cref="F:TriLibCore.TextureLoadingContext.TextureDataContext"/>) and metadata (dimensions, component count, raw data)
            used to create a Unity <see cref="P:TriLibCore.TextureLoadingContext.Texture"/>.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.TextureType">
            <summary>
            Gets or sets the type of texture being loaded (e.g., Diffuse, Normal, Specular).
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.TextureDataContext">
            <summary>
            Gets or sets the <see cref="F:TriLibCore.TextureLoadingContext.TextureDataContext"/> that stores the original texture
            data, including the source <see cref="T:TriLibCore.Interfaces.ITexture"/>, dimensions, raw stream, and component count.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.MaterialMapperContext">
            <summary>
            Gets or sets the <see cref="F:TriLibCore.TextureLoadingContext.MaterialMapperContext"/> associated with this texture load.
            This context holds references to the virtual material and other material-specific properties.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.TextureProcessed">
            <summary>
            Indicates whether the texture has been processed.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Completed">
            <summary>
            Gets or sets a value indicating whether the texture loading process has completed.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Context">
            <summary>
            Gets or sets the <see cref="T:TriLibCore.AssetLoaderContext"/> containing the overall model loading data.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Texture">
            <summary>
            Gets or sets the TriLib <see cref="T:TriLibCore.Interfaces.ITexture"/> reference stored in the 
            <see cref="F:TriLibCore.TextureLoadingContext.TextureDataContext"/>.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.UnityTexture">
            <summary>
            Gets or sets the Unity texture instance that will eventually be created from the loaded data.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Stream">
            <summary>
            Gets or sets the source stream for the texture data, stored in the underlying <see cref="F:TriLibCore.TextureLoadingContext.TextureDataContext"/>.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.CreationBytesPerPixel">
            <summary>
            (Obsolete) The number of bytes per pixel used during texture creation.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.CreationBitsPerChannel">
            <summary>
            Gets or sets the number of bits per channel (e.g., 8 or 16) from the original image data.
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.RawData">
            <summary>
            Gets or sets the raw texture data as an array of bytes, which can be used
            to bypass the standard TriLib image loaders.
            <remarks>
            When setting this field, ensure that the corresponding "Width", "Height", "Components", 
            and "CreationBitsPerChannel" fields are also filled.
            </remarks>
            </summary>
        </member>
        <member name="F:TriLibCore.TextureLoadingContext.ByteData">
            <summary>
            The texture data coming from StbImage.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Has8BPC">
            <summary>
            Gets a value indicating whether the texture data is 8 bits per channel.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Has16BPC">
            <summary>
            Gets a value indicating whether the texture data is 16 bits per channel.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Data16">
            <summary>
            Gets the 16-bit raw texture data from the Unity texture when it has an RGBA16 format.
            If the texture is not 16 bits per channel, returns the default value.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Data">
            <summary>
            Gets the 8-bit raw texture data from the Unity texture when it has an RGBA8 format.
            If the texture is not 8 bits per channel, returns the default value.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.HasAlpha">
            <summary>
            Gets or sets a value indicating whether the source texture uses its alpha channel.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.TextureLoaded">
            <summary>
            Gets or sets a value indicating whether the Unity texture has been successfully loaded.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Width">
            <summary>
            Gets or sets the width of the texture in pixels.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Height">
            <summary>
            Gets or sets the height of the texture in pixels.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.Components">
            <summary>
            Gets or sets the number of color components in the texture (e.g., 3 for RGB or 4 for RGBA).
            If <see cref="F:TriLibCore.AssetLoaderOptions.UseUnityNativeTextureLoader"/> is false and 
            <see cref="F:TriLibCore.AssetLoaderOptions.EnforceAlphaChannelTextures"/> is true, returns 4.
            Otherwise, it returns the value from <see cref="F:TriLibCore.TextureDataContext.Components"/>.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.OriginalUnityTexture">
            <summary>
            Gets or sets the original Unity texture created from the loaded texture data.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.TextureCreated">
            <summary>
            Gets or sets a value indicating whether the Unity texture has been created.
            </summary>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.HasValidEmbeddedDataStream">
            <summary>
            Gets a value indicating whether the texture embedded data stream is valid.
            </summary>
            <remarks>
            A stream is considered valid if it is not <c>null</c>, can be read, and has a length greater than zero.
            </remarks>
        </member>
        <member name="P:TriLibCore.TextureLoadingContext.HasValidData">
            <summary>
            Gets a value indicating whether either a texture stream or raw texture data is available.
            </summary>
        </member>
        <member name="M:TriLibCore.TextureLoadingContext.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TriLibCore.TextureLoadingContext"/> class.
            </summary>
            <param name="createTextureData">
            If <c>true</c>, a new <see cref="F:TriLibCore.TextureLoadingContext.TextureDataContext"/> is created and assigned; 
            otherwise, it remains uninitialized.
            </param>
        </member>
        <member name="T:TriLibCore.Extensions.AnimationCurveExtensions">
            <summary>
            Provides extension methods to facilitate working with <see cref="T:UnityEngine.AnimationCurve"/> objects.
            </summary>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationCurveExtensions.AutoClampedTangents(UnityEngine.AnimationCurve)">
            <summary>
            Automatically adjusts each key's tangents in the provided <see cref="T:UnityEngine.AnimationCurve"/>.
            <para>
            If the value of a keyframe is outside the range defined by its neighboring keyframes,
            the in/out tangents for that key will be set to 0 (flat). Otherwise, an automatically
            computed tangent is assigned.
            </para>
            </summary>
            <param name="animationCurve">
            The <see cref="T:UnityEngine.AnimationCurve"/> whose key tangents will be adjusted.
            </param>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationCurveExtensions.GetInTangentLinear(UnityEngine.Keyframe,UnityEngine.Keyframe)">
            <summary>
            Calculates the linear in-tangent of the current <paramref name="thisKey"/> based on a previous <paramref name="prevKey"/>.
            </summary>
            <param name="thisKey">The current keyframe.</param>
            <param name="prevKey">The previous keyframe.</param>
            <returns>The linear in-tangent value.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationCurveExtensions.GetOutTangentLinear(UnityEngine.Keyframe,UnityEngine.Keyframe)">
            <summary>
            Calculates the linear out-tangent of the current <paramref name="thisKey"/> based on the next <paramref name="nextKey"/>.
            </summary>
            <param name="nextKey">The next keyframe.</param>
            <param name="thisKey">The current keyframe.</param>
            <returns>The linear out-tangent value.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationCurveExtensions.GetTangentAuto(UnityEngine.Keyframe,UnityEngine.Keyframe,UnityEngine.Keyframe,System.Int32,System.Int32)">
            <summary>
            Calculates an "auto" tangent for the current <paramref name="thisKey"/>, given the previous and next keyframes.
            <para>
            If <paramref name="index"/> is 0 or the last key in <paramref name="count"/>, then the tangent is returned
            as a linear out-tangent. Otherwise, an average slope is calculated.
            </para>
            </summary>
            <param name="nextKey">The next keyframe.</param>
            <param name="prevKey">The previous keyframe.</param>
            <param name="thisKey">The current keyframe.</param>
            <param name="index">The index of the current keyframe in the curve.</param>
            <param name="count">The total number of keyframes in the curve.</param>
            <returns>An automatically computed tangent value.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationCurveExtensions.SetTangents(UnityEngine.AnimationCurve,TriLibCore.General.TangentMode)">
            <summary>
            Sets the tangents of the given <see cref="T:UnityEngine.AnimationCurve"/> to the specified <paramref name="mode"/>.
            <para>
            The first and last key tangents are set to 0 to ensure a smooth start/end. Intermediate keys
            are set based on the chosen <see cref="T:TriLibCore.General.TangentMode"/>: Linear or Stepped.
            </para>
            </summary>
            <param name="animationCurve">The <see cref="T:UnityEngine.AnimationCurve"/> to modify.</param>
            <param name="mode">The desired <see cref="T:TriLibCore.General.TangentMode"/>.</param>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationCurveExtensions.AddQuaternionKeyframe(TriLibCore.AssetLoaderContext,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.Keyframe,UnityEngine.Keyframe,UnityEngine.Keyframe,UnityEngine.Keyframe)">
            <summary>
            Adds a new keyframe representing a <see cref="T:UnityEngine.Quaternion"/> to four separate <see cref="T:UnityEngine.AnimationCurve"/> objects
            (for <c>X</c>, <c>Y</c>, <c>Z</c>, and <c>W</c>), potentially simplifying by merging keyframes if the error falls
            below a certain threshold.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing the <see cref="T:TriLibCore.AssetLoaderOptions"/> which define thresholds
            and settings for simplification.
            </param>
            <param name="animationCurveX">The <see cref="T:UnityEngine.AnimationCurve"/> for the <c>X</c> component.</param>
            <param name="animationCurveY">The <see cref="T:UnityEngine.AnimationCurve"/> for the <c>Y</c> component.</param>
            <param name="animationCurveZ">The <see cref="T:UnityEngine.AnimationCurve"/> for the <c>Z</c> component.</param>
            <param name="animationCurveW">The <see cref="T:UnityEngine.AnimationCurve"/> for the <c>W</c> component.</param>
            <param name="keyframeX">The keyframe for the <c>X</c> component.</param>
            <param name="keyframeY">The keyframe for the <c>Y</c> component.</param>
            <param name="keyframeZ">The keyframe for the <c>Z</c> component.</param>
            <param name="keyframeW">The keyframe for the <c>W</c> component.</param>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationCurveExtensions.AddVectorKeyframe(UnityEngine.AnimationCurve,TriLibCore.AssetLoaderContext,UnityEngine.Keyframe,System.Boolean)">
            <summary>
            Adds a new <paramref name="newKeyframe"/> to the <paramref name="animationCurve"/> representing a single
            component of a vector (e.g., x, y, or z position or scale). Potentially merges it with the previous keyframe
            if the error is below the defined threshold.
            </summary>
            <param name="animationCurve">
            The <see cref="T:UnityEngine.AnimationCurve"/> to which the keyframe will be added (or merged).
            </param>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing thresholds and other settings.
            </param>
            <param name="newKeyframe">The new <see cref="T:UnityEngine.Keyframe"/> to be added or used to merge.</param>
            <param name="isScale">
            Indicates whether this keyframe represents a scale component. Determines whether
            <see cref="F:TriLibCore.AssetLoaderOptions.ScaleThreshold"/> or <see cref="F:TriLibCore.AssetLoaderOptions.PositionThreshold"/> is used.
            </param>
        </member>
        <member name="T:TriLibCore.Extensions.AnimationExtensions">
            <summary>Represents a series of Animation extension methods.</summary>
        </member>
        <member name="M:TriLibCore.Extensions.AnimationExtensions.GetAllAnimationClips(UnityEngine.Animation)">
            <summary>Gets all Animation Clips  from the given Animation Component.</summary>
            <param name="animation">The Animation Component containing the Animation Clips.</param>
            <returns>The animation clips from the given animation component.</returns>
        </member>
        <member name="T:TriLibCore.Extensions.CameraExtensions">
            <summary>Represents a series of Camera extension methods.</summary>
        </member>
        <member name="M:TriLibCore.Extensions.CameraExtensions.FitToBounds(UnityEngine.Camera,UnityEngine.GameObject,System.Single)">
            <summary>Frames the given Camera on the given Game Object Bounds.</summary>
            <param name="camera">The Camera to adjust to the Bounds.</param>
            <param name="gameObject">The Game Object to frame.</param>
            <param name="distance">The distance to keep from Game Object center.</param>
        </member>
        <member name="M:TriLibCore.Extensions.CameraExtensions.FitToBounds(UnityEngine.Camera,UnityEngine.Bounds,System.Single)">
            <summary>Frames the given Camera on the given Bounds.</summary>
            <param name="camera">The Camera to adjust to the Bounds.</param>
            <param name="bounds">The Bounds to frame.</param>
            <param name="distance">The distance to keep from Bounds center.</param>
        </member>
        <member name="M:TriLibCore.Extensions.CameraExtensions.FitToBounds(UnityEngine.Camera,UnityEngine.Bounds,UnityEngine.Quaternion,System.Single)">
            <summary>Frames the given Camera on the given Bounds.</summary>
            <param name="camera">The Camera to adjust to the Bounds.</param>
            <param name="bounds">The Bounds to frame.</param>
            <param name="rotation">The rotation to arc-rotate the the Camera relative to the Bounds center.</param>
            <param name="distance">The distance to keep from Bounds center.</param>
        </member>
        <member name="T:TriLibCore.Extensions.DictionaryExtensions">
            <summary>
            Represents a series of Dictionary extension methods.
            </summary>
        </member>
        <member name="M:TriLibCore.Extensions.DictionaryExtensions.TryGetValueSafe``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            Tries to get a value in the given Dictionary without throwing Exceptions.
            </summary>
            <typeparam name="TKey">The Dictionary Key type.</typeparam>
            <typeparam name="TValue">The Dictionary Value type.</typeparam>
            <param name="dictionary">The Dictionary.</param>
            <param name="key">The Dictionary key.</param>
            <param name="value">The Dictionary value.</param>
            <returns><c>true</c> if the given Key is found. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TriLibCore.Extensions.GameObjectExtensions">
            <summary>Represents a series of Game Object extension methods.</summary>
        </member>
        <member name="M:TriLibCore.Extensions.GameObjectExtensions.SampleBindPose(UnityEngine.GameObject)">
            <summary>
            Moves the bones in the object hierarchy to their binding poses.
            </summary>
            <param name="gameObject">The hierarchy root.</param>
        </member>
        <member name="M:TriLibCore.Extensions.GameObjectExtensions.CalculatePreciseBounds(UnityEngine.GameObject)">
            <summary>
            Calculates the precise Bounds (including Meshes) of the given GameObject.
            </summary>
            <param name="gameObject">The GameObject used to calculate the Bounds.</param>
            <returns>The calculated Bounds.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.GameObjectExtensions.GetMeshBounds(UnityEngine.GameObject,UnityEngine.Mesh)">
            <summary>
            Returns bounds using the given Mesh vertices multiplied by the given GameObject Transform.
            </summary>
            <param name="gameObject">The GameObject to get the bounds from.</param>
            <param name="mesh">The Mesh to be transformed by the GameObject transform.</param>
            <returns>The transformed Bounds.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.GameObjectExtensions.CalculateBounds(UnityEngine.GameObject,System.Boolean)">
            <summary>Calculates this Game Object Bounds.</summary>
            <param name="gameObject">The GameObject to calculate the Bounds.</param>
            <param name="localSpace">Pass <c>true</c> to calculate the Bounds in local space.</param>
            <returns>The calculated Bounds.</returns>
        </member>
        <member name="T:TriLibCore.Extensions.IObjectExtensions">
            <summary>
            Provides extension methods for disposing objects that may or may not implement <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:TriLibCore.Extensions.IObjectExtensions.TryToDispose``1(System.Object)">
            <summary>
            Attempts to dispose the specified <paramref name="obj"/> if it implements <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="T">The type parameter representing the object's value type.</typeparam>
            <param name="obj">The object to attempt disposing.</param>
            <remarks>
            If <paramref name="obj"/> does not implement <see cref="T:System.IDisposable"/>, this method will do nothing.
            No exception will be thrown if the cast to <see cref="T:System.IDisposable"/> fails.
            </remarks>
        </member>
        <member name="M:TriLibCore.Extensions.IObjectExtensions.TryToDispose``1(System.Collections.Generic.IList{``0})">
            <summary>
            Attempts to dispose the specified <see cref="T:System.Collections.Generic.IList`1"/> if it implements <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="T">The type parameter representing the items of the list.</typeparam>
            <param name="obj">The <see cref="T:System.Collections.Generic.IList`1"/> to attempt disposing.</param>
            <remarks>
            If <paramref name="obj"/> does not implement <see cref="T:System.IDisposable"/>, this method will do nothing.
            No exception will be thrown if the cast to <see cref="T:System.IDisposable"/> fails.
            </remarks>
        </member>
        <member name="T:TriLibCore.Extensions.MatrixExtensions">
            <summary>Represents a series of Matrix extension methods.</summary>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.Decompose(UnityEngine.Matrix4x4,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@)">
            <summary>
            Decomposes the given Matrix4x4 into TRS values.
            </summary>
            <param name="matrix">The Matrix4x4 to be decomposed.</param>
            <param name="position">The decomposed position.</param>
            <param name="rotation">The decomposed rotation.</param>
            <param name="scale">The decomposed scale.</param>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.DecomposeSimple(UnityEngine.Matrix4x4,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@)">
            <summary>
            Decomposes the given Matrix4x4 into TRS values using simpler methods.
            </summary>
            <param name="matrix">The Matrix4x4 to be decomposed.</param>
            <param name="position">The decomposed position.</param>
            <param name="rotation">The decomposed rotation.</param>
            <param name="scale">The decomposed scale.</param>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.FitToBounds(System.Single,UnityEngine.Bounds,System.Single)">
            <summary>Creates a Matrix to frame the given Bounds.</summary>
            <param name="fov">The view field-of-view.</param>
            <param name="bounds">The Bounds to frame.</param>
            <param name="distance">The distance to keep from Game Object center.</param>
            <returns>The framed Matrix.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.GetMatrixPosition(UnityEngine.Matrix4x4)">
            <summary>Extracts the position from this Matrix.</summary>
            <param name="m">The source Matrix.</param>
            <returns>The extracted position.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.GetMatrixPositionSimple(UnityEngine.Matrix4x4)">
            <summary>
            Extracts the position from this Matrix.
            </summary>
            <param name="m">The source Matrix.</param>
            <returns>The extracted position.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.GetMatrixRotation(UnityEngine.Matrix4x4,System.Boolean,System.Nullable{UnityEngine.Vector3})">
            <summary>Extracts the rotation from this Matrix.</summary>
            <param name="m">The source Matrix.</param>
            <param name="ignoreScale">Turn on this field to ignore the scale fixing algorithm.</param>
            <param name="scale">The original Matrix scale.</param>
            <returns>The extracted rotation</returns>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.GetMatrixScale(UnityEngine.Matrix4x4)">
            <summary>Extracts the scale from this Matrix.</summary>
            <param name="m">The source Matrix.</param>
            <returns>The extracted scale</returns>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.IsNegative(UnityEngine.Matrix4x4)">
            <summary>
            Indicates whether the given Matrix4x4 scale is negative.
            </summary>
            <param name="m">The Matrix4x4 to check the scale from.</param>
            <returns><c>true</c> if any matrix scale component is negative.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.MatrixExtensions.GetQuaternionFromMatrix(UnityEngine.Matrix4x4)">
            <summary>
            Converts a Matrix4x4 to a Quaternion.
            </summary>
            <param name="m">The Matrix4x4 to be converted.</param>
            <returns>The converted Quaternion.</returns>
        </member>
        <member name="T:TriLibCore.Extensions.ModelExtensions">
            <summary>
            Provides extension methods to facilitate various operations on <see cref="T:TriLibCore.Interfaces.IModel"/> objects,
            such as calculating transforms, retrieving bones, sorting children, and adjusting pivots.
            </summary>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.GetLocalMatrix(TriLibCore.Interfaces.IModel)">
            <summary>
            Computes the local transformation matrix for this model using its
            <see cref="P:TriLibCore.Interfaces.IModel.LocalPosition"/>, <see cref="P:TriLibCore.Interfaces.IModel.LocalRotation"/>, and <see cref="P:TriLibCore.Interfaces.IModel.LocalScale"/>.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> to compute the local matrix for.</param>
            <returns>
            A <see cref="T:UnityEngine.Matrix4x4"/> representing the local position, rotation, and scale of the model.
            </returns>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.GetGlobalMatrix(TriLibCore.Interfaces.IModel)">
            <summary>
            Computes the global transformation matrix for this model by concatenating its
            <see cref="M:TriLibCore.Extensions.ModelExtensions.GetLocalMatrix(TriLibCore.Interfaces.IModel)"/> with its parent's global matrix (and so on up the hierarchy).
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> to compute the global matrix for.</param>
            <returns>
            A <see cref="T:UnityEngine.Matrix4x4"/> representing the global position, rotation, and scale of the model
            relative to the world.
            </returns>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.GetLocalMatrixNoScale(TriLibCore.Interfaces.IModel)">
            <summary>
            Computes the local transformation matrix for this model using its
            <see cref="P:TriLibCore.Interfaces.IModel.LocalPosition"/> and <see cref="P:TriLibCore.Interfaces.IModel.LocalRotation"/>, but without scale.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> to compute the local matrix for.</param>
            <returns>
            A <see cref="T:UnityEngine.Matrix4x4"/> representing the local position and rotation of the model with a uniform scale of 1.
            </returns>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.GetGlobalMatrixNoScale(TriLibCore.Interfaces.IModel)">
            <summary>
            Computes the global transformation matrix for this model by concatenating its
            <see cref="M:TriLibCore.Extensions.ModelExtensions.GetLocalMatrixNoScale(TriLibCore.Interfaces.IModel)"/> with its parent's global matrix (and so on up the hierarchy),
            ignoring scale.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> to compute the global matrix for.</param>
            <returns>
            A <see cref="T:UnityEngine.Matrix4x4"/> representing the global position and rotation of the model relative to the world,
            ignoring scaling.
            </returns>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.GetGlobalParentMatrix(TriLibCore.Interfaces.IModel)">
            <summary>
            Computes the global transformation matrix for the parent of this model.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> whose parent hierarchy matrix is computed.</param>
            <returns>A <see cref="T:UnityEngine.Matrix4x4"/> representing the parent's global matrix.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.GetBones(TriLibCore.Interfaces.IModel,TriLibCore.AssetLoaderContext,System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Finds all <see cref="T:UnityEngine.GameObject"/> instances with only Transform components under this model
            and appends them to the specified <paramref name="bones"/> list.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> to search for bone-like objects.</param>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing references to the model hierarchy and loaded <see cref="T:UnityEngine.GameObject"/>s.
            </param>
            <param name="bones">The list to which discovered bone transforms will be added.</param>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.SortByName(TriLibCore.Interfaces.IModel)">
            <summary>
            Recursively sorts the children of this model by their name in ascending order.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> whose children will be sorted.</param>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.CountChild(TriLibCore.Interfaces.IModel)">
            <summary>
            Recursively counts the total number of child models under this model.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> whose child count is needed.</param>
            <returns>An integer representing the total count of child models.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.CalculateBounds(TriLibCore.Interfaces.IModel)">
            <summary>
            Calculates the local or global bounds of the given <see cref="T:TriLibCore.Interfaces.IModel"/>,
            taking into account its geometry and the geometry of its children.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> to calculate bounds for.</param>
            <returns>A <see cref="T:UnityEngine.Bounds"/> object representing the model's bounds in world space.</returns>
            <remarks>
            The method traverses the entire hierarchy of the model, using <see cref="M:TriLibCore.Extensions.ModelExtensions.GetGlobalMatrix(TriLibCore.Interfaces.IModel)"/>
            to determine the final position of each vertex in world space.
            </remarks>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.MovePivot(TriLibCore.Interfaces.IModel,TriLibCore.AssetLoaderContext)">
            <summary>
            Moves the pivot of the given <see cref="T:TriLibCore.Interfaces.IModel"/> according to the <see cref="T:TriLibCore.General.PivotPosition"/>
            set in the provided <see cref="T:TriLibCore.AssetLoaderContext"/>. If the model has skinning data, the pivot is not moved.
            </summary>
            <param name="model">The <see cref="T:TriLibCore.Interfaces.IModel"/> whose pivot will be moved.</param>
            <param name="assetLoaderContext">
            The context object containing options for moving the pivot and references to other models.
            </param>
            <remarks>
            This operation is skipped if the model contains bind poses (i.e., it's skinned), to avoid
            invalidating the skinning data.
            </remarks>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.CalculateBounds(TriLibCore.Interfaces.IModel,UnityEngine.Bounds@,System.Boolean@)">
            <summary>
            Recursively traverses the model hierarchy, encapsulating vertex positions
            into the given <paramref name="bounds"/>, in world coordinates.
            </summary>
            <param name="model">The model whose vertices will be encapsulated.</param>
            <param name="bounds">A reference to the <see cref="T:UnityEngine.Bounds"/> instance being updated.</param>
            <param name="firstVertex">
            A boolean flag indicating if this is the first vertex. This helps initialize the bounds properly.
            </param>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.TryToAddEmptyModel(TriLibCore.AssetLoaderContext,System.Collections.Generic.List{UnityEngine.Transform},TriLibCore.Interfaces.IModel)">
            <summary>
            Recursively attempts to add transform-only objects (i.e., empty models with no geometry)
            as bones to the specified list.
            </summary>
            <param name="assetLoaderContext">The context for loading assets and models.</param>
            <param name="bones">The list of bones to add to.</param>
            <param name="emptyModel">The model to check.</param>
        </member>
        <member name="M:TriLibCore.Extensions.ModelExtensions.TryToAddBone(TriLibCore.AssetLoaderContext,System.Collections.Generic.List{UnityEngine.Transform},TriLibCore.Interfaces.IModel)">
            <summary>
            Recursively attempts to add models flagged as bones (<see cref="P:TriLibCore.Interfaces.IModel.IsBone"/>) to the specified list.
            </summary>
            <param name="assetLoaderContext">The context for loading assets and models.</param>
            <param name="tempBones">A temporary list of bones.</param>
            <param name="bone">The model to check.</param>
        </member>
        <member name="T:TriLibCore.Extensions.QuaternionExtensions">
            <summary>
            Represents a series of Quaternion utility methods.
            </summary>
        </member>
        <member name="M:TriLibCore.Extensions.QuaternionExtensions.IsInvalid(UnityEngine.Quaternion)">
            <summary>
            Checks if the given Quaternion is invalid.
            </summary>
            <param name="quaternion">Quaternion to be checked.</param>
            <returns><c>true</c> if Quaternion is invalid. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TriLibCore.Extensions.StreamExtensions">
            <summary>Represents a series of Stream extension methods.</summary>
        </member>
        <member name="M:TriLibCore.Extensions.StreamExtensions.ReadBytesUnknownLength(System.IO.Stream)">
            <summary>
            Reads all Stream Bytes into a Byte Array when the Stream has unknown length.
            </summary>
            <param name="input">The input Stream.</param>
            <returns>The Stream Data Bytes.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.StreamExtensions.ReadBytes(System.IO.Stream,System.Func{System.Int32,System.Object,System.Byte[]},System.Object)">
            <summary>
            Reads all Stream Bytes into a Byte Array.
            </summary>
            <param name="input">The input Stream.</param>
            <param name="bufferCallback">The callback used to retrieve the byte buffer where the Stream data will be write to.</param>
            <param name="customData">A custom parameter to be sent to the buffer callback.</param>
            <returns>The Stream Data Bytes.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.StreamExtensions.ReadBytes(System.IO.Stream)">
            <summary>
            Reads all Stream Bytes into a Byte Array.
            </summary>
            <param name="input">The input Stream.</param>
            <returns>The Stream Data Bytes.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.StreamExtensions.MatchRegex(System.IO.Stream,System.String[])">
            <summary>Tries to match the given RegEx patterns on the Stream contents.</summary>
            <param name="stream">The Stream to perform the search.</param>
            <param name="patterns">The list of RegEx patterns to search for.</param>
            <returns>
            <c>true</c>, if all patterns match. Otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.Extensions.StreamExtensions.TryToDispose(System.IO.Stream)">
            <summary>
            Tries to dispose the given Stream.
            </summary>
            <param name="stream">The Stream to dispose.</param>
        </member>
        <member name="T:TriLibCore.Extensions.StringExtensions">
            <summary>
            Represents a series of String extension methods.
            </summary>
        </member>
        <member name="M:TriLibCore.Extensions.StringExtensions.SplitNoAlloc(System.String,System.Char,System.String[])">
            <summary>
            Splits a string without causing memory allocation.
            </summary>
            <param name="value">String to split.</param>
            <param name="separator">Separator character.</param>
            <param name="buffer">The buffer to store the Strings.</param>
            <returns>The number of sub-strings.</returns>
        </member>
        <member name="T:TriLibCore.Extensions.TransformExtensions">
            <summary>Represents a series of Transform extension methods.</summary>
        </member>
        <member name="M:TriLibCore.Extensions.TransformExtensions.CountChild(UnityEngine.Transform)">
            <summary>Recursively counts this Transform children.</summary>
            <param name="transform">The Transform containing the children.</param>
            <returns>The children count</returns>
        </member>
        <member name="M:TriLibCore.Extensions.TransformExtensions.FindDeepChild(UnityEngine.Transform,System.String,TriLibCore.General.StringComparisonMode,System.Boolean)">
            <summary>Tries to recursively find a Transform on another Transform hierarchy by its name.</summary>
            <param name="transform">The Transform containing the children.</param>
            <param name="right">The Transform name to search for</param>
            <param name="stringComparisonMode">The type of comparison to use.</param>
            <param name="caseInsensitive">Pass <c>true</c> to do a case-insensitive search.</param>
            <returns>The found transform, or <c>null</c></returns>
        </member>
        <member name="M:TriLibCore.Extensions.TransformExtensions.BuildPath(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>Builds a path to the given Transform hierarchy.</summary>
            <param name="transform">The Transform to build the path from.</param>
            <param name="rootTransform">The Transform where the hierarchy ends.</param>
            <returns>The built path</returns>
        </member>
        <member name="T:TriLibCore.FileBufferingMode">
            <summary>
            Specifies the buffering behavior for file input streams.
            </summary>
        </member>
        <member name="F:TriLibCore.FileBufferingMode.Disabled">
            <summary>
            File buffering is disabled, meaning streams are read directly without being fully loaded into memory.
            </summary>
        </member>
        <member name="F:TriLibCore.FileBufferingMode.SmallFilesOnly">
            <summary>
            File buffering is enabled only for files that are smaller than 50 MB.
            Larger files are read directly without being buffered into memory.
            </summary>
        </member>
        <member name="F:TriLibCore.FileBufferingMode.Always">
            <summary>
            File buffering is always enabled, regardless of file size.
            Streams are fully loaded into memory before processing.
            </summary>
        </member>
        <member name="T:TriLibCore.ModelNamingData">
            <summary>
            Holds identifying information for a particular model, including names, part numbers, and class designations.
            This data is typically used when generating or customizing names for model-based objects.
            </summary>
        </member>
        <member name="F:TriLibCore.ModelNamingData.ModelName">
            <summary>
            The name assigned to the model.
            </summary>
        </member>
        <member name="F:TriLibCore.ModelNamingData.MaterialName">
            <summary>
            The name of the material associated with this model, if any.
            </summary>
        </member>
        <member name="F:TriLibCore.ModelNamingData.PartNumber">
            <summary>
            The part number for this model, if specified.
            </summary>
        </member>
        <member name="F:TriLibCore.ModelNamingData.Id">
            <summary>
            A general-purpose identifier for the model.
            </summary>
        </member>
        <member name="F:TriLibCore.ModelNamingData.Class">
            <summary>
            A class or category designation for the model.
            </summary>
        </member>
        <member name="T:TriLibCore.Geometries.CommonGeometry">
            <summary>
            Represents a concrete implementation of <see cref="T:TriLibCore.Interfaces.IGeometry"/> that holds vertex and face data
            within a <see cref="T:TriLibCore.Geometries.CommonGeometryGroup"/>. Multiple <see cref="T:TriLibCore.Geometries.CommonGeometry"/> instances can
            exist within a single group, each referencing a shared vertex pool.
            </summary>
        </member>
        <member name="P:TriLibCore.Geometries.CommonGeometry.GeometryGroup">
            <summary>
            Gets or sets the parent geometry group that contains this geometry.
            </summary>
        </member>
        <member name="P:TriLibCore.Geometries.CommonGeometry.Index">
            <summary>
            Gets or sets the index of this geometry within its parent geometry group.
            </summary>
        </member>
        <member name="P:TriLibCore.Geometries.CommonGeometry.IsQuad">
            <summary>
            Gets or sets a value indicating whether this geometry should be processed as quads.
            If false, the geometry is typically handled as triangles.
            </summary>
        </member>
        <member name="P:TriLibCore.Geometries.CommonGeometry.MaterialIndex">
            <summary>
            Gets or sets the index of the material assigned to this geometry.
            </summary>
        </member>
        <member name="P:TriLibCore.Geometries.CommonGeometry.OriginalIndex">
            <summary>
            Gets or sets the original geometry index within the parent geometry group.
            If this geometry was duplicated, this field preserves the initial index.
            </summary>
        </member>
        <member name="P:TriLibCore.Geometries.CommonGeometry.VertexDataIndices">
            <summary>
            Gets or sets the list of indices into the shared vertex data
            managed by <see cref="T:TriLibCore.Geometries.CommonGeometryGroup"/>. These indices map 
            this geometry's faces to the group's vertex pool.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.CommonGeometry.AddVertex(TriLibCore.AssetLoaderContext,System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector4,UnityEngine.Color,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.BoneWeight)">
            <summary>
            Adds a new vertex (with position, normal, tangent, color, UVs, and bone weighting)
            to the parent geometry group's vertex pool and records the resulting index 
            in <see cref="P:TriLibCore.Geometries.CommonGeometry.VertexDataIndices"/> if this geometry is not a point cloud.
            </summary>
            <param name="assetLoaderContext">
            The context containing model loading data and settings.
            </param>
            <param name="originalVertexIndex">The source vertex index from the loaded model.</param>
            <param name="position">The vertex position.</param>
            <param name="normal">The vertex normal.</param>
            <param name="tangent">The vertex tangent.</param>
            <param name="color">The vertex color.</param>
            <param name="uv0">The first set of UV coordinates.</param>
            <param name="uv1">The second set of UV coordinates.</param>
            <param name="uv2">The third set of UV coordinates.</param>
            <param name="uv3">The fourth set of UV coordinates.</param>
            <param name="boneWeight">The bone weight data, if applicable.</param>
        </member>
        <member name="M:TriLibCore.Geometries.CommonGeometry.Setup(TriLibCore.Geometries.CommonGeometryGroup,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Configures this geometry with the specified parent group, material index, face mode (quads or triangles),
            blend shape usage, and point cloud status. If the geometry is not a point cloud, 
            this method also pre-allocates a list for storing vertex indices.
            </summary>
            <param name="geometryGroup">The parent geometry group.</param>
            <param name="materialIndex">The material index for this geometry.</param>
            <param name="isQuad">Indicates if this geometry uses quadrilateral faces.</param>
            <param name="hasBlendShapes">Indicates if this geometry uses blend shapes.</param>
            <param name="isPointCloud">Indicates if this geometry is a point cloud.</param>
        </member>
        <member name="T:TriLibCore.Geometries.CommonGeometryGroup">
            <summary>Represents a TriLib Geometry Group. A Geometry Group contains child Geometries.</summary>
        </member>
        <member name="T:TriLibCore.Geometries.VertexDataIndices">
            <summary>Represents the mapping between Geometry elements and the Geometry Group elements.</summary>
        </member>
        <member name="F:TriLibCore.Geometries.VertexDataIndices.VertexIndex">
            <summary>
            Geometry group vertex index.
            </summary>
        </member>
        <member name="F:TriLibCore.Geometries.VertexDataIndices.NormalIndex">
            <summary>
            Geometry group normal index, or -1 when there is no normal for this vertex.
            </summary>
        </member>
        <member name="F:TriLibCore.Geometries.VertexDataIndices.UvIndex">
            <summary>
            Geometry group uv channel 1 index, or -1 when there is no uv for this vertex.
            </summary>
        </member>
        <member name="F:TriLibCore.Geometries.VertexDataIndices.UvIndex2">
            <summary>
            Geometry group uv channel 2 index, or -1 when there is no uv for this vertex.
            </summary>
        </member>
        <member name="F:TriLibCore.Geometries.VertexDataIndices.UvIndex3">
            <summary>
            Geometry group uv channel 3 index, or -1 when there is no uv for this vertex.
            </summary>
        </member>
        <member name="F:TriLibCore.Geometries.VertexDataIndices.UvIndex4">
            <summary>
            Geometry group uv channel 4 index, or -1 when there is no uv for this vertex.
            </summary>
        </member>
        <member name="F:TriLibCore.Geometries.VertexDataIndices.ColorIndex">
            <summary>
            Geometry group color index, or -1 when there is no color for this vertex.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.VertexDataIndices.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Represents the mapping between Geometry Group elements and its Geometries. There is one Vertex Data per vertex in every Geometry.</summary>
            <param name="vertexIndex">The vertex element index.</param>
            <param name="normalIndex">The normal element index.</param>
            <param name="tangentIndex">The tangent element index.</param>
            <param name="uvIndex">The uv1 element index.</param>
            <param name="uvIndex2">The uv2 element index.</param>
            <param name="uvIndex3">The uv3 element index.</param>
            <param name="uvIndex4">The uv4 element index.</param>
            <param name="colorIndex">The color element index.</param>
        </member>
        <member name="M:TriLibCore.Geometries.VertexDataIndices.Equals(TriLibCore.Geometries.VertexDataIndices)">
            <summary>Determines whether the specified Vertex Data is equal to this instance.</summary>
            <param name="other">The Other Vertex Data.</param>
            <returns>
            <c>true</c> if vertex data are equals, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TriLibCore.Geometries.VertexDataIndices.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The Object to compare with the current instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.Geometries.VertexDataIndices.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:TriLibCore.Geometries.VertexDataIndices.Equals(TriLibCore.Geometries.VertexDataIndices,TriLibCore.Geometries.VertexDataIndices)">
            <summary>Determines whether the specified Vertex Data are equals.</summary>
            <param name="x">The first Vertex Data to compare.</param>
            <param name="y">The second Vertex Data to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:TriLibCore.Geometries.VertexDataIndices.GetHashCode(TriLibCore.Geometries.VertexDataIndices)">
            <summary>Returns a hash code for this instance.</summary>
            <param name="obj">The Vertex Data used to get the hashcode.</param>
            <returns>A hash code for the vertex data, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:TriLibCore.Geometries.IVertexData">
            <summary>
            Represents a Vertex Data.
            A Vertex Data contains all attributes a Unity Vertex can have.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetVertexIndex(System.Int32,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the original Vertex Index.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetVertexIndex(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the original Vertex Index.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetPosition(UnityEngine.Vector3,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Position.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetPosition(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Position.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetNormal(UnityEngine.Vector3,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Normal.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetNormal(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Normal.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetTangent(UnityEngine.Vector4,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Tangent.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetTangent(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Tangent.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetColor(UnityEngine.Color,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Color.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetColor(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Color.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetUV1(UnityEngine.Vector2,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 1.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetUV1(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 1.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetUV2(UnityEngine.Vector2,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 2.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetUV2(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 2.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetUV3(UnityEngine.Vector2,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 3.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetUV3(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 3.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetUV4(UnityEngine.Vector2,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 4.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetUV4(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex Texture Coordinate 4.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.SetBoneWeight(UnityEngine.BoneWeight,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex processed Bone Weight.
            </summary>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetBoneWeight(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Gets/Sets the Vertex processed Bone Weight.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="M:TriLibCore.Geometries.IVertexData.GetUsesBoneWeight(TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Indicates whether this Vertex Data uses Bone Weights.
            </summary>
            <param name="geometryGroup"></param>
        </member>
        <member name="T:TriLibCore.Interfaces.IAnimation">
            <summary>
            Represents a TriLib Animation.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimation.AnimationCurveBindings">
            <summary>
            Gets or sets the list of animation curve bindings associated with this animation.
            Each binding defines how an animation curve is mapped to a particular property.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimation.AnimationCurvesByModel">
            <summary>
            Gets or sets a dictionary of animation curves grouped by model. 
            The outer dictionary key is the <see cref="T:TriLibCore.Interfaces.IModel"/>, and the value is another dictionary 
            where each entry's key is a property name or identifier, and the value is the associated 
            <see cref="T:TriLibCore.Interfaces.IAnimationCurve"/>.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimation.FrameRate">
            <summary>
            Gets or sets this animation's frame rate in frames per second.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimation.TranslationKeyTimes">
            <summary>
            Gets or sets the set of keyframe times at which translation (position) updates occur 
            for the associated model(s).
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IAnimationCurve">
            <summary>
            Represents a TriLib Animation Curve.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimationCurve.Property">
            <summary>
            Gets/Sets the animated Property name.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimationCurve.AnimatedType">
            <summary>
            Gets/Sets the animated Property Type.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimationCurve.AnimationCurve">
            <summary>
            Gets/Sets the Animation Curve Keyframes.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IAnimationCurveBinding">
            <summary>
            Represents a TriLib Animation Curve Binding, which connects a <see cref="T:TriLibCore.Interfaces.IModel"/> 
            with one or more associated <see cref="T:TriLibCore.Interfaces.IAnimationCurve"/> instances.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimationCurveBinding.Model">
            <summary>
            Gets or sets the model that this binding references.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAnimationCurveBinding.AnimationCurves">
            <summary>
            Gets or sets the list of animation curves that affect the <see cref="P:TriLibCore.Interfaces.IAnimationCurveBinding.Model"/>.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IAssetLoaderContext">
            <summary>
            Represents an interface for objects that provide access 
            to the main <see cref="T:TriLibCore.AssetLoaderContext"/>, which holds 
            model-loading data and other associated resources.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAssetLoaderContext.Context">
            <summary>
            Gets the <see cref="T:TriLibCore.AssetLoaderContext"/> reference. 
            This context contains metadata, settings, and resources used 
            during the model loading process.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IAwaitable">
            <summary>
            Represents an awaitable process.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IAwaitable.Completed">
            <summary>
            Indicates whether this Awaitable is completed.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IBlendShapeKey">
            <summary>
            Represents a TriLib Blend Shape Key.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IBlendShapeKey.IndexMap">
            <summary>
            Represents a dictionary where the key is the original vertex index and the value is the blend-shape values index.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IBlendShapeKey.Vertices">
            <summary>Gets/Sets this Blend Shape Key delta vertices.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IBlendShapeKey.Normals">
            <summary>Gets/Sets this Blend Shape Key delta normals.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IBlendShapeKey.Tangents">
            <summary>Gets/Sets this Blend Shape Key delta tangents.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IBlendShapeKey.FrameWeight">
            <summary>Gets/Sets this Blend-Shape Key weight.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IBlendShapeKey.FullGeometryShape">
            <summary>
            Indicates whether this blend shape does not uses the IndexMap (When there are elements for all VerticesData and no mapping is needed).
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.ICamera">
            <summary>
            Represents a TriLib Camera.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.AspectRatio">
            <summary>
            The camera aspect ratio.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.Ortographic">
            <summary>
            Indicates whether the camera ortographic?
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.OrtographicSize">
            <summary>
            The camera ortographic size.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.FieldOfView">
            <summary>
            The camera field of view in degrees.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.NearClipPlane">
            <summary>
            The camera near clip plane distance.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.FarClipPlane">
            <summary>
            The camera far clip distance.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.FocalLength">
            <summary>
            The physical camera focal length.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.SensorSize">
            <summary>
            The physical camera sensor size.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.LensShift">
            <summary>
            The physical camera lens shift.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.GateFitMode">
            <summary>
            The physical camera gate fit mode.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.PhysicalCamera">
            <summary>
            Defines whether this is a camera with physical properties.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ICamera.HasTarget">
            <summary>
            Defines whether this camera has a target.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IContextualizedAction">
            <summary>Represents a Contextualized Action interface.</summary>
        </member>
        <member name="M:TriLibCore.Interfaces.IContextualizedAction.Invoke">
            <summary>Invokes this Action without using any context.</summary>
        </member>
        <member name="M:TriLibCore.Interfaces.IContextualizedAction.GetContext">
            <summary>
            Returns the Context used in this Action.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TriLibCore.Interfaces.IContextualizedAction.Completed">
            <summary>
            Indicates whether this Action is completed.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IGeometry">
            <summary>
            Represents a TriLib Geometry. There may be multiple Geometries within a single 
            <see cref="T:TriLibCore.Geometries.CommonGeometryGroup"/> (or any other group implementing geometry collections).
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometry.Index">
            <summary>
            Gets or sets the index of this Geometry within its parent Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometry.OriginalIndex">
            <summary>
            Gets or sets the original Geometry index within the parent Geometry Group. 
            Sometimes a Geometry can be duplicated, and this field is used to track 
            its original index.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometry.MaterialIndex">
            <summary>
            Gets or sets the material index used by this Geometry.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometry.IsQuad">
            <summary>
            Gets or sets a value indicating whether this Geometry contains quadrilateral faces 
            (quads) instead of triangular faces.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometry.VertexDataIndices">
            <summary>
            Gets or sets the list of indices into the Geometry Group's vertex data. 
            Each element of this list corresponds to a vertex position entry 
            (and optionally normal, tangent, UV, etc.).
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometry.GeometryGroup">
            <summary>
            Gets or sets the parent <see cref="T:TriLibCore.Geometries.CommonGeometryGroup"/> that contains 
            this Geometry.
            </summary>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometry.AddVertex(TriLibCore.AssetLoaderContext,System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector4,UnityEngine.Color,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.BoneWeight)">
            <summary>
            Adds a new vertex to this Geometry, defining its position, normal, tangent, color, 
            UV coordinates, and bone weight data.
            </summary>
            <param name="assetLoaderContext">The <see cref="T:TriLibCore.AssetLoaderContext"/> that holds 
            information about the model-loading process.</param>
            <param name="originalVertexIndex">The original vertex index.</param>
            <param name="position">The position vector for the new vertex.</param>
            <param name="normal">The normal vector for the new vertex.</param>
            <param name="tangent">The tangent vector for the new vertex.</param>
            <param name="color">The color of the new vertex.</param>
            <param name="uv0">The first UV set coordinate.</param>
            <param name="uv1">The second UV set coordinate.</param>
            <param name="uv2">The third UV set coordinate.</param>
            <param name="uv3">The fourth UV set coordinate.</param>
            <param name="boneWeight">The bone weight data for skinning.</param>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometry.Setup(TriLibCore.Geometries.CommonGeometryGroup,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Configures this Geometry with its parent group, material index, and other properties 
            that affect how its vertices and faces are handled.
            </summary>
            <param name="geometryGroup">The parent geometry group to which this Geometry belongs.</param>
            <param name="materialIndex">The index of the material associated with this Geometry.</param>
            <param name="isQuad">Whether this Geometry uses quadrilateral faces.</param>
            <param name="hasBlendShapes">Whether this Geometry includes blend shape data.</param>
            <param name="isPointCloud">Whether this Geometry is a point cloud (vertices only, no faces).</param>
        </member>
        <member name="T:TriLibCore.Interfaces.IGeometryGroup">
            <summary>
            Represents a TriLib Geometry Group. A Geometry Group contains child Geometries.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.BlendShapeKeys">
            <summary>
            Gets/Sets the Blend-Shape keys in this group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.GeometriesData">
            <summary>
            Gets/Sets the Geometries in this group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.GeometryCapacity">
            <summary>
            Gets the maximum number of Geometries that can be stored in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasSkin">
            <summary>
            Gets or sets whether the Geometry Group has skinning information.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasColors">
            <summary>
            Gets or sets whether the Geometry Group contains vertex color data.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasInvalidNormals">
            <summary>
            Gets or sets whether the Geometry Group contains invalid normals.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasNormals">
            <summary>
            Gets or sets whether the Geometry Group contains valid normals.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasTangents">
            <summary>
            Gets or sets whether the Geometry Group contains tangent data.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasUv1">
            <summary>
            Gets or sets whether the Geometry Group contains a first UV set (UV1).
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasUv2">
            <summary>
            Gets or sets whether the Geometry Group contains a second UV set (UV2).
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasUv3">
            <summary>
            Gets or sets whether the Geometry Group contains a third UV set (UV3).
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.HasUv4">
            <summary>
            Gets or sets whether the Geometry Group contains a fourth UV set (UV4).
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.Mesh">
            <summary>
            Gets or sets the final Unity <see cref="P:TriLibCore.Interfaces.IGeometryGroup.Mesh"/> generated by this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.Positions">
            <summary>
            Gets or sets the position data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.Normals">
            <summary>
            Gets or sets the normal data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.Tangents">
            <summary>
            Gets or sets the tangent data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.Colors">
            <summary>
            Gets or sets the color data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.UVs1">
            <summary>
            Gets or sets the first UV set (UV1) data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.UVs2">
            <summary>
            Gets or sets the second UV set (UV2) data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.UVs3">
            <summary>
            Gets or sets the third UV set (UV3) data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.UVs4">
            <summary>
            Gets or sets the fourth UV set (UV4) data for all vertices in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.Pivot">
            <summary>
            Gets/Sets this Geometry Group local pivot position.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.RawBoneWeights">
            <summary>
            Gets/Sets the Bone-Weights from this group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.VerticesCapacity">
            <summary>
            Gets the maximum number of vertices that can be stored in this Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.VerticesDataCount">
            <summary>
            Gets the total number of vertex data items in the Geometry Group.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IGeometryGroup.OriginalVertexIndices">
            <summary>
            Gets or sets the list that maps the current vertex indices to the original vertex indices.
            </summary>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometryGroup.AddBoneWeight(System.Int32,UnityEngine.BoneWeight1)">
            <summary>
            Adds a new Bone Weight to this group.
            </summary>
            <param name="vertexIndex">The original Vertex index.</param>
            <param name="boneWeight1">The Bone Weight data.</param>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometryGroup.AddVertex(TriLibCore.AssetLoaderContext,System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector4,UnityEngine.Color,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.BoneWeight)">
            <summary>
            Adds or gets an existing Vertex to/from this Geometry Group.
            </summary>
            <param name="assetLoaderContext">The Asset Loader Context reference, containing model loading data.</param>
            <param name="vertexIndex">The original Vertex index.</param>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The normal of the vertex.</param>
            <param name="tangent">The tangent of the vertex.</param>
            <param name="color">The color of the vertex.</param>
            <param name="uv1">The first UV set (UV1) coordinate.</param>
            <param name="uv2">The second UV set (UV2) coordinate.</param>
            <param name="uv3">The third UV set (UV3) coordinate.</param>
            <param name="uv4">The fourth UV set (UV4) coordinate.</param>
            <param name="boneWeight">The BoneWeight data.</param>
            <returns>The final vertex index in the Geometry Group.</returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometryGroup.GenerateMesh(TriLibCore.AssetLoaderContext,UnityEngine.GameObject,TriLibCore.Interfaces.IModel)">
            <summary>
            Generates the final Unity Mesh.
            </summary>
            <param name="assetLoaderContext">The Asset Loader Context reference, containing model loading data.</param>
            <param name="meshGameObject">The GameObject the Mesh will be attached to.</param>
            <param name="meshModel">The geometry model reference.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> for asynchronous or deferred Mesh construction.</returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometryGroup.GetCenter">
            <summary>
            Computes the centroid (center) of all vertices in this Geometry Group.
            </summary>
            <returns>The centroid of the vertex positions.</returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometryGroup.GetGeometry``1(TriLibCore.AssetLoaderContext,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets a new or existing Geometry from this group.
            </summary>
            <param name="assetLoaderContext">The Asset Loader Context reference, containing model loading data.</param>
            <param name="materialIndex">The Geometry Material index.</param>
            <param name="isQuad">Indicates if the Geometry contains quad data.</param>
            <param name="hasBlendShapes">Indicates if the Geometry uses blend-shapes.</param>
            <typeparam name="TGeometry">A class that implements <see cref="T:TriLibCore.Interfaces.IGeometry"/>.</typeparam>
            <returns>A new or existing Geometry.</returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometryGroup.Setup(TriLibCore.AssetLoaderContext,System.Int32,System.Int32)">
            <summary>
            Configures this Geometry Group with capacity and context information.
            </summary>
            <param name="assetLoaderContext">The Asset Loader Context reference, containing model loading data.</param>
            <param name="verticesCapacity">The maximum number of vertices in this group.</param>
            <param name="geometriesCapacity">The maximum number of Geometries in this group.</param>
        </member>
        <member name="M:TriLibCore.Interfaces.IGeometryGroup.TransferToBlendShape(TriLibCore.Interfaces.IGeometryGroup,TriLibCore.Interfaces.IBlendShapeKey,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Transfers this Geometry Group data to a Blend Shape, referencing another base Geometry Group.
            </summary>
            <param name="baseGeometryGroup">The base Geometry Group to transfer from.</param>
            <param name="blendShapeKey">The blend shape key to apply the transfer.</param>
            <param name="originalVertexIndices">A list of original vertex indices used for mapping data.</param>
        </member>
        <member name="T:TriLibCore.Interfaces.ILight">
            <summary>
            Represents a TriLib Light.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.LightType">
            <summary>
            The light type.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.Color">
            <summary>
            The light color.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.Intensity">
            <summary>
            The light intensity.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.Range">
            <summary>
            The light range.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.InnerSpotAngle">
            <summary>
            The light inner spot angle in degrees.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.OuterSpotAngle">
            <summary>
            The light out spot angle in degrees.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.Width">
            <summary>
            The area light width.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.Height">
            <summary>
            The area light height.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ILight.CastShadows">
            <summary>
            Defines whether the light cast shadows or not.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IMaterial">
            <summary>
            Represents a TriLib Material. Each <see cref="T:TriLibCore.Interfaces.IMaterial"/> holds various 
            properties (floats, vectors, colors, textures, etc.) that describe how 
            the material will appear when rendered in Unity.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.DoubleSided">
            <summary>
            Gets or sets a value indicating whether this Material should be rendered 
            from both sides (i.e., whether backface culling is disabled).
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.MixAlbedoColorWithTexture">
            <summary>
            Gets a value indicating whether the albedo (diffuse) color from this Material 
            should be multiplied by the albedo texture for final rendering.
            </summary>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetFloatValue(System.String)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:System.Single"/>.
            </summary>
            <param name="propertyName">The name of the property to look up.</param>
            <returns>
            The property value as a float, if found; otherwise, 0.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericFloatValue(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:System.Single"/>, 
            using a <see cref="T:TriLibCore.General.GenericMaterialProperty"/> identifier.
            </summary>
            <param name="materialProperty">
            The enumerated property or descriptor identifying the material property to look up.
            </param>
            <returns>
            The property value as a float, if found; otherwise, 0.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetIntValue(System.String)">
            <summary>
            Retrieves a property value from this Material as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="propertyName">The name of the property to look up.</param>
            <returns>
            The property value as an int, if found; otherwise, 0.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericIntValue(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Retrieves a property value from this Material as an <see cref="T:System.Int32"/>, 
            using a <see cref="T:TriLibCore.General.GenericMaterialProperty"/> identifier.
            </summary>
            <param name="materialProperty">
            The enumerated property or descriptor identifying the material property to look up.
            </param>
            <returns>
            The property value as an int, if found; otherwise, 0.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetStringValue(System.String)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:System.String"/>.
            </summary>
            <param name="propertyName">The name of the property to look up.</param>
            <returns>
            The property value as a string, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericStringValue(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:System.String"/>, 
            using a <see cref="T:TriLibCore.General.GenericMaterialProperty"/> identifier.
            </summary>
            <param name="materialProperty">
            The enumerated property or descriptor identifying the material property to look up.
            </param>
            <returns>
            The property value as a string, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetVector3Value(System.String)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:UnityEngine.Vector3"/>.
            </summary>
            <param name="propertyName">The name of the property to look up.</param>
            <returns>
            The property value as <see cref="T:UnityEngine.Vector3"/>, if found; otherwise, 
            a zero (empty) vector.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericVector3Value(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:UnityEngine.Vector3"/>, 
            using a <see cref="T:TriLibCore.General.GenericMaterialProperty"/> identifier.
            </summary>
            <param name="materialProperty">
            The enumerated property or descriptor identifying the material property to look up.
            </param>
            <returns>
            The property value as <see cref="T:UnityEngine.Vector3"/>, if found; otherwise, 
            a zero (empty) vector.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetVector4Value(System.String)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:UnityEngine.Vector4"/>.
            </summary>
            <param name="propertyName">The name of the property to look up.</param>
            <returns>
            The property value as <see cref="T:UnityEngine.Vector4"/>, if found; otherwise, 
            a zero (empty) vector.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericVector4Value(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:UnityEngine.Vector4"/>, 
            using a <see cref="T:TriLibCore.General.GenericMaterialProperty"/> identifier.
            </summary>
            <param name="materialProperty">
            The enumerated property or descriptor identifying the material property to look up.
            </param>
            <returns>
            The property value as <see cref="T:UnityEngine.Vector4"/>, if found; otherwise, 
            a zero (empty) vector.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetColorValue(System.String)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="propertyName">The name of the property to look up.</param>
            <returns>
            The property value as <see cref="T:UnityEngine.Color"/>, if found; otherwise, 
            <see cref="P:UnityEngine.Color.white"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericColorValue(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Retrieves a property value from this Material as a <see cref="T:UnityEngine.Color"/>, 
            using a <see cref="T:TriLibCore.General.GenericMaterialProperty"/> identifier.
            </summary>
            <param name="materialProperty">
            The enumerated property or descriptor identifying the material property to look up.
            </param>
            <returns>
            The property value as <see cref="T:UnityEngine.Color"/>, if found; otherwise, 
            <see cref="P:UnityEngine.Color.white"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetTextureValue(System.String)">
            <summary>
            Retrieves a property value from this Material as an <see cref="T:TriLibCore.Interfaces.ITexture"/>.
            </summary>
            <param name="propertyName">The name of the property to look up.</param>
            <returns>
            The property value as an <see cref="T:TriLibCore.Interfaces.ITexture"/>, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericTextureValue(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Retrieves a property value from this Material as an <see cref="T:TriLibCore.Interfaces.ITexture"/>, 
            using a <see cref="T:TriLibCore.General.GenericMaterialProperty"/> identifier.
            </summary>
            <param name="materialProperty">
            The enumerated property or descriptor identifying the material property to look up.
            </param>
            <returns>
            The property value as an <see cref="T:TriLibCore.Interfaces.ITexture"/>, if found; otherwise, <c>null</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.AddProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new property to this Material.
            </summary>
            <param name="propertyName">The name of the property to add.</param>
            <param name="propertyValue">
            The value of the property to add. Can be a float, int, string, color, vector, or texture.
            </param>
            <param name="isTexture">
            Indicates whether the property is a texture. If <c>true</c>, 
            <paramref name="propertyValue"/> is treated as an <see cref="T:TriLibCore.Interfaces.ITexture"/>.
            </param>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericPropertyName(TriLibCore.General.GenericMaterialProperty)">
            <summary>
            Returns the material property name (used by specific readers) 
            corresponding to a given <see cref="T:TriLibCore.General.GenericMaterialProperty"/>.
            Different readers (importers) may use different naming conventions 
            for the same generic property.
            </summary>
            <param name="genericMaterialProperty">
            The <see cref="T:TriLibCore.General.GenericMaterialProperty"/> to get the name for.
            </param>
            <returns>
            The material property name used internally for the given <paramref name="genericMaterialProperty"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericColorValueMultiplied(TriLibCore.General.GenericMaterialProperty,TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the <see cref="T:UnityEngine.Color"/> multiplier for the specified 
            <see cref="T:TriLibCore.General.GenericMaterialProperty"/>, according to the current 
            <see cref="T:TriLibCore.MaterialMapperContext"/>. Some readers may require specific 
            multipliers for certain color-based properties.
            </summary>
            <param name="genericMaterialProperty">
            The <see cref="T:TriLibCore.General.GenericMaterialProperty"/> to get the color multiplier for.
            </param>
            <param name="materialMapperContext">
            The <see cref="T:TriLibCore.MaterialMapperContext"/> providing additional context 
            for determining the appropriate multiplier. This parameter is optional.
            </param>
            <returns>
            The color multiplier associated with the specified property, or 
            <see cref="P:UnityEngine.Color.white"/> if not found.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.GetGenericFloatValueMultiplied(TriLibCore.General.GenericMaterialProperty,TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the <see cref="T:System.Single"/> multiplier for the specified 
            <see cref="T:TriLibCore.General.GenericMaterialProperty"/>, according to the current 
            <see cref="T:TriLibCore.MaterialMapperContext"/>. Some readers may require specific 
            multipliers for certain float-based properties.
            </summary>
            <param name="genericMaterialProperty">
            The <see cref="T:TriLibCore.General.GenericMaterialProperty"/> to get the float multiplier for.
            </param>
            <param name="materialMapperContext">
            The <see cref="T:TriLibCore.MaterialMapperContext"/> providing additional context 
            for determining the appropriate multiplier. This parameter is optional.
            </param>
            <returns>
            The float multiplier associated with the specified property, or 1.0f if not found.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.HasProperty(System.String)">
            <summary>
            Determines whether this Material has a property with the given name.
            </summary>
            <param name="propertyName">The name of the property to check.</param>
            <returns>
            <c>true</c> if the property is found; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.PostProcessTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Optionally post-processes a texture after it has been loaded. 
            This hook can be used to perform additional operations such as 
            color-space conversions, compression settings, etc.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing both the original 
            and the Unity-generated texture references.
            </param>
            <returns>
            <c>true</c> if the texture was processed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.MaterialShadingSetup">
            <summary>
            Gets the <see cref="P:TriLibCore.Interfaces.IMaterial.MaterialShadingSetup"/> associated with this Material. 
            This setup is typically used by Material Mappers to select an appropriate 
            Unity Shader or template.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.Index">
            <summary>
            Gets or sets the index of this Material within a model or collection.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.UsesRoughnessSetup">
            <summary>
            Gets a value indicating whether this Material uses a "Roughness" setup. 
            Materials using roughness typically have metallic/roughness maps 
            instead of gloss/specular maps.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.Processing">
            <summary>
            Gets or sets a value indicating whether this Material is currently 
            being processed.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.Processed">
            <summary>
            Gets or sets a value indicating whether this Material has already 
            been processed. Useful for tracking the state of asynchronous 
            or multi-stage operations.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IMaterial.UsesAlpha">
            <summary>
            Gets a value indicating whether this Material uses any alpha (transparency) data, 
            whether via alpha textures or alpha color channels.
            </summary>
        </member>
        <member name="M:TriLibCore.Interfaces.IMaterial.ApplyOffsetAndScale(TriLibCore.TextureLoadingContext)">
            <summary>
            Applies material-specific offset and scale transformations to a texture. 
            This can be used for shifting or tiling a texture as required by the Material's properties.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing both the original 
            and the Unity-generated texture references.
            </param>
            <returns>
            <c>true</c> if an offset or scale was applied; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TriLibCore.Interfaces.IModel">
            <summary>Represents a TriLib Model, which will be converted to a Game Object in Unity.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.Pivot">
            <summary>
            Gets/Sets this Model pivot in world space.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.LocalPosition">
            <summary>Gets/Sets this Model local position.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.LocalRotation">
            <summary>Gets/Sets this Model local rotation.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.LocalScale">
            <summary>Gets/Sets this Model local scale.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.Visibility">
            <summary>Gets/Sets this Model visibility (visible or invisible).</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.Parent">
            <summary>Gets/Sets this Model parent.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.Children">
            <summary>Gets/Sets this Model children.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.Bones">
            <summary>Gets/Sets this Model bones.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.IsBone">
            <summary>
            Indicates wheter this model is a bone.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.GeometryGroup">
            <summary>Gets/Sets this Model Geometry Group.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.BindPoses">
            <summary>Gets/Sets this Model bind poses.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.MaterialIndices">
            <summary>Gets/Sets this Model Material indices.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.UserProperties">
            <summary>
            Represents a series of model user defined properties.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.HasCustomPivot">
            <summary>
            Defines whether the given model uses a custom pivot.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IModel.OriginalGlobalMatrix">
            <summary>
            Original (not pivoted) model local to world matrix.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IObject">
            <summary>Represents a TriLib Object (Base interface used in many TriLib classes).</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IObject.Name">
            <summary>Gets/Sets the Object name.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IObject.Used">
            <summary>Gets/Sets the flag indicating whether this object used somewhere.</summary>
        </member>
        <member name="T:TriLibCore.Interfaces.IRootModel">
            <summary>Represents the top-most (root) TriLib Model of the hierarchy.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IRootModel.AllModels">
            <summary>Gets/Sets all Models.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IRootModel.AllCameras">
            <summary>
            Gets/Sets all Model Cameras.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.IRootModel.AllLights">
            <summary>
            Gets/Sets all Model Lights.
            </summary>
        </member>
        <member name="T:TriLibCore.Interfaces.ITexture">
            <summary>Represents a TriLib Texture.</summary>
        </member>
        <member name="M:TriLibCore.Interfaces.ITexture.GetSubTexture(System.Int32)">
            <summary>Gets a sub-texture, in case of layered Textures.</summary>
            <param name="index">The Sub-Texture index.</param>
            <returns>The sub-texture, if exists, otherwise, returns this instance.</returns>
        </member>
        <member name="M:TriLibCore.Interfaces.ITexture.GetSubTextureCount">
            <summary>Gets the sub-textures count. (Zero in case of a non-layered Texture)</summary>
            <returns>The sub-textures count.</returns>
        </member>
        <member name="M:TriLibCore.Interfaces.ITexture.GetWeight(System.Int32)">
            <summary>Gets a sub-texture weight.</summary>
            <param name="index">The Sub-Texture index.</param>
            <returns>The sub-texture weight.</returns>
        </member>
        <member name="M:TriLibCore.Interfaces.ITexture.AddTexture(TriLibCore.Interfaces.ITexture)">
            <summary>Adds a sub-texture to the Texture.</summary>
            <param name="texture">The Sub-texture to be added.</param>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.DataStream">
            <summary>
            Gets/Sets the embedded Texture pixel data stream, in case of embedded textures, otherwise, the value should be <c>null</c>.
            </summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.Filename">
            <summary>Gets/Sets the Texture filename.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.WrapModeU">
            <summary>Gets/Sets Texture horizontal Wrap Mode.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.WrapModeV">
            <summary>Gets/Sets the Texture vertical Wrap Mode.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.Tiling">
            <summary>Gets/Sets the Texture tilling.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.Offset">
            <summary>Gets/Sets the Texture offset.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.ResolvedFilename">
            <summary>Gets/Sets the  full path to the file when TriLib resolves it.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.IsValid">
            <summary>Checks if this Texture is valid.</summary>
        </member>
        <member name="P:TriLibCore.Interfaces.ITexture.TextureFormat">
            <summary>
            Gets/Sets the format of this texture.
            </summary>
        </member>
        <member name="T:TriLibCore.IContextualizedError">
            <summary>
            Represents an Exception with a Context.
            </summary>
        </member>
        <member name="M:TriLibCore.IContextualizedError.GetContext">
            <summary>Gets the Context Object.</summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TriLibCore.IContextualizedError.GetInnerException">
            <summary>Gets the Contextualized Error inner Exception.</summary>
            <returns>Exception.</returns>
        </member>
        <member name="T:TriLibCore.Mappers.AnimationClipMapper">
            <summary>
            Provides a mechanism for post-processing or re-mapping <see cref="T:UnityEngine.AnimationClip"/> instances
            within the TriLib loading pipeline. Subclasses can override <see cref="M:TriLibCore.Mappers.AnimationClipMapper.MapArray(TriLibCore.AssetLoaderContext,UnityEngine.AnimationClip[])"/> to manipulate
            or customize animation data (e.g., for retargeting, curve simplification, or special playback requirements).
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.AnimationClipMapper.CheckingOrder">
            <summary>
            Indicates the relative priority of this mapper when multiple <see cref="T:TriLibCore.Mappers.AnimationClipMapper"/> 
            instances are defined in <see cref="F:TriLibCore.AssetLoaderOptions.AnimationClipMappers"/>. 
            Lower values signify earlier processing, while higher values are tried later 
            if earlier mappers do not produce a final result.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.AnimationClipMapper.MapArray(TriLibCore.AssetLoaderContext,UnityEngine.AnimationClip[])">
             <summary>
             Invoked to process an array of <see cref="T:UnityEngine.AnimationClip"/>s, allowing for modifications 
             such as re-structuring clip data, applying custom import settings, or removing unwanted frames.
            
             <para>
             By default, this method returns the original <paramref name="sourceAnimationClips"/> unmodified. 
             Inherit from <see cref="T:TriLibCore.Mappers.AnimationClipMapper"/> to perform custom logic (e.g., 
             applying curve simplification, retargeting bone names, etc.).
             </para>
             </summary>
             <param name="assetLoaderContext">
             The <see cref="T:TriLibCore.AssetLoaderContext"/> encapsulating model loading state and references, 
             including loaded objects, settings, and callbacks.
             </param>
             <param name="sourceAnimationClips">The unprocessed array of <see cref="T:UnityEngine.AnimationClip"/> instances.</param>
             <returns>An array of <see cref="T:UnityEngine.AnimationClip"/> after processing. Could be the same array, 
             a modified version, or a newly created set of clips.</returns>
        </member>
        <member name="T:TriLibCore.Mappers.AnimatorControllerMapper">
            <summary>Represents a Mapper used to process Animation Controller Clips.</summary>
        </member>
        <member name="M:TriLibCore.Mappers.AnimatorControllerMapper.Map(TriLibCore.AssetLoaderContext,UnityEngine.AnimationClip)">
            <summary>Processes the given Animation Clip.</summary>
            <param name="assetLoaderContext">The Asset Loader Context reference. Asset Loader Context contains the Model loading data.</param>
            <param name="source">The source Animation Clip to process.</param>
        </member>
        <member name="T:TriLibCore.Mappers.BlendShapeMapper">
            <summary>
            Allows developers to implement a custom mechanism for blend shape playback
            instead of Unity’s built-in system. By overriding methods in this class, you 
            can perform specialized setup for blend shapes, remap animation curves, 
            or otherwise customize how blend shape data is applied at runtime.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.BlendShapeMapper.Setup(TriLibCore.AssetLoaderContext,TriLibCore.Interfaces.IGeometryGroup,UnityEngine.GameObject,System.Collections.Generic.List{TriLibCore.Interfaces.IBlendShapeKey})">
            <summary>
            Performs initial configuration for the specified <paramref name="geometryGroup"/>, 
            applying the blend shape data to the provided <paramref name="meshGameObject"/>. 
            Override this method to implement a custom blend shape playback system 
            (e.g., a custom runtime script or different naming conventions).
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing references to loaded objects, 
            loading options, and callbacks.
            </param>
            <param name="geometryGroup">
            The geometry group (mesh data and related structures) containing the blend shape keys.
            </param>
            <param name="meshGameObject">
            The <see cref="T:UnityEngine.GameObject"/> to which the blend shape mesh is bound. 
            Often hosts a <see cref="T:UnityEngine.SkinnedMeshRenderer"/> if using Unity’s default system.
            </param>
            <param name="blendShapeKeys">
            A list of <see cref="T:TriLibCore.Interfaces.IBlendShapeKey"/> objects referencing the blend shapes 
            (morph targets) available for this mesh.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.BlendShapeMapper.MapAnimationCurve(TriLibCore.AssetLoaderContext,System.Int32)">
            <summary>
            Provides a way to remap the animation property name or path when creating 
            animation curves for blend shape keys, effectively controlling how 
            TriLib’s loaded blend shape animations are interpreted in Unity. 
            Override this if your system requires a different naming scheme.
            </summary>
            <param name="assetLoaderContext">
            References the model loading data, including loaded objects, user settings,
            and runtime information.
            </param>
            <param name="blendShapeIndex">
            The index of the blend shape within the mesh. This value can be used 
            to determine the naming or structure of animation curves.
            </param>
            <returns>
            A new or adjusted string representing the animation curve property to which 
            this blend shape should be keyed. <c>null</c> by default, indicating no remapping.
            </returns>
        </member>
        <member name="P:TriLibCore.Mappers.BlendShapeMapper.AnimationCurveSourceType">
            <summary>
            Indicates the source type (e.g., <c>SkinnedMeshRenderer</c> or another component) 
            for blend shape animation curves. Override to specify a different type if 
            not using the default Unity setup. 
            </summary>
        </member>
        <member name="T:TriLibCore.Mappers.ExternalDataMapper">
            <summary>
            Serves as an abstract base class for locating and opening external data streams within the TriLib loading workflow. 
            Inheritors must override <see cref="M:TriLibCore.Mappers.ExternalDataMapper.Map(TriLibCore.AssetLoaderContext,System.String,System.String@)"/> to define how resource filenames 
            are resolved into <see cref="T:System.IO.Stream"/> objects, allowing for custom logic such as 
            path transformations, caching, or network retrieval.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.ExternalDataMapper.Map(TriLibCore.AssetLoaderContext,System.String,System.String@)">
            <summary>
            Attempts to locate and open the data resource corresponding to 
            <paramref name="originalFilename"/> in the context of a TriLib model load. 
            Implementers can check the file system, network sources, or other data repositories 
            to resolve the file path.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing loading settings, callbacks, 
            and references to the model’s assets and hierarchy.
            </param>
            <param name="originalFilename">
            The name or partial path of the resource as referenced in the source file 
            (e.g., a texture filename or other embedded data pointer).
            </param>
            <param name="finalPath">
            Outputs the resolved, absolute path to the located resource. 
            Returns <c>null</c> if the resource could not be found.
            </param>
            <returns>
            A <see cref="T:System.IO.Stream"/> to the resource if located successfully; otherwise, 
            <c>null</c> if the file could not be found or opened.
            </returns>
        </member>
        <member name="T:TriLibCore.Mappers.HumanoidAvatarMapper">
            <summary>
            Provides functionality to convert a loaded model’s bones into a Unity humanoid avatar hierarchy. 
            This class enforces humanoid-like orientations (e.g., T-pose) and aligns bone transforms 
            to standardized directional vectors. Subclasses can extend this mapper to refine or modify 
            default humanoid bone mapping processes.
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.HumanoidAvatarMapper.BoneReferenceUp">
            <summary>
            Specifies reference "up" directions for known humanoid bones. These vectors are used 
            as orientation targets when ensuring a T-pose or standard humanoid posture.
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.HumanoidAvatarMapper.BoneReferenceRight">
            <summary>
            Specifies reference “right” directions for known humanoid bones. 
            Together with <see cref="F:TriLibCore.Mappers.HumanoidAvatarMapper.BoneReferenceUp"/>, these vectors help 
            achieve a standardized bone orientation.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.EnforceTPose(TriLibCore.AssetLoaderContext,System.Collections.Generic.Dictionary{TriLibCore.General.BoneMapping,UnityEngine.Transform})">
            <summary>
            Ensures the model’s limbs and spine are oriented in a T-pose, if requested. This 
            involves rotating specific bone pairs (spine, arms, legs, etc.) and adjusting the 
            hips, allowing the rest of the rig to maintain consistent humanoid alignment.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> with references to the loaded <see cref="T:UnityEngine.GameObject"/>, 
            user-defined <see cref="T:TriLibCore.AssetLoaderOptions"/>, and other contextual data.
            </param>
            <param name="mapping">
            A dictionary mapping <see cref="T:TriLibCore.General.BoneMapping"/> keys (representing <see cref="T:UnityEngine.HumanBodyBones"/> 
            entries) to actual <see cref="T:UnityEngine.Transform"/> references in the loaded model hierarchy.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.AdjustHips(TriLibCore.AssetLoaderContext,UnityEngine.Vector3,UnityEngine.Vector3,System.Collections.Generic.Dictionary{TriLibCore.General.BoneMapping,UnityEngine.Transform})">
            <summary>
            Performs a small rotation on the “Hips” bone to align the character’s forward axis
            with the given <paramref name="final"/> direction, ensuring the model faces forward in T-pose.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> holding references to loaded <see cref="T:UnityEngine.GameObject"/>s 
            and user options.
            </param>
            <param name="reference">
            The computed forward direction based on current bone alignment.
            </param>
            <param name="final">
            The desired final forward axis for the hips (usually <c>Vector3.forward</c>).
            </param>
            <param name="mapping">
            Bone mapping dictionary used to locate the “Hips” transform.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.GetReferenceForward(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{TriLibCore.General.BoneMapping,UnityEngine.Transform})">
            <summary>
            Determines a reference forward vector by examining two pairs of bones—one for the up 
            (e.g., “Spine”) and one for the right (e.g., “LeftUpperArm” vs. “RightUpperArm”). 
            This vector is used to help align the torso in a humanoid T-pose.
            </summary>
            <param name="upA">The name of the parent bone for the up vector reference (e.g., “Hips”).</param>
            <param name="upB">The child bone for the up vector reference (e.g., “Spine”).</param>
            <param name="rightA">A bone on the left side (e.g., “LeftUpperArm”).</param>
            <param name="rightB">A bone on the right side (e.g., “RightUpperArm”).</param>
            <param name="mapping">
            The dictionary mapping TriLib’s <see cref="T:TriLibCore.General.BoneMapping"/> to <see cref="T:UnityEngine.Transform"/> references.
            </param>
            <returns>A normalized <c>Vector3</c> representing a forward axis for the model’s torso.</returns>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.EnforceBoneTPose(System.String,System.String,System.Collections.Generic.Dictionary{TriLibCore.General.BoneMapping,UnityEngine.Transform},System.Nullable{UnityEngine.Vector3})">
            <summary>
            Ensures a single bone axis is aligned with expected reference vectors, optionally 
            using a <paramref name="referenceForward"/> for cross product alignment 
            (e.g., for spine or leg bones).
            </summary>
            <param name="parentBoneName">The parent bone, e.g. “Spine”, “LeftUpperArm”.</param>
            <param name="boneName">The child bone whose direction we want to standardize, e.g. “Chest”.</param>
            <param name="mapping">The dictionary mapping TriLib bones to scene <see cref="T:UnityEngine.Transform"/> references.</param>
            <param name="referenceForward">
            Optional forward direction for additional cross alignment. If <c>null</c>, only 
            the main up-axis alignment is performed.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.FindMappedBone(System.String,System.Collections.Generic.Dictionary{TriLibCore.General.BoneMapping,UnityEngine.Transform})">
            <summary>
            Locates a mapped bone within the dictionary of <see cref="T:TriLibCore.General.BoneMapping"/> to <see cref="T:UnityEngine.Transform"/>.
            Uses Unity’s <see cref="P:UnityEngine.HumanTrait.BoneName"/> array to match TriLib’s bones with the requested <paramref name="boneName"/>.
            </summary>
            <param name="boneName">The humanoid bone name to search for (e.g., “Spine”, “Head”).</param>
            <param name="mapping">
            The dictionary mapping TriLib’s <see cref="T:TriLibCore.General.BoneMapping"/> keys to actual <see cref="T:UnityEngine.Transform"/> references in the scene.
            </param>
            <returns>The <see cref="T:UnityEngine.Transform"/> matching the specified <paramref name="boneName"/>, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.GetChildBoneDirection(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Computes a normalized direction vector from <paramref name="parentTransform"/> 
            to <paramref name="transform"/>, representing the “bone up” axis 
            in the current hierarchical structure.
            </summary>
            <param name="parentTransform">The parent bone’s <see cref="T:UnityEngine.Transform"/>.</param>
            <param name="transform">The child bone’s <see cref="T:UnityEngine.Transform"/>.</param>
            <returns>A <c>Vector3</c> normalized direction from parent to child.</returns>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.PostSetup(TriLibCore.AssetLoaderContext,System.Collections.Generic.Dictionary{TriLibCore.General.BoneMapping,UnityEngine.Transform})">
            <summary>
            Called once the basic bone mapping is established. If <see cref="F:TriLibCore.AssetLoaderOptions.SampleBindPose"/> 
            is enabled, the model is sampled at bind pose. If <see cref="F:TriLibCore.AssetLoaderOptions.EnforceTPose"/> 
            is enabled, the mapped bones are rotated to align the character in a T-pose configuration 
            (spine/arms/legs arranged horizontally).
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> referencing user-defined options and loaded GameObjects.
            </param>
            <param name="mapping">
            The finalized dictionary mapping TriLib <see cref="T:TriLibCore.General.BoneMapping"/> entries to actual <see cref="T:UnityEngine.Transform"/> references.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.HumanoidAvatarMapper.Map(TriLibCore.AssetLoaderContext)">
            <summary>
            Attempts to map the loaded model bones into a humanoid rig, returning 
            a <see cref="T:System.Collections.Generic.Dictionary`2"/> for further processing. 
            This method can be overridden to implement custom bone search or heuristics.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing references to the loaded GameObject 
            hierarchy and relevant import options.
            </param>
            <returns>
            A dictionary mapping each humanoid <see cref="T:TriLibCore.General.BoneMapping"/> entry to the 
            corresponding <see cref="T:UnityEngine.Transform"/> in the scene. By default, returns <c>null</c>.
            </returns>
        </member>
        <member name="T:TriLibCore.Mappers.LipSyncMapper">
            <summary>
            Provides a mechanism for mapping blend shapes within a model’s geometry to 
            corresponding visemes (lip-sync shapes). This class can be extended to integrate 
            TriLib-loaded models with custom lip-sync systems, enabling facial animation driven 
            by audio or other input sources.
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.LipSyncMapper.CheckingOrder">
            <summary>
            Defines the mapper’s priority when multiple <see cref="T:TriLibCore.Mappers.LipSyncMapper"/> instances 
            are present in the same <see cref="T:TriLibCore.AssetLoaderOptions"/>. A lower value means 
            this mapper will be attempted first.
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.LipSyncMapper.VisemeCount">
            <summary>
            Specifies the total number of lip-sync visemes recognized by this mapper, 
            allowing for indexed lookups or array-based mappings.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.LipSyncMapper.Map(TriLibCore.AssetLoaderContext,TriLibCore.Interfaces.IGeometryGroup,System.Int32[]@)">
            <summary>
            Attempts to match each of the <see cref="F:TriLibCore.Mappers.LipSyncMapper.VisemeCount"/> visemes 
            to corresponding blend shape keys in the provided <paramref name="geometryGroup"/>. 
            If any matches are found, their indices are stored in the <paramref name="output"/> array.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> holding model loading data, including 
            loaded <see cref="T:UnityEngine.GameObject"/> references, options, and callbacks.
            </param>
            <param name="geometryGroup">
            The <see cref="T:TriLibCore.Interfaces.IGeometryGroup"/> containing blend shape data 
            (<see cref="P:TriLibCore.Interfaces.IGeometryGroup.BlendShapeKeys"/>).
            </param>
            <param name="output">
            An integer array of length <see cref="F:TriLibCore.Mappers.LipSyncMapper.VisemeCount"/> that, upon success, 
            will hold the matched blend shape key indices for each viseme. If no match is found 
            for a given viseme, the corresponding index is set to <c>-1</c>.
            </param>
            <returns>
            <c>true</c> if at least one viseme was successfully mapped to a blend shape key; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Mappers.LipSyncMapper.MapViseme(TriLibCore.AssetLoaderContext,TriLibCore.General.LipSyncViseme,TriLibCore.Interfaces.IGeometryGroup)">
            <summary>
            Maps a single viseme (lip-sync shape) to its corresponding blend shape key 
            within the specified <paramref name="geometryGroup"/>, returning the index of 
            that blend shape key if found. 
            Override this method to customize name matching or heuristic-based matching.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> referencing the model’s loaded data 
            and import settings.
            </param>
            <param name="viseme">
            The specific lip-sync shape to match.
            </param>
            <param name="geometryGroup">
            The geometric data group holding blend shape keys. This method tries to 
            locate one that corresponds to the requested viseme.
            </param>
            <returns>
            The blend shape key index if a matching shape is found; otherwise <c>-1</c> 
            to indicate no match.
            </returns>
        </member>
        <member name="T:TriLibCore.Mappers.MaterialMapper">
            <summary>
            Serves as an abstract base class for converting TriLib virtual materials into Unity
            <see cref="T:UnityEngine.Material"/> objects. Classes inheriting from <see cref="T:TriLibCore.Mappers.MaterialMapper"/> 
            must implement or override the provided methods and properties to handle specific 
            pipeline requirements (e.g., Standard, HDRP, URP, custom shaders, etc.).
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.UseShaderVariantCollection">
            <summary>
            If overridden to return <c>true</c>, indicates that this mapper uses a Shader Variant
            Collection instead of the usual material presets. By default, it returns <c>false</c>.
            </summary>
            <remarks>
            Implementers can override this to provide advanced material handling, especially when
            working with different pipelines or specialized shader setups.
            </remarks>
        </member>
        <member name="F:TriLibCore.Mappers.MaterialMapper.CheckingOrder">
            <summary>
            A numeric priority determining the order in which this mapper is checked for compatibility 
            against a given material. Higher values mean earlier checks; mappers with lower priority 
            values are evaluated later if no suitable match is found.
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.MaterialMapper.DisableAlpha">
            <summary>
            If enabled, alpha-based material features (e.g., transparency) will be disabled, 
            effectively forcing the usage of a purely opaque workflow.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.RegisteredMapperNamespaces">
            <summary>
            A list of default namespaces used to register TriLib material mappers
            (e.g., "TriLibCore.HDRP.Mappers", "TriLibCore.URP.Mappers").
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.RegisteredMappers">
            <summary>
            A list of default mapper class names recognized by TriLib 
            (e.g., "HDRPMaterialMapper", "UniversalRPMaterialMapper", "StandardMaterialMapper").
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.ExtractMetallicAndSmoothness">
            <summary>
            Indicates whether TriLib automatically extracts metallic and smoothness data
            from the source material textures. Inheritors can override this 
            to disable the extraction step.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.CutoutMaterialPreset">
            <summary>
            A cutout material preset for materials that use alpha testing 
            (fully transparent vs. fully opaque).
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.CutoutMaterialPresetNoMetallicTexture">
            <summary>
            A cutout material preset for materials with no metallic texture usage.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.MaterialPreset">
            <summary>
            The default (opaque) material preset.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.MaterialPresetNoMetallicTexture">
            <summary>
            The default (opaque) material preset for materials with no metallic texture usage.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.TransparentComposeMaterialPreset">
            <summary>
            A “compose” material preset used in layered alpha workflows when 
            <see cref="F:TriLibCore.AssetLoaderOptions.AlphaMaterialMode"/> is set to <c>CutoutAndTransparent</c>.
            This is applied as a secondary pass for partially transparent regions.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.TransparentComposeMaterialPresetNoMetallicTexture">
            <summary>
            The “compose” material preset for partially transparent materials 
            that have no metallic texture usage.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.TransparentMaterialPreset">
            <summary>
            A fully transparent (alpha) material preset.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.TransparentMaterialPresetNoMetallicTexture">
            <summary>
            A fully transparent (alpha) material preset for materials without a metallic texture.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.LoadingMaterial">
            <summary>
            An optional placeholder material used while a model’s final materials and textures
            are still loading.
            </summary>
        </member>
        <member name="P:TriLibCore.Mappers.MaterialMapper.UsesCoroutines">
            <summary>
            Indicates whether this mapper’s <see cref="M:TriLibCore.Mappers.MaterialMapper.Map(TriLibCore.MaterialMapperContext)"/> process requires an 
            asynchronous coroutine approach (<c>true</c>), or can run synchronously (<c>false</c>).
            </summary>
            <remarks>
            Returning <c>true</c> means <see cref="M:TriLibCore.Mappers.MaterialMapper.MapCoroutine(TriLibCore.MaterialMapperContext)"/> will be called instead of <see cref="M:TriLibCore.Mappers.MaterialMapper.Map(TriLibCore.MaterialMapperContext)"/>.
            </remarks>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.ApplyMaterialToRenderer(TriLibCore.MaterialRendererContext)">
            <summary>
            Applies the final Unity <see cref="T:UnityEngine.Material"/> to the given <see cref="T:UnityEngine.Renderer"/> 
            based on the <paramref name="materialRendererContext"/>. If 
            <see cref="F:TriLibCore.AssetLoaderOptions.AlphaMaterialMode"/> is set to 
            <c>CutoutAndTransparent</c>, a second pass material may be created for partial translucency.
            </summary>
            <param name="materialRendererContext">
            The context containing a <see cref="T:UnityEngine.Renderer"/>, geometry data, and references to 
            the TriLib <see cref="T:TriLibCore.MaterialMapperContext"/>.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.Cleanup(TriLibCore.MaterialRendererContext)">
            <summary>
            Releases CPU mesh data (if allowed) once the material has been assigned,
            and if no blend shape mapper is in use. This can reduce runtime memory usage.
            </summary>
            <param name="materialRendererContext">
            The context for a particular <see cref="T:UnityEngine.Renderer"/> and submesh, containing the model’s mesh reference.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.GetDiffuseColorName(TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the property name for the diffuse (albedo) color within this mapper’s target shaders.
            </summary>
            <param name="materialMapperContext">Context containing the TriLib virtual material and Unity material references.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.GetDiffuseTextureName(TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the property name for the diffuse (albedo) texture within this mapper’s target shaders.
            </summary>
            <param name="materialMapperContext">Context containing the TriLib virtual material and Unity material references.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.GetEmissionColorName(TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the property name for the emissive color within this mapper’s target shaders.
            </summary>
            <param name="materialMapperContext">Context containing the TriLib virtual material and Unity material references.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.GetGlossinessOrRoughnessName(TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the property name for glossiness or roughness, depending on the shader’s workflow.
            </summary>
            <param name="materialMapperContext">Context containing the TriLib virtual material and Unity material references.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.GetGlossinessOrRoughnessTextureName(TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the property name for the glossiness or roughness texture, if applicable.
            </summary>
            <param name="materialMapperContext">Context containing the TriLib virtual material and Unity material references.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.GetMetallicName(TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the property name for metallic values in PBR workflows.
            </summary>
            <param name="materialMapperContext">Context containing the TriLib virtual material and Unity material references.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.GetMetallicTextureName(TriLibCore.MaterialMapperContext)">
            <summary>
            Retrieves the property name for the metallic texture, if used in the target shader.
            </summary>
            <param name="materialMapperContext">Context containing the TriLib virtual material and Unity material references.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.IsCompatible(TriLibCore.MaterialMapperContext)">
            <summary>
            Determines whether this mapper can handle the specified material (e.g., by checking
            shader keywords, pipeline features, or other criteria). Mappers with <c>false</c> returns 
            are skipped in favor of others with higher compatibility.
            </summary>
            <param name="materialMapperContext">
            The context providing references to both the TriLib <c>VirtualMaterial</c> data
            and the underlying Unity <see cref="T:UnityEngine.Material"/>.
            </param>
            <returns><c>true</c> if compatible; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.Map(TriLibCore.MaterialMapperContext)">
            <summary>
            Begins the material mapping process synchronously, converting TriLib’s 
            <see cref="T:TriLibCore.General.VirtualMaterial"/> into a Unity <see cref="T:UnityEngine.Material"/> (or multiple passes).
            </summary>
            <param name="materialMapperContext">
            Holds references to the TriLib virtual material, the target Unity material, 
            and the overall <see cref="T:TriLibCore.AssetLoaderContext"/>.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.MapCoroutine(TriLibCore.MaterialMapperContext)">
            <summary>
            Begins the material mapping process asynchronously, yielding control back to the caller
            to allow frame updates or concurrent loading. Called if <see cref="P:TriLibCore.Mappers.MaterialMapper.UsesCoroutines"/> 
            returns <c>true</c>.
            </summary>
            <param name="materialMapperContext">
            Holds references to the TriLib virtual material, the target Unity material, 
            and the overall <see cref="T:TriLibCore.AssetLoaderContext"/>.
            </param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> sequence that yields at intermediate steps for cooperative 
            asynchronous processing.
            </returns>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.CheckTextureOffsetAndScaling(TriLibCore.TextureLoadingContext)">
            <summary>
            Ensures that the loaded texture respects any offset or scaling set in the TriLib
            virtual material. This method updates either the Unity <see cref="T:UnityEngine.Material"/> 
            or the <see cref="T:TriLibCore.General.VirtualMaterial"/> properties depending on the setup.
            </summary>
            <param name="textureLoadingContext">
            Contains texture data, references to the <see cref="T:TriLibCore.MaterialMapperContext"/>, and 
            flags indicating if the texture was successfully loaded.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.CheckTextureOffsetAndScaling(TriLibCore.MaterialMapperContext,TriLibCore.Interfaces.ITexture,System.Boolean)">
            <summary>
            (Obsolete) An older version of <see cref="M:TriLibCore.Mappers.MaterialMapper.CheckTextureOffsetAndScaling(TriLibCore.TextureLoadingContext)"/> that 
            takes separate parameters for the TriLib texture and a loaded flag. 
            Please use the newer single-parameter method instead.
            </summary>
            <param name="materialMapperContext">
            Contains references to the TriLib virtual material and the Unity material being generated.
            </param>
            <param name="texture">The TriLib <see cref="T:TriLibCore.Interfaces.ITexture"/> being applied.</param>
            <param name="textureLoaded">Whether the texture has successfully loaded into memory.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.CheckTextureOffsetAndScalingCoroutine(TriLibCore.TextureLoadingContext)">
            <summary>
            A coroutine-based version of <see cref="M:TriLibCore.Mappers.MaterialMapper.CheckTextureOffsetAndScaling(TriLibCore.TextureLoadingContext)"/>, useful for
            stepped or asynchronous processing in complex loading workflows.
            </summary>
            <param name="textureLoadingContext">
            Contains the texture data and references to the <see cref="T:TriLibCore.MaterialMapperContext"/>.
            </param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> that yields immediately after applying offset and scale 
            (for consistency with async logic).
            </returns>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.BuildMaterial(TriLibCore.MaterialMapperContext)">
            <summary>
            Composes a final Unity material based on the TriLib <see cref="T:TriLibCore.General.VirtualMaterial"/> properties
            and the specific property names or overrides provided by an inheriting mapper.
            </summary>
            <param name="materialMapperContext">
            References the TriLib virtual material, the in-progress Unity material, 
            and the overall <see cref="T:TriLibCore.AssetLoaderContext"/>.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.LoadTextureWithCallbacks(TriLibCore.MaterialMapperContext,TriLibCore.General.TextureType,TriLibCore.Interfaces.ITexture,System.Action{TriLibCore.TextureLoadingContext}[])">
            <summary>
            Loads a texture synchronously while providing optional callback actions that are triggered 
            once the texture is fully processed.
            </summary>
            <param name="materialMapperContext">
            Provides references to the TriLib virtual material, the Unity material, 
            and the broader <see cref="T:TriLibCore.AssetLoaderContext"/>.
            </param>
            <param name="textureType">Indicates the conceptual role of the texture (e.g., diffuse, normal, metallic).</param>
            <param name="texture">The TriLib <see cref="T:TriLibCore.Interfaces.ITexture"/> to be loaded.</param>
            <param name="onTextureProcessed">
            Zero or more callback actions invoked after the texture is processed. Each action
            receives a <see cref="T:TriLibCore.TextureLoadingContext"/> with details about the load result.
            </param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.LoadTextureWithCoroutineCallbacks(TriLibCore.MaterialMapperContext,TriLibCore.General.TextureType,TriLibCore.Interfaces.ITexture,System.Func{TriLibCore.TextureLoadingContext,System.Collections.IEnumerable}[])">
            <summary>
            Loads a texture asynchronously, returning a coroutine-like sequence of steps 
            which can be interleaved with other tasks. This is useful for large textures 
            or slower I/O operations.
            </summary>
            <param name="materialMapperContext">
            Context referencing the TriLib virtual material, the target Unity material, and
            the broader <see cref="T:TriLibCore.AssetLoaderContext"/>.
            </param>
            <param name="textureType">Indicates the conceptual role of the texture (e.g., diffuse, normal, metallic).</param>
            <param name="texture">The TriLib <see cref="T:TriLibCore.Interfaces.ITexture"/> to be loaded.</param>
            <param name="onTextureProcessed">
            Zero or more callback functions (coroutines) executed after texture loading 
            to apply post-processing or run custom logic (e.g., compressing, adjusting channels, etc.).
            </param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> enumerator that yields at various stages of texture loading
            for cooperative multitasking.
            </returns>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.ApplyMaterialProperties(TriLibCore.MaterialMapperContext,UnityEngine.Material)">
            <summary>
            Applies stored property values (colors, floats, vectors, textures, etc.) from
            the TriLib <see cref="T:TriLibCore.General.VirtualMaterial"/> into the final Unity <see cref="T:UnityEngine.Material"/>.
            </summary>
            <param name="materialMapperContext">Contains references to both TriLib and Unity material objects.</param>
            <param name="finalMaterial">The instantiated Unity material to be configured.</param>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.HasMetallicRoughnessOrSmoothnessTexture(TriLibCore.MaterialMapperContext)">
            <summary>
            Checks if the <see cref="T:TriLibCore.General.VirtualMaterial"/> contains references to metallic, roughness, or smoothness textures.
            </summary>
            <param name="materialMapperContext">Provides references to TriLib’s virtual material and the Unity <see cref="T:UnityEngine.Material"/>.</param>
            <returns><c>true</c> if any relevant texture is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.InstantiateSuitableMaterial(TriLibCore.MaterialMapperContext)">
            <summary>
            Instantiates an appropriate Unity material preset based on alpha usage, presence of metallic textures,
            and mapper-specific material references. Falls back to a basic “Standard” shader if no presets
            are available.
            </summary>
            <param name="materialMapperContext">The context storing references to the TriLib and Unity material data.</param>
            <returns>An instantiated Unity material ready for property assignment.</returns>
        </member>
        <member name="M:TriLibCore.Mappers.MaterialMapper.InstantiateSuitableSecondPassMaterial(TriLibCore.MaterialMapperContext)">
            <summary>
            Creates or retrieves a second-pass material for partial alpha effects 
            when using <c>AlphaMaterialMode.CutoutAndTransparent</c>. This additional
            material is used to render partially translucent areas layered over the 
            original submesh pass.
            </summary>
            <param name="materialMapperContext">
            Holds references to the virtual and Unity materials, as well as the 
            <see cref="T:TriLibCore.AssetLoaderContext"/>.
            </param>
            <returns>
            A new Unity <see cref="T:UnityEngine.Material"/> instance or an existing cached alpha material,
            or <c>null</c> if no suitable material could be instantiated.
            </returns>
        </member>
        <member name="T:TriLibCore.Mappers.NameMapper">
            <summary>
            Provides a mechanism for generating custom <see cref="T:UnityEngine.GameObject"/> names 
            in the scene, based on metadata from the source 3D model. By inheriting 
            <see cref="T:TriLibCore.Mappers.NameMapper"/> and overriding <see cref="M:TriLibCore.Mappers.NameMapper.Map(TriLibCore.AssetLoaderContext,TriLibCore.ModelNamingData,TriLibCore.Interfaces.IModel,System.String)"/>, users can implement 
            specialized naming schemes (e.g., appending model part numbers, classes, or other identifiers).
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.NameMapper.Map(TriLibCore.AssetLoaderContext,TriLibCore.ModelNamingData,TriLibCore.Interfaces.IModel,System.String)">
            <summary>
            Generates a custom name for the loaded <see cref="T:UnityEngine.GameObject"/> based on the provided model data. 
            If this method returns <c>null</c>, TriLib will fall back to its default naming strategy.
            </summary>
            <remarks>
            Returning <c>null</c> indicates that the default TriLib naming pattern should be used. 
            Otherwise, the returned string is applied directly as the <see cref="T:UnityEngine.GameObject"/> name.
            </remarks>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing references to the model’s loading options, 
            callbacks, and the root <see cref="T:UnityEngine.GameObject"/> structure.
            </param>
            <param name="data">
            A <see cref="T:TriLibCore.ModelNamingData"/> object containing fields such as original name, class, ID, 
            and part number from the source file.
            </param>
            <param name="model">
            The <see cref="T:TriLibCore.Interfaces.IModel"/> representing a portion of the loaded hierarchy 
            (e.g., a mesh segment or node).
            </param>
            <param name="readerName">
            The name of the TriLib reader used to load the model data (e.g., “FBXReader”, “GltfReader”).
            </param>
            <returns>
            A string representing the desired <see cref="T:UnityEngine.GameObject"/> name. If <c>null</c>, 
            the default TriLib naming will be used instead.
            </returns>
        </member>
        <member name="T:TriLibCore.Mappers.RootBoneMapper">
            <summary>
            Provides functionality to locate a “root bone” for rigging or animation setup 
            within the loaded model hierarchy. This can be essential when binding skin meshes 
            or humanoid rigs, as well as customizing bone references in scripts.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.RootBoneMapper.Map(TriLibCore.AssetLoaderContext)">
            <summary>
            Attempts to find a root bone in the loaded model hierarchy, returning the 
            <see cref="T:UnityEngine.Transform"/> to be used as the topmost bone for binding or rigging. 
            This method is now marked as <c>Obsolete</c>; use <see cref="M:TriLibCore.Mappers.RootBoneMapper.Map(TriLibCore.AssetLoaderContext,System.Collections.Generic.IList{UnityEngine.Transform})"/> instead.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> referencing loaded <see cref="T:UnityEngine.GameObject"/> data, 
            user options, and other contextual information.
            </param>
            <returns>
            The root bone <see cref="T:UnityEngine.Transform"/> if one is found or chosen; 
            by default, the method returns <c>assetLoaderContext.RootGameObject.transform</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Mappers.RootBoneMapper.Map(TriLibCore.AssetLoaderContext,System.Collections.Generic.IList{UnityEngine.Transform})">
            <summary>
            Finds a suitable root bone from a provided list of potential bone transforms. 
            This is the highest-level bone in the hierarchy that others descend from. 
            Subclasses should override this method to implement more advanced selection logic 
            (e.g., checking naming patterns, evaluating bone connections, etc.).
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> referencing the loaded model’s GameObjects, 
            user-defined import options, and callbacks.
            </param>
            <param name="bones">
            An ordered or unordered list of transforms that may qualify as bones in the 
            skeleton hierarchy. Subclasses can evaluate these to decide which one 
            is truly at the top of the chain.
            </param>
            <returns>
            The <see cref="T:UnityEngine.Transform"/> chosen to serve as the root bone. By default, 
            this method returns <c>assetLoaderContext.RootGameObject.transform</c>.
            </returns>
        </member>
        <member name="T:TriLibCore.Mappers.TextureMapper">
            <summary>
            Provides a mechanism to locate and load texture data for a model, either by 
            leveraging its original filename or tapping into embedded resources. 
            <see cref="T:TriLibCore.Mappers.TextureMapper"/> can be subclassed to implement specialized 
            texture-finding strategies—for instance, searching alternative file paths or 
            retrieving assets from remote sources.
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.TextureMapper.CheckingOrder">
            <summary>
            Indicates the relative priority of this mapper when multiple <see cref="T:TriLibCore.Mappers.TextureMapper"/> 
            instances are present in an <see cref="T:TriLibCore.AssetLoaderOptions"/>. Mappers with lower 
            <c>CheckingOrder</c> values are attempted first.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.TextureMapper.Map(TriLibCore.AssetLoaderContext,TriLibCore.Interfaces.ITexture)">
            <summary>
            Attempts to retrieve a <see cref="T:TriLibCore.TextureLoadingContext"/> that points to the data stream
            for the specified <paramref name="texture"/>. This method is marked as <c>Obsolete</c>,
            and the recommended approach is to use the overload that accepts 
            <see cref="T:TriLibCore.TextureLoadingContext"/> instead.
            </summary>
            <remarks>
            Returning <c>null</c> indicates that this mapper did not find a suitable data source, 
            so TriLib may attempt other mappers.
            </remarks>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> providing references to loaded model data, user 
            options, and other contextual information.
            </param>
            <param name="texture">
            The TriLib <see cref="T:TriLibCore.Interfaces.ITexture"/> instance containing metadata (filename, embedded data pointers, etc.).
            </param>
            <returns>
            A <see cref="T:TriLibCore.TextureLoadingContext"/> containing the data <see cref="T:System.IO.Stream"/> 
            if successful; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:TriLibCore.Mappers.TextureMapper.Map(TriLibCore.TextureLoadingContext)">
            <summary>
            Attempts to retrieve or open the data stream for <paramref name="textureLoadingContext"/>. 
            By default, this method calls the obsolete <see cref="M:TriLibCore.Mappers.TextureMapper.Map(TriLibCore.AssetLoaderContext,TriLibCore.Interfaces.ITexture)"/> method 
            to maintain backwards compatibility, then assigns its resulting <see cref="T:System.IO.Stream"/> 
            to <paramref name="textureLoadingContext"/>.
            </summary>
            <param name="textureLoadingContext">
            Holds data pertinent to loading a specific texture (e.g., the <see cref="T:TriLibCore.Interfaces.ITexture"/> reference, 
            <see cref="T:TriLibCore.AssetLoaderContext"/>, and any preexisting stream references).
            </param>
        </member>
        <member name="T:TriLibCore.Mappers.UserPropertiesMapper">
            <summary>
            Provides a mechanism for handling custom properties embedded within 3D model data.
            By subclassing <see cref="T:TriLibCore.Mappers.UserPropertiesMapper"/>, developers can intercept and process 
            user-defined attributes (e.g., metadata or extended properties) attached to a model’s 
            nodes, materials, or other elements.
            </summary>
        </member>
        <member name="M:TriLibCore.Mappers.UserPropertiesMapper.OnProcessUserData(TriLibCore.AssetLoaderContext,UnityEngine.GameObject,System.String,System.Object)">
            <summary>
            Invoked whenever a user-defined property (e.g., custom FBX attributes, metadata fields, etc.) 
            is found on a node in the loaded model. Override this method to implement 
            custom logic for storing, interpreting, or reacting to these properties in your 
            Unity <see cref="T:UnityEngine.GameObject"/> hierarchy.
            </summary>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> containing references to loaded model objects,
            import settings, and other contextual data.
            </param>
            <param name="gameObject">
            The <see cref="T:UnityEngine.GameObject"/> to which the property belongs.
            </param>
            <param name="propertyName">
            The name or identifier of the custom property (e.g., "collisionType", "lightmapIndex").
            </param>
            <param name="propertyValue">
            The value of the custom property. Its type can vary (e.g., <see cref="T:System.String"/>, 
            <see cref="T:System.Single"/>, arrays, or other complex data structures).
            </param>
        </member>
        <member name="T:TriLibCore.Mappers.VisemeCandidate">
            <summary>Represents a Viseme mapping candidate. A Lip-Sync Mapper may use this information to find suitable Blend-Shapes Keys.</summary>
        </member>
        <member name="F:TriLibCore.Mappers.VisemeCandidate.Viseme">
            <summary>
            Viseme type.
            </summary>
        </member>
        <member name="F:TriLibCore.Mappers.VisemeCandidate.CandidateNames">
            <summary>
            List of candidate names.
            </summary>
        </member>
        <member name="T:TriLibCore.ReaderBase">
            <summary>
            Represents the base class for file-format Readers. 
            Defines the core functionality and workflow for loading a model into a <see cref="T:TriLibCore.Interfaces.IRootModel"/>.
            </summary>
        </member>
        <member name="F:TriLibCore.ReaderBase.ProfileStepCallback">
            <summary>
            An optional callback for profiling each loading step. 
            Parameters: (operationName, resourceName, duration, memoryUsed).
            </summary>
        </member>
        <member name="T:TriLibCore.ReaderBase.PostLoadingSteps">
            <summary>
            Represents the post-loading steps enumeration, used to track the final stages of model processing.
            </summary>
        </member>
        <member name="F:TriLibCore.ReaderBase.PostLoadingSteps.PostProcessAnimationClips">
            <summary>
            Indicates post-processing animation clips.
            </summary>
        </member>
        <member name="F:TriLibCore.ReaderBase.PostLoadingSteps.ProcessTextures">
            <summary>
            Indicates processing textures.
            </summary>
        </member>
        <member name="F:TriLibCore.ReaderBase.PostLoadingSteps.PostProcessRenderers">
            <summary>
            Indicates post-processing renderers.
            </summary>
        </member>
        <member name="F:TriLibCore.ReaderBase.PostLoadingSteps.FinishedProcessing">
            <summary>
            Indicates that all processing is complete.
            </summary>
        </member>
        <member name="P:TriLibCore.ReaderBase.Name">
            <summary>
            Gets the name of this reader.
            </summary>
        </member>
        <member name="P:TriLibCore.ReaderBase.LoadingStepEnumNames">
            <summary>
            Gets the names of the loading steps by reflecting over <see cref="P:TriLibCore.ReaderBase.LoadingStepEnumType"/>.
            </summary>
        </member>
        <member name="M:TriLibCore.ReaderBase.MapName(TriLibCore.AssetLoaderContext,TriLibCore.ModelNamingData,TriLibCore.Interfaces.IModel,System.String)">
            <summary>
            Uses the object reader data to create the final model name. 
            If <see cref="F:TriLibCore.AssetLoaderOptions.NameMapper"/> is set, it will be used to generate the model name.
            </summary>
            <param name="assetLoaderContext">The current <see cref="P:TriLibCore.ReaderBase.AssetLoaderContext"/>.</param>
            <param name="data">The naming data (model name, material name, ID, etc.) to consider.</param>
            <param name="model">The loaded model for which to generate a name.</param>
            <param name="readerName">The name of this reader.</param>
            <returns>The resulting name for the model.</returns>
        </member>
        <member name="P:TriLibCore.ReaderBase.LoadingStepsCount">
            <summary>
            Gets the total number of loading steps for this reader.
            </summary>
        </member>
        <member name="P:TriLibCore.ReaderBase.LoadingStepEnumType">
            <summary>
            Gets the <see cref="T:System.Type"/> that defines the loading steps (an enumeration of step definitions).
            </summary>
        </member>
        <member name="P:TriLibCore.ReaderBase.AssetLoaderContext">
            <summary>
            Provides access to the <see cref="P:TriLibCore.ReaderBase.AssetLoaderContext"/> used to load the model.
            </summary>
        </member>
        <member name="M:TriLibCore.ReaderBase.ReadStream(System.IO.Stream,TriLibCore.AssetLoaderContext,System.String,System.Action{TriLibCore.AssetLoaderContext,System.Single})">
            <summary>
            Reads a model from the specified <paramref name="stream"/> using the given <paramref name="assetLoaderContext"/>,
            optionally associating a <paramref name="filename"/> and progress callback <paramref name="onProgress"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the model data to load.</param>
            <param name="assetLoaderContext">The context that provides loading options and tracks loaded data.</param>
            <param name="filename">
            An optional filename for this model if loading from local storage; used for naming or reference.
            </param>
            <param name="onProgress">
            An optional callback invoked to report loading progress (<see cref="F:TriLibCore.AssetLoaderContext.LoadingProgress"/>).
            </param>
            <returns>The loaded root model, or <c>null</c> if no model is loaded in this method.</returns>
        </member>
        <member name="M:TriLibCore.ReaderBase.ReadExternalFile(System.String)">
            <summary>
            Reads an external file into a <see cref="T:System.IO.Stream"/>, trying any defined external data mapper first.
            If the file is not provided by the mapper, attempts to locate it via <see cref="M:TriLibCore.Utils.FileUtils.FindFile(System.String,System.String,System.Boolean)"/>.
            </summary>
            <param name="path">The relative or absolute path to the external file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> for the requested file, or <c>null</c> if the file could not be found.</returns>
        </member>
        <member name="M:TriLibCore.ReaderBase.CreateRootModel">
            <summary>
            Creates a <see cref="T:TriLibCore.Interfaces.IRootModel"/> specific to the implementing reader.
            </summary>
            <returns>A new instance of the reader's <see cref="T:TriLibCore.Interfaces.IRootModel"/> implementation.</returns>
        </member>
        <member name="M:TriLibCore.ReaderBase.PostProcessModel(TriLibCore.Interfaces.IRootModel@)">
            <summary>
            Applies final naming, pivot, and organizational transformations to the model after loading is complete.
            Also merges a single child if <see cref="F:TriLibCore.AssetLoaderOptions.MergeSingleChild"/> is set.
            </summary>
            <param name="model">The top-level <see cref="T:TriLibCore.Interfaces.IRootModel"/> loaded by this reader.</param>
        </member>
        <member name="M:TriLibCore.ReaderBase.UpdateLoadingPercentage(System.Single,System.Int32,System.Single)">
            <summary>
            Updates the model loading progress percentage. 
            This method is typically called at various stages of the loading and post-processing pipeline.
            </summary>
            <param name="value">A floating-point value representing the current sub-step progress.</param>
            <param name="step">The zero-based index of the current step.</param>
            <param name="maxValue">
            The maximum expected progress for the current step; if greater than zero, <paramref name="value"/> is normalized by this value.
            </param>
        </member>
        <member name="M:TriLibCore.ReaderBase.SetupStream(System.IO.Stream@)">
            <summary>
            Ensures that the given <paramref name="stream"/> is buffered in memory if needed, 
            based on the <see cref="F:TriLibCore.AssetLoaderOptions.BufferizeFiles"/> setting.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to possibly replace with a buffered <see cref="T:System.IO.MemoryStream"/>.</param>
        </member>
        <member name="T:TriLibCore.Textures.DefaultTextures">
            <summary>
            Represents a class containing the reference to all TriLib default textures.
            </summary>
        </member>
        <member name="P:TriLibCore.Textures.DefaultTextures.White">
            <summary>
            The default white texture.
            </summary>
        </member>
        <member name="T:TriLibCore.Textures.TextureLoaders">
            <summary>
            Provides methods for loading and processing textures (such as reading texture data, 
            creating <see cref="T:UnityEngine.Texture2D"/> instances, and applying post-processing operations).
            </summary>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.ResolveFilename(TriLibCore.Interfaces.ITexture,TriLibCore.AssetLoaderContext)">
            <summary>
            Attempts to resolve the <see cref="P:TriLibCore.Interfaces.ITexture.Filename"/> by searching in 
            <paramref name="assetLoaderContext"/>. This may update <see cref="P:TriLibCore.Interfaces.ITexture.ResolvedFilename"/> 
            if a matching file is found.
            </summary>
            <param name="texture">The texture to resolve.</param>
            <param name="assetLoaderContext">
            The <see cref="T:TriLibCore.AssetLoaderContext"/> that provides the base path and other loading options.
            </param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.LoadTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Loads a Unity texture from the data provided in the <paramref name="textureLoadingContext"/>.
            This method attempts to read raw or embedded texture data, then either uses Unity’s native 
            LoadImage or StbImageSharp to decode the image 
            into a <see cref="T:UnityEngine.Texture2D"/>.
            </summary>
            <param name="textureLoadingContext">
            The <see cref="T:TriLibCore.TextureLoadingContext"/> containing streams, raw data, 
            and options for texture creation.
            </param>
            <returns>
            <see langword="true"/> if the texture was successfully loaded; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.GetTextureDataStream(TriLibCore.TextureLoadingContext)">
            <summary>
            Retrieves the texture data stream from the context, either by calling 
            registered ITextureMapper instances, opening a file based 
            on <see cref="P:TriLibCore.Interfaces.ITexture.ResolvedFilename"/>, or using embedded data.
            </summary>
            <param name="textureLoadingContext">The context holding texture info and streams.</param>
            <returns>
            <see langword="true"/> if a valid data stream is available; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.ScanForAlphaPixels(TriLibCore.TextureLoadingContext)">
            <summary>
            Scans the texture’s pixel data for alpha values to detect if the texture contains 
            any non-opaque pixels. Updates <see cref="P:TriLibCore.TextureLoadingContext.HasAlpha"/> accordingly.
            </summary>
            <param name="textureLoadingContext">The context with texture data and format details.</param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.StbLoadFromContext(TriLibCore.TextureLoadingContext)">
            <summary>
            Loads a texture using <see cref="N:StbImageSharp"/> from the current stream in <paramref name="textureLoadingContext"/>.
            Flips the image vertically if needed, and sets the context’s dimension/format fields.
            </summary>
            <param name="textureLoadingContext">The context holding stream data and loading options.</param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.CreateAndLoadRawData(TriLibCore.TextureLoadingContext,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:UnityEngine.Texture2D"/> using <paramref name="width"/> x <paramref name="height"/> 
            with <paramref name="components"/> channels, and then copies the <paramref name="data"/> into it.
            </summary>
            <param name="textureLoadingContext">The context to update.</param>
            <param name="width">The width of the new texture.</param>
            <param name="height">The height of the new texture.</param>
            <param name="data">The raw pixel data to copy.</param>
            <param name="bitsPerChannel">The number of bits in each color channel (e.g., 8 or 16).</param>
            <param name="components">The number of channels in the texture (1–4).</param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.LoadRawData(TriLibCore.TextureLoadingContext,System.Byte[])">
            <summary>
            Copies the <paramref name="data"/> array into <see cref="P:TriLibCore.TextureLoadingContext.UnityTexture"/>, 
            marking the texture as loaded.
            </summary>
            <param name="textureLoadingContext">The context containing the Unity texture.</param>
            <param name="data">The pixel data to copy into the texture.</param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.GetComponentsCount(StbImageSharp.ColorComponents)">
            <summary>
            Converts a <see cref="T:StbImageSharp.ColorComponents"/> value to its integer equivalent number of channels (1–4).
            </summary>
            <param name="colorComponents">The color component descriptor from StbImageSharp.</param>
            <returns>The integer number of channels (e.g. 1, 2, 3, or 4).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="colorComponents"/> is an unexpected value.
            </exception>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.WriteToFile(System.IO.Stream,System.String,System.Int32,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Writes the contents of <paramref name="stream"/> into a file at <paramref name="destinationFile"/> 
            using the specified buffer size and file sharing mode.
            </summary>
            <param name="stream">The source stream to read from.</param>
            <param name="destinationFile">The file path to write to.</param>
            <param name="bufferSize">The size (in bytes) of the buffer used while copying the stream.</param>
            <param name="mode">
            A <see cref="T:System.IO.FileMode"/> specifying how the file is opened or created. 
            Defaults to <see cref="F:System.IO.FileMode.OpenOrCreate"/>.
            </param>
            <param name="access">
            A <see cref="T:System.IO.FileAccess"/> specifying the level of access permitted. 
            Defaults to <see cref="F:System.IO.FileAccess.ReadWrite"/>.
            </param>
            <param name="share">
            A <see cref="T:System.IO.FileShare"/> specifying the type of access other processes have to the file. 
            Defaults to <see cref="F:System.IO.FileShare.ReadWrite"/>.
            </param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.PostProcessTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Applies any post-processing to the texture as dictated by the <see cref="T:TriLibCore.Interfaces.IMaterial"/> 
            in <see cref="F:TriLibCore.TextureLoadingContext.MaterialMapperContext"/>, then marks the texture as processed.
            </summary>
            <param name="textureLoadingContext">The context containing the texture to post-process.</param>
            <returns>
            A value indicating whether the material actually performed any post-processing.
            </returns>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.CreateTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Creates a texture structure (e.g. <see cref="T:UnityEngine.Texture2D"/>) without fully loading pixel data, 
            based on basic information (width, height, etc.) found via <see cref="T:StbImageSharp.ImageInfo"/>.
            </summary>
            <param name="textureLoadingContext">The context that will contain the created texture.</param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.CreateTextureInternal(TriLibCore.TextureLoadingContext)">
            <summary>
            Creates a <see cref="T:UnityEngine.Texture2D"/> in <paramref name="textureLoadingContext"/>, respecting the 
            <see cref="F:TriLibCore.AssetLoaderOptions.MaxTexturesResolution"/> setting. 
            Called internally once width/height are known.
            </summary>
            <param name="textureLoadingContext">The context to update with the newly created texture.</param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.ApplyTexture(TriLibCore.TextureLoadingContext,System.Boolean)">
            <summary>
            Applies (uploads) the <see cref="T:UnityEngine.Texture2D"/> data to the GPU, optionally treating the texture 
            as procedural if requested. See <see cref="M:TriLibCore.Utils.TextureUtils.ApplyTexture2D(TriLibCore.TextureLoadingContext,System.Boolean)"/> for details.
            </summary>
            <param name="textureLoadingContext">The context containing the texture to apply.</param>
            <param name="procedural">
            <see langword="true"/> to treat the texture as procedural; <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.FixNPOTTexture(TriLibCore.TextureLoadingContext)">
            <summary>
            Fixes a non-power-of-two (NPOT) texture by rescaling it to the nearest power-of-two resolution if needed.
            </summary>
            <param name="textureLoadingContext">The context containing the texture to fix.</param>
        </member>
        <member name="M:TriLibCore.Textures.TextureLoaders.FixNormalMap(TriLibCore.TextureLoadingContext)">
            <summary>
            If the texture in <paramref name="textureLoadingContext"/> is recognized as a normal map, 
            adjusts its channels to properly match Unity’s normal map expectations.
            </summary>
            <param name="textureLoadingContext">The context containing the texture to fix.</param>
        </member>
    </members>
</doc>
